---
- name: network
  title: Network
  group: 2
  short: Fields describing the communication path over which the event happened.
  description: >
    The network is defined as the communication path over which a host or network event happens.

    The network.* fields should be populated with details about the network activity associated with an event.
  type: group
  fields:

    - name: name
      level: extended
      type: keyword
      description: >
        Name given by operators to sections of their network.
      example: Guest Wifi

    - name: dot1q_ctag
      level: core
      type: keyword
      description: >
        The customer VLAN identifier in the C-TAG (Customer VLAN Tag) TCI (Tag
        Control Information) field as defined in IEEE 802.1Q. This could be the
        VLAN's numeric identifier or text description. 

    - name: dot1q_vlan
      level: core
      type: keyword
      description: >
        The VLAN identifier portion of the TCI (Tag Control Information) field
        of an Ethernet frame as defined in IEEE 802.1Q. This could be the VLAN's
        numeric identifier or text description. 

    - name: type
      level: core
      type: keyword
      short: In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
      description: >
        In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc

        The field value must be normalized to lowercase for querying. See
        the documentation section "Implementing ECS".
      example: ipv4

    - name: class_of_service
      level: core
      type: long
      short: Classification value for IP packets.
      description: >
        In the case of IPv4 packets this would correspond to the TOS (Type of
        Service) field. In the case of IPv6 packets this would correspond to
        the Traffic Class field.

    - name: icmp_type_code
      level: core
      type: keyword
      short: Type and code of an IPv4 ICMP messages.
      description: >
        This could be represented using a numeric value or a text description.
        For example, an ICMP echo request would have "type = 8" and "code = 0",
        which could be represented as "0x0800" or "ICMP Echo".

    - name: iana_number
      level: extended
      type: keyword
      short: IANA Protocol Number.
      description: >
          IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
          Standardized list of protocols. This aligns well with NetFlow and
          sFlow related logs which use the IANA Protocol Number.
      example: 6

    - name: transport
      level: core
      type: keyword
      short: Protocol Name corresponding to the field `iana_number`.
      description: >
        Same as network.iana_number, but instead using the Keyword name of the
        transport layer (udp, tcp, ipv6-icmp, etc.)

        The field value must be normalized to lowercase for querying. See
        the documentation section "Implementing ECS".
      example: tcp

    - name: fragment_identification
      level: core
      type: long
      description: >
        The value of the fragment identification field from an IPv4 or IPv6
        packet header.

    - name: tcp_control_bits
      level: core
      type: keyword
      short: Control bits set in the TCP header.
      description: >
        This could be represented using a numeric value or text description.
        For example, a TCP syncrhonize flag could be represented as "0x0002" or
        "SYN".

    - name: application
      level: extended
      type: keyword
      short: >
        Application level protocol name.
      description: >
        A name given to an application level protocol. This can be arbitrarily assigned for
        things like microservices, but also apply to things like skype, icq,
        facebook, twitter. This would be used in situations where the vendor
        or service can be decoded such as from the source/dest IP owners,
        ports, or wire format.

        The field value must be normalized to lowercase for querying. See
        the documentation section "Implementing ECS".
      example: aim

    - name: protocol
      level: core
      type: keyword
      short: L7 Network protocol name.
      description: >
        L7 Network protocol name. ex. http, lumberjack, transport protocol.

        The field value must be normalized to lowercase for querying. See
        the documentation section "Implementing ECS".
      example: http

    - name: direction
      level: core
      type: keyword
      short: Direction of the network traffic.
      description: >
        Direction of the network traffic.

        Recommended values are:
          * inbound
          * outbound
          * internal
          * external
          * unknown

        When mapping events from a host-based monitoring context, populate this
        field from the host's point of view.

        When mapping events from a network or perimeter-based monitoring context,
        populate this field from the point of view of your network perimeter.
      example: inbound

    - name: egress_interface
      level: core
      type: keyword
      short: Network interface from which frames or packets exited.
      description: >
        From the observation point of a network event, the network interface
        from which frames or packets were transmitted. For example, in the case
        of a switch or router this might be the port name (e.g. eth0, ge-0/1, 
        GigabitEthernet0/0, etc.), port description, or SNMP ifIndex (e.g. 501).

    - name: egress_vlan
      level: core
      type: keyword
      short: VLAN in which frames exited the observer.
      description: >
        From the observation point of a network event, the VLAN in which the
        frame was transmitted. This could be the VLAN's numeric identifier or
        text description. 

    - name: ingress_interface
      level: core
      type: keyword
      short: Network interface into which frames or packets entered.
      description: >
        From the observation point of a network event, the network interface
        into which frames or packets were received. For example, in the case
        of a switch or router this might be the port name (e.g. eth0, ge-0/1, 
        GigabitEthernet0/0, etc.), port description, or SNMP ifIndex (e.g. 501).

    - name: ingress_vlan
      level: core
      type: keyword
      short: VLAN in which frames entered the observer.
      description: >
        From the observation point of a network event, the VLAN in which the
        frame was received. This could be the VLAN's numeric identifier or
        text description. 

    - name: forwarded_ip
      level: core
      type: ip
      description: >
        Host IP address when the source IP address is the proxy.
      example: 192.1.1.2

    - name: community_id
      level: extended
      type: keyword
      short: A hash of source and destination IPs and ports.
      description: >
        A hash of source and destination IPs and ports, as well as the protocol
        used in a communication. This is a tool-agnostic standard to identify
        flows.

        Learn more at https://github.com/corelight/community-id-spec.
      example: '1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0='

    # Metrics
    - name: bytes
      level: core
      type: long
      format: bytes
      short: Total bytes transferred in both directions.
      description: >
        Total bytes transferred in both directions.

        If `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.
      example: 368

    - name: bit_rate
      level: core
      type: float
      short: Calculated network throughput in bits per some time period.
      description: >
        Calculated by dividing the total number of bits transferred during an
        arbitrary period of time by that period of time. By convention, this
        would likely be presented in bps (bits per second).

    - name: packets
      level: core
      type: long
      short: Total packets transferred in both directions.
      description: >
        Total packets transferred in both directions.

        If `source.packets` and `destination.packets` are known, `network.packets` is their sum.
      example: 24

    - name: packet_rate
      level: core
      type: float
      short: Calculated network throughput in packets per some time period.
      description: >
        Calculated by dividing the total number of packets transferred during an
        arbitrary period of time by that period of time. By convention, this
        would likely be presented in pps (packets per second).
