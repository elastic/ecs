
[[ecs-category-field-values-reference]]
== {ecs} Categorization Fields

WARNING: This section of ECS is in beta and is subject to change. These allowed values
are still under active development. Additional values will be published gradually,
and some of the values or relationships described here may change.
Users who want to provide feedback, or who want to have a look at
upcoming allowed values can visit this public feedback document
https://ela.st/ecs-categories-draft.

At a high level, ECS provides fields to classify events in two different ways:
"Where it's from" (e.g., `event.module`, `event.dataset`, `agent.type`, `observer.type`, etc.),
and "What it is." The categorization fields hold the "What it is" information,
independent of the source of the events.

ECS defines four categorization fields for this purpose, each of which falls under the `event.*` field set.

[float]
[[ecs-category-fields]]
=== Categorization Fields

* <<ecs-allowed-values-event-kind,event.kind>>
* <<ecs-allowed-values-event-category,event.category>>
* <<ecs-allowed-values-event-type,event.type>>
* <<ecs-allowed-values-event-outcome,event.outcome>>

NOTE: If your events don't match any of these categorization values, you should
leave the fields empty. This will ensure you can start populating the fields
once the appropriate categorization values are published, in a later release.

[[ecs-allowed-values-event-kind]]
=== ECS Categorization Field: event.kind

This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.

`event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.

The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.

WARNING: After the beta period for categorization, only the allowed categorization
values listed in the ECS repository and official ECS documentation should be considered
official. Use of any other values may result in incompatible implementations
that will require subsequent breaking changes.

*Allowed Values*

* <<ecs-event-kind-alert,alert>>
* <<ecs-event-kind-event,event>>
* <<ecs-event-kind-metric,metric>>
* <<ecs-event-kind-state,state>>
* <<ecs-event-kind-pipeline_error,pipeline_error>>
* <<ecs-event-kind-signal,signal>>

[float]
[[ecs-event-kind-alert]]
==== alert

This value indicates an event that describes an alert or notable event, triggered by a detection rule.

`event.kind:alert` is often populated for events coming from firewalls, intrusion detection systems, endpoint detection and response systems, and so on.



[float]
[[ecs-event-kind-event]]
==== event

This value is the most general and most common value for this field. It is used to represent events that indicate that something happened.



[float]
[[ecs-event-kind-metric]]
==== metric

This value is used to indicate that this event describes a numeric measurement taken at given point in time.

Examples include CPU utilization, memory usage, or device temperature.

Metric events are often collected on a predictable frequency, such as once every few seconds, or once a minute, but can also be used to describe ad-hoc numeric metric queries.



[float]
[[ecs-event-kind-state]]
==== state

The state value is similar to metric, indicating that this event describes a measurement taken at given point in time, except that the measurement does not result in a numeric value, but rather one of a fixed set of categorical values that represent conditions or states.

Examples include periodic events reporting Elasticsearch cluster state (green/yellow/red), the state of a TCP connection (open, closed, fin_wait, etc.), the state of a host with respect to a software vulnerability (vulnerable, not vulnerable), and the state of a system regarding compliance with a regulatory standard (compliant, not compliant).

Note that an event that describes a change of state would not use `event.kind:state`, but instead would use 'event.kind:event' since a state change fits the more general event definition of something that happened.

State events are often collected on a predictable frequency, such as once every few seconds, once a minute, once an hour, or once a day, but can also be used to describe ad-hoc state queries.



[float]
[[ecs-event-kind-pipeline_error]]
==== pipeline_error

This value indicates that an error occurred during the ingestion of this event, and that event data may be missing, inconsistent, or incorrect. `event.kind:pipeline_error` is often associated with parsing errors.



[float]
[[ecs-event-kind-signal]]
==== signal

This value is used by the Elastic SIEM app to denote an Elasticsearch document that was created by a SIEM detection engine rule.

A signal will typically trigger a notification that something meaningful happened and should be investigated.

Usage of this value is reserved, and pipelines should not populate `event.kind` with the value "signal".



[[ecs-allowed-values-event-category]]
=== ECS Categorization Field: event.category

This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.

`event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.

This field is an array. This will allow proper categorization of some events that fall in multiple categories.

WARNING: After the beta period for categorization, only the allowed categorization
values listed in the ECS repository and official ECS documentation should be considered
official. Use of any other values may result in incompatible implementations
that will require subsequent breaking changes.

*Allowed Values*

* <<ecs-event-category-authentication,authentication>>
* <<ecs-event-category-configuration,configuration>>
* <<ecs-event-category-database,database>>
* <<ecs-event-category-driver,driver>>
* <<ecs-event-category-file,file>>
* <<ecs-event-category-host,host>>
* <<ecs-event-category-iam,iam>>
* <<ecs-event-category-intrusion_detection,intrusion_detection>>
* <<ecs-event-category-malware,malware>>
* <<ecs-event-category-network,network>>
* <<ecs-event-category-package,package>>
* <<ecs-event-category-process,process>>
* <<ecs-event-category-web,web>>

[float]
[[ecs-event-category-authentication]]
==== authentication

Events in this category are related to the challenge and response process in which credentials are supplied and verified to allow the creation of a session. Common sources for these logs are Windows event logs and ssh logs. Visualize and analyze events in this category to look for failed logins, and other authentication-related activity.


*Expected event types for category authentication:*

start, end, info


[float]
[[ecs-event-category-configuration]]
==== configuration

Events in the configuration category have to deal with creating, modifying, or deleting the settings or parameters of an application, process, or system.

Example sources include security policy change logs, configuration auditing logging, and system integrity monitoring.


*Expected event types for category configuration:*

access, change, creation, deletion, info


[float]
[[ecs-event-category-database]]
==== database

The database category denotes events and metrics relating to a data storage and retrieval system. Note that use of this category is not limited to relational database systems. Examples include event logs from MS SQL, MySQL, Elasticsearch, MongoDB, etc. Use this category to visualize and analyze database activity such as accesses and changes.


*Expected event types for category database:*

access, change, info, error


[float]
[[ecs-event-category-driver]]
==== driver

Events in the driver category have to do with operating system device drivers and similar software entities such as Windows drivers, kernel extensions, kernel modules, etc.

Use events and metrics in this category to visualize and analyze driver-related activity and status on hosts.


*Expected event types for category driver:*

change, end, info, start


[float]
[[ecs-event-category-file]]
==== file

Relating to a set of information that has been created on, or has existed on a filesystem. Use this category of events to visualize and analyze the creation, access, and deletions of files. Events in this category can come from both host-based and network-based sources. An example source of a network-based detection of a file transfer would be the Zeek file.log.


*Expected event types for category file:*

change, creation, deletion, info


[float]
[[ecs-event-category-host]]
==== host

Use this category to visualize and analyze information such as host inventory or host lifecycle events.

Most of the events in this category can usually be observed from the outside, such as from a hypervisor or a control plane's point of view. Some can also be seen from within, such as "start" or "end".

Note that this category is for information about hosts themselves; it is not meant to capture activity "happening on a host".


*Expected event types for category host:*

access, change, end, info, start


[float]
[[ecs-event-category-iam]]
==== iam

Identity and access management (IAM) events relating to users, groups, and administration. Use this category to visualize and analyze IAM-related logs and data from active directory, LDAP, Okta, Duo, and other IAM systems.


*Expected event types for category iam:*

admin, change, creation, deletion, group, info, user


[float]
[[ecs-event-category-intrusion_detection]]
==== intrusion_detection

Relating to intrusion detections from IDS/IPS systems and functions, both network and host-based. Use this category to visualize and analyze intrusion detection alerts from systems such as Snort, Suricata, and Palo Alto threat detections.


*Expected event types for category intrusion_detection:*

allowed, denied, info


[float]
[[ecs-event-category-malware]]
==== malware

Malware detection events and alerts. Use this category to visualize and analyze malware detections from EDR/EPP systems such as Elastic Endpoint Security, Symantec Endpoint Protection, Crowdstrike, and network IDS/IPS systems such as Suricata, or other sources of malware-related events such as Palo Alto Networks threat logs and Wildfire logs.


*Expected event types for category malware:*

info


[float]
[[ecs-event-category-network]]
==== network

Relating to all network activity, including network connection lifecycle, network traffic, and essentially any event that includes an IP address. Many events containing decoded network protocol transactions fit into this category. Use events in this category to visualize or analyze counts of network ports, protocols, addresses, geolocation information, etc.


*Expected event types for category network:*

access, allowed, connection, denied, end, info, protocol, start


[float]
[[ecs-event-category-package]]
==== package

Relating to software packages installed on hosts. Use this category to visualize and analyze inventory of software installed on various hosts, or to determine host vulnerability in the absence of vulnerability scan data.


*Expected event types for category package:*

access, change, deletion, info, installation, start


[float]
[[ecs-event-category-process]]
==== process

Use this category of events to visualize and analyze process-specific information such as lifecycle events or process ancestry.


*Expected event types for category process:*

access, change, end, info, start


[float]
[[ecs-event-category-web]]
==== web

Relating to web server access. Use this category to create a dashboard of web server/proxy activity from apache, IIS, nginx web servers, etc. Note: events from network observers such as Zeek http log may also be included in this category.


*Expected event types for category web:*

access, error, info


[[ecs-allowed-values-event-type]]
=== ECS Categorization Field: event.type

This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.

`event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.

This field is an array. This will allow proper categorization of some events that fall in multiple event types.

WARNING: After the beta period for categorization, only the allowed categorization
values listed in the ECS repository and official ECS documentation should be considered
official. Use of any other values may result in incompatible implementations
that will require subsequent breaking changes.

*Allowed Values*

* <<ecs-event-type-access,access>>
* <<ecs-event-type-admin,admin>>
* <<ecs-event-type-allowed,allowed>>
* <<ecs-event-type-change,change>>
* <<ecs-event-type-connection,connection>>
* <<ecs-event-type-creation,creation>>
* <<ecs-event-type-deletion,deletion>>
* <<ecs-event-type-denied,denied>>
* <<ecs-event-type-end,end>>
* <<ecs-event-type-error,error>>
* <<ecs-event-type-group,group>>
* <<ecs-event-type-info,info>>
* <<ecs-event-type-installation,installation>>
* <<ecs-event-type-protocol,protocol>>
* <<ecs-event-type-start,start>>
* <<ecs-event-type-user,user>>

[float]
[[ecs-event-type-access]]
==== access

The access event type is used for the subset of events within a category that indicate that something was accessed. Common examples include `event.category:database AND event.type:access`, or `event.category:file AND event.type:access`. Note for file access, both directory listings and file opens should be included in this subcategory. You can further distinguish access operations using the ECS `event.action` field.



[float]
[[ecs-event-type-admin]]
==== admin

The admin event type is used for the subset of events within a category that are related to admin objects. For example, administrative changes within an IAM framework that do not specifically affect a user or group (e.g., adding new applications to a federation solution or connecting discrete forests in Active Directory) would fall into this subcategory. Common example: `event.category:iam AND event.type:change AND event.type:admin`. You can further distinguish admin operations using the ECS `event.action` field.



[float]
[[ecs-event-type-allowed]]
==== allowed

The allowed event type is used for the subset of events within a category that indicate that something was allowed. Common examples include `event.category:network AND event.type:connection AND event.type:allowed` (to indicate a network firewall event for which the firewall disposition was to allow the connection to complete) and `event.category:intrusion_detection AND event.type:allowed` (to indicate a network intrusion prevention system event for which the IPS disposition was to allow the connection to complete). You can further distinguish allowed operations using the ECS `event.action` field, populating with values of your choosing, such as "allow", "detect", or "pass".



[float]
[[ecs-event-type-change]]
==== change

The change event type is used for the subset of events within a category that indicate that something has changed. If semantics best describe an event as modified, then include them in this subcategory. Common examples include `event.category:process AND event.type:change`, and `event.category:file AND event.type:change`. You can further distinguish change operations using the ECS `event.action` field.



[float]
[[ecs-event-type-connection]]
==== connection

Used primarily with `event.category:network` this value is used for the subset of network traffic that includes sufficient information for the event to be included in flow or connection analysis. Events in this subcategory will contain at least source and destination IP addresses, source and destination TCP/UDP ports, and will usually contain counts of bytes and/or packets transferred. Events in this subcategory may contain unidirectional or bidirectional information, including summary information. Use this subcategory to visualize and analyze network connections. Flow analysis, including Netflow, IPFIX, and other flow-related events fit in this subcategory. Note that firewall events from many Next-Generation Firewall (NGFW) devices will also fit into this subcategory.  A common filter for flow/connection information would be `event.category:network AND event.type:connection AND event.type:end` (to view or analyze all completed network connections, ignoring mid-flow reports). You can further distinguish connection events using the ECS `event.action` field, populating with values of your choosing, such as "timeout", or "reset".



[float]
[[ecs-event-type-creation]]
==== creation

The "creation" event type is used for the subset of events within a category that indicate that something was created. A common example is `event.category:file AND event.type:creation`.



[float]
[[ecs-event-type-deletion]]
==== deletion

The deletion event type is used for the subset of events within a category that indicate that something was deleted. A common example is `event.category:file AND event.type:deletion` to indicate that a file has been deleted.



[float]
[[ecs-event-type-denied]]
==== denied

The denied event type is used for the subset of events within a category that indicate that something was denied. Common examples include `event.category:network AND event.type:denied` (to indicate a network firewall event for which the firewall disposition was to deny the connection) and `event.category:intrusion_detection AND event.type:denied` (to indicate a network intrusion prevention system event for which the IPS disposition was to deny the connection to complete). You can further distinguish denied operations using the ECS `event.action` field, populating with values of your choosing, such as "blocked", "dropped", or "quarantined".



[float]
[[ecs-event-type-end]]
==== end

The end event type is used for the subset of events within a category that indicate something has ended. A common example is `event.category:process AND event.type:end`.



[float]
[[ecs-event-type-error]]
==== error

The error event type is used for the subset of events within a category that indicate or describe an error. A common example is `event.category:database AND event.type:error`. Note that pipeline errors that occur during the event ingestion process should not use this `event.type` value. Instead, they should use `event.kind:pipeline_error`.



[float]
[[ecs-event-type-group]]
==== group

The group event type is used for the subset of events within a category that are related to group objects. Common example: `event.category:iam AND event.type:creation AND event.type:group`. You can further distinguish group operations using the ECS `event.action` field.



[float]
[[ecs-event-type-info]]
==== info

The info event type is used for the subset of events within a category that indicate that they are purely informational, and don't report a state change, or any type of action. For example, an initial run of a file integrity monitoring system (FIM), where an agent reports all files under management, would fall into the "info" subcategory. Similarly, an event containing a dump of all currently running processes (as opposed to reporting that a process started/ended) would fall into the "info" subcategory. An additional common examples is `event.category:intrusion_detection AND event.type:info`.



[float]
[[ecs-event-type-installation]]
==== installation

The installation event type is used for the subset of events within a category that indicate that something was installed. A common example is `event.category:package` AND `event.type:installation`.



[float]
[[ecs-event-type-protocol]]
==== protocol

The protocol event type is used for the subset of events within a category that indicate that they contain protocol details or analysis, beyond simply identifying the protocol. Generally, network events that contain specific protocol details will fall into this subcategory. A common example is `event.category:network AND event.type:protocol AND event.type:connection AND event.type:end` (to indicate that the event is a network connection event sent at the end of a connection that also includes a protocol detail breakdown). Note that events that only indicate the name or id of the protocol should not use the protocol value. Further note that when the protocol subcategory is used, the identified protocol is populated in the ECS `network.protocol` field.



[float]
[[ecs-event-type-start]]
==== start

The start event type is used for the subset of events within a category that indicate something has started. A common example is `event.category:process AND event.type:start`.



[float]
[[ecs-event-type-user]]
==== user

The user event type is used for the subset of events within a category that are related to user objects. Common example: `event.category:iam AND event.type:deletion AND event.type:user`. You can further distinguish user operations using the ECS `event.action` field.



[[ecs-allowed-values-event-outcome]]
=== ECS Categorization Field: event.outcome

This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.

`event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.

Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.

Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.

Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.

WARNING: After the beta period for categorization, only the allowed categorization
values listed in the ECS repository and official ECS documentation should be considered
official. Use of any other values may result in incompatible implementations
that will require subsequent breaking changes.

*Allowed Values*

* <<ecs-event-outcome-failure,failure>>
* <<ecs-event-outcome-success,success>>
* <<ecs-event-outcome-unknown,unknown>>

[float]
[[ecs-event-outcome-failure]]
==== failure

Indicates that this event describes a failed result. A common example is `event.category:file AND event.type:access AND event.outcome:failure` to indicate that a file access was attempted, but was not successful.



[float]
[[ecs-event-outcome-success]]
==== success

Indicates that this event describes a successful result. A common example is `event.category:file AND event.type:create AND event.outcome:success` to indicate that a file was successfully created.



[float]
[[ecs-event-outcome-unknown]]
==== unknown

Indicates that this event describes only an attempt for which the result is unknown from the perspective of the event producer. For example, if the event contains information only about the request side of a transaction that results in a response, populating `event.outcome:unknown` in the request event is appropriate. The unknown value should not be used when an outcome doesn't make logical sense for the event. In such cases `event.outcome` should not be populated.


