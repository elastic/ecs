[[ecs-tracing-usage]]
==== Tracing Usage

A trace describes the individual operations and their causality that ensue from a single logical 
operation. A distributed trace comprises operations across multiple distributed components, crossing process, 
network, and security boundaries.

For example, a distributed trace may be initiated when someone presses a button to start an action on a website – in this example, 
the trace represents calls made between the downstream services that handled the chain of requests initiated by this 
button press.

A trace is made up of transactions and spans, where each transaction/span is one operation, activity, or part of the overall
trace. A transaction is a special kind of span that is the highest level of work measured within a service. In Elastic APM, 
transactions also have additional attributes associated with them.
(for more detail see https://www.elastic.co/guide/en/apm/get-started/current/transactions.html).

Usually a transaction corresponds to the top level request to a component. Sometimes a component may break up processing into 
multiple spans (and transactions) if needed. 

The spans (and transactions) have a parent/child relationship with other spans and form a tree (also known as a directed acyclic graph), 
with each span (or transaction), except the root, having a parent.

The `trace.id` allows the distributed trace messages to be correlated across an entire logical operation.

The `span.id` allows messages from a single section of processing within the overall trace, e.g. a request to a component, to be correlated together. The `transaction.id` is the equivalent for transaction spans.

If following the https://www.w3.org/TR/trace-context/[W3C Trace Context Recommendation] then
the values should correspond to those specified in the recommendation and passed in the `traceparent` header, 
with `trace.id` being 32 lowercase hex characters, and `span.id` being 16 lowercase hex characters.

For correlation wtih Elastic Application Performance Monitoring (APM) see 
the https://www.elastic.co/guide/en/apm/get-started/current/distributed-tracing.html[APM Distributed Tracing] documentation.

===== Example

The following is an example **Trace** made up of 6 **Spans** (2 of which are top level **Transactions**):

------------------------------------------------------------------
Causal relationships between Spans in a single Trace

       [Transaction Span A]  ←←←(the root transaction span)
           |
    +------+------+
    |             | ←←←(call to Service 2)
    |             v
[Span B]      [Transaction Span C] ←←←(C is a child of A)
    |             |
[Span D]      +---+-------+
              |           |
          [Span E]    [Span F]
------------------------------------------------------------------

Sometimes it's easier to visualize **Traces** with a time axis as in the diagram
below:

------------------------------------------------------------------
Temporal relationships between Spans in a single Trace

––|–––––––|–––––––|–––––––|–––––––|–––––––|–––––––|–––––––|–> time

Service 1:
[Transaction Span A·······································]
[Span B··············································]
    [Span D··········································]

Service 2:
    [Transaction Span C····························]
        [Span E·······]        [Span F··]
------------------------------------------------------------------

Diagrams modified from the https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md[OpenTelemetry specification overview] 
(which is also Apache 2.0 licensed).
