[[ecs-principles-implementation]]
=== Implementation

ECS contains some key fields that are found in many different event types. These fields
hold where the event happened, when it happened, and other details in addition to the event
emitted by the original source.

[float]
==== Infrastructure metadata

[float]
===== Base fields

The group of individual fields residing outside any field set at the top-level of ECS
are known as `base` fields.

ECS events follow these conventions with the `base` fields:

* All events must populate <<field-timestamp, `@timestamp`>>.
* Most events should populate <<field-message, `message`>>.
* The <<field-ecs-version, `ecs.version`>> field should be populated with the ECS version against which the data
sources or the pipeline was developed. This value is helpful to detect if data sources are falling
behind, have been updated, or understanding why a particular data source isn't populating the
same fields as another.
* The <<field-tags, `tags`>> and <<field-labels, `labels`>> fields can be used to add simple metadata to an event as `keyword` values.

[float]
===== Host

In ECS, the computing instance where the event happened is the `host`. A `host`
can be a physical device, virtual machine, container, or cloud instance.

The <<ecs-host, `host.*`>> field set contains attributes common to all types of computing instances.
Some host types have additional fields to capture their specialized details, like
`cloud.*` or `container.*`.

[float]
===== Agent and observer

An agent is the software component that collects, observes, measures, or detects the event.
The <<ecs-agent, `agent.*`>> fields capture details about which agent entity captured the event,
including the agent's version. Examples of agents are Beats and Elastic Agent.

External monitoring or intermediary devices, like a firewall, APM server, or web proxy,
that observe and detect network, security, application events are known as `observers`. Observer
details are captured underneath the <<ecs-observer, `observer.*`>> field set.

[float]
==== Static metadata

Most events will populate <<ecs-event, `event.*`>> fields to provide context metadata about the log or
metric event. Many of fields won't contain data extracted for the original event, but added by a monitoring or
ingest agent, enrichment, or some other ingestion pipeline.

[float]
===== Timestamps

ECS requires the `@timestamp` field on every event, but events can benefits from capturing additional timestamps.

<<field-timestamp, `@timestamp`>>::
When the event originated, extracted from the event representing when the event
was generated by the source.

<<field-event-created, `event.created`>>::
When the event was first seen by an agent or pipeline.

<<field-event-ingested, `event.ingested`>>::
When an event arrived in the central data store, like Elasticsearch.

In typical processing, the timestamps should chronologically be:

`@timestamp` < `event.created` < `event.ingested`.

[float]
===== Origin

* Event field is metadata based on the content of the event
** Event categorization
** Where did the event originate?
** Event timestamps
** Severity
* Log field is also useful

[float]
===== Categorization

The event categorization fields group similar events across multiple data sources by defining a set of allowed values
for four `event.*` fields:

* `event.kind`
* `event.category`
* `event.type`
* `event.outcome`

<<ecs-using-the-categorization-fields>> covers more details on using these four fields together to categorized events.

[float]
==== Enrich events with additional data

A monitoring agent or ingestion pipeline can extract values from the original event and use the values
to enrich the original events. Some enrichment examples follow:

[float]
==== Lookup based

GeoIP::
Add information about about the geographical location of an IPv4 or IPv6 address. Often used to populate the `geo.*`
fields nested under network transaction fields like `source.*`, `destination.*`, `client.*`, and `server.*`.

[source,json]
----
{
  "source": {
    "address": "8.8.8.8",
	"ip": 8.8.8.8,
    "geo": {
      "continent_name": "North America",
      "country_name": "United States",
      "country_iso_code": "US",
      "location": { "lat": 37.751, "lon": -97.822 }
	}
  }
}
----

Autonomous system number ::
Similar to GeoIP, a lookup can be made against an Autonomous System number (ASN)
database to determine the ASN associated with the IP address.

[float]
==== Parsing

User-agent::
Many application and web server logs will contain the user-agent, and the user-agent
string can be parsed into individual fields.

[source,json]
----
{
  "user_agent": {
    "user_agent": {
      "name": "Chrome",
      "original": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
      "version": "51.0.2704.103",
      "os": {
        "name": "Mac OS X",
        "version": "10.10.5",
        "full": "Mac OS X 10.10.5",
        "platform": "darwin",
        "type": "macos"
      },
      "device" : {
        "name" : "Mac"
      }
    }
  }
}
----

URL::
A URL can also be broken down into its individual parts.

[source,json]
----
{
  "original" : "http://myusername:mypassword@www.example.com:80/foo.gif?key1=val1&key2=val2#fragment",
  "url" : {
    "path" : "/foo.gif",
    "fragment" : "fragment",
    "extension" : "gif",
    "password" : "mypassword",
    "original" : "http://myusername:mypassword@www.example.com:80/foo.gif?key1=val1&key2=val2#fragment",
    "scheme" : "http",
    "port" : 80,
    "user_info" : "myusername:mypassword",
    "domain" : "www.example.com",
    "query" : "key1=val1&key2=val2",
    "username" : "myusername"
  }
}
----

Deconstruct domain names::
The registered domain (also known as the effective top-level domain), sub-domain, and top-level domain
can be extracted from a fully-qualified domain name (FQDN).

[source,json]
----
{
  "fqdn": "www.example.ac.uk",
  "url": {
    "subdomain": "www",
    "registered_domain": "example.ac.uk",
    "top_level_domain": "ac.uk",
    "domain": "www.example.ac.uk"
}
----

[float]
==== Related fields

The <<ecs-related, `related.*`>> field set is for pivoting across events that may have the same content but
different field names.

For example, IP addresses can be found under the `host.*`, `source.*`, `destination.*`, `client.*`, and
`server.*` fields sets and the `network.forwarded_ip` field. By adding all IP addresses in an event to
the `related.ip` field, there is now a single field to search for a given IP regardless of what field it
appeared:


[source,sh]
----
related.ip: 10.42.42.42
----
