[[ecs-principles-implementation]]
=== Implementation

As part of its data model, ECS defines fields for capturing common details regardless of the original event type. Normalizing
data following this model allows users to have a more consistent view of data from different sources.

By following these conventions, ECS users can better describe, discover, identify, and categorize their events.

[float]
==== Infrastructure metadata

[float]
===== Base fields

The group of individual fields residing outside any field set at the top-level of ECS
are known as base fields.

ECS events follow these conventions with the base fields:

@timestamp::
All events must populate <<field-timestamp, `@timestamp`>> with the timestamp of when the event originated.

message::
Most events should populate <<field-message, `message`>>.

ecs.version::
The referenced <<field-ecs-version, `ecs.version`>> used to develop the data sources mapping or ingest pipeline.
This value is helpful to detect if data sources are falling behind, have been updated, or
understand why a particular data source isn't populating the same fields as another.

tags and labels::
The <<field-tags, `tags>> and <<field-labels, `labels`>> fields can be used to add simple metadata to an event as `keyword` values.

[float]
===== Host

In ECS, the `host` is the computing instance where the event happened. A `host` can be a physical device, virtual machine, container, or cloud instance.

The <<ecs-host, `host.*`>> field set contains attributes common to all types of computing instances.
Certain host types have additional fields to capture specific details, like
`cloud.*` or `container.*`.

[float]
===== Agent and observer

An agent is the software component that collects, observes, measures, or detects the event.
The <<ecs-agent, `agent.*`>> fields capture details about which agent entity captured the event,
including the agent's version. Examples of agents are Beats and Elastic Agent.

External monitoring or intermediary devices, like a firewall, APM server, or web proxy,
that observe and detect network, security, application events are known as `observers`. Observer
details are captured underneath the <<ecs-observer, `observer.*`>> field set.

[float]
==== Static metadata

Most events will populate <<ecs-event, `event.*`>> fields to provide context metadata about the log or
metric event. However, many fields won't contain data extracted from the original event but added by a monitoring or
ingest agent, enrichment, or other ingestion pipeline.

[float]
===== Timestamps

ECS requires the `@timestamp` field on every event, but events can benefit from capturing additional timestamps.

@timestamp::
All events must populate <<field-timestamp, `@timestamp`>> with when the event originated.

event.created::
The <<field-event-created, `event.created`>> field contains when an agent or pipeline first saw the event.

event.ingested::
The timestamp of when an event arrived in the central data store, like Elasticsearch, should be place in <<field-event-ingested, `event.ingested`>>.

In typical processing, these three previous timestamps should chronologically be:

[source,sh]
----
@timestamp < event.created < event.ingested
----

event.start::
This timestamp marks the beginning of the event activity. For example, in a network session, <<field-event-start, `event.start`>>
is the timestamp of the first observed packet in the flow.

event.end::
This timestamp marks the end of the activity. In a network flow, <<field-event-end, `event.end`>> is the timestamp of the last observed packet
in the flow.

event.duration::
If `event.end` and `event.start` are both available, <<field-event-duration, `event.duration`>> should be their difference:

[source,sh]
----
event.duration = event.end - event.start
----

[float]
===== Origin

Specific `event.*` fields exist to capture where an event originated.

event.provider::
The <<field-event-provider, `event.provider`>> field contains the name of the software or operating subsystem that generated the event.

event.module::
If the ingest agent or pipeline has a concept of modules or plugins to process events,
<<field-event-module, `event.module`>> should be populated with the name of this module or plugin.

event.dataset::
Used to define different types of logs or metrics from an event source. The recommended
convention is `<moduleName>.<datasetName>`. For Apache web server access logs, the
<<field-event-dataset, `event.dataset`>> value will be `apache.access`.

[float]
===== Categorization

The event categorization fields group similar events across multiple data sources by defining a set of allowed values
for four `event.*` fields:

* `event.kind`
* `event.category`
* `event.type`
* `event.outcome`

<<ecs-using-the-categorization-fields>> covers more details on using these four fields together to categorize events.

[float]
==== Enrich events with additional data

A monitoring agent or ingestion pipeline can extract values from the original event and use the values
to enrich the original events. Some enrichment examples follow:

[float]
==== Lookup based

GeoIP::
Add information about the geographical location of an IPv4 or IPv6 address. Often used to populate the `geo.*`
fields nested under network transaction fields like `source.*`, `destination.*`, `client.*`, and `server.*`.

[source,json]
----
{
  "source": {
    "address": "8.8.8.8",
	  "ip": 8.8.8.8,
    "geo": {
      "continent_name": "North America",
      "country_name": "United States",
      "country_iso_code": "US",
      "location": { "lat": 37.751, "lon": -97.822 }
	}
  }
}
----

Autonomous system number::
Similar to GeoIP, Autonomous System Number (ASN) database lookup can determine the ASN associated with the IP address.

[float]
==== Parsing

User-agent::
Many application and web server logs will contain the user-agent which can break down into individual fields.

[source,json]
----
{
  "user_agent": {
    "user_agent": {
      "name": "Chrome",
      "original": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
      "version": "51.0.2704.103",
      "os": {
        "name": "Mac OS X",
        "version": "10.10.5",
        "full": "Mac OS X 10.10.5",
        "platform": "darwin",
        "type": "macos"
      },
      "device" : {
        "name" : "Mac"
      }
    }
  }
}
----

URL::
A URL can also break down into its discrete parts.

[source,json]
----
{
  "original" : "http://myusername:mypassword@www.example.com:80/foo.gif?key1=val1&key2=val2#fragment",
  "url" : {
    "path" : "/foo.gif",
    "fragment" : "fragment",
    "extension" : "gif",
    "password" : "mypassword",
    "original" : "http://myusername:mypassword@www.example.com:80/foo.gif?key1=val1&key2=val2#fragment",
    "scheme" : "http",
    "port" : 80,
    "user_info" : "myusername:mypassword",
    "domain" : "www.example.com",
    "query" : "key1=val1&key2=val2",
    "username" : "myusername"
  }
}
----

Deconstruct domain names::
The registered domain (also known as the effective top-level domain), sub-domain, and top-level domain
can be extracted from a fully-qualified domain name (FQDN).

[source,json]
----
{
  "fqdn": "www.example.ac.uk",
  "url": {
    "subdomain": "www",
    "registered_domain": "example.ac.uk",
    "top_level_domain": "ac.uk",
    "domain": "www.example.ac.uk"
}
----

[float]
==== Related fields

The <<ecs-related, `related.*`>> field set is for pivoting across events that may have the same content but
different field names.

For example, IP addresses found under the `host.*`, `source.*`, `destination.*`, `client.*`, and
`server.*` fields sets and the `network.forwarded_ip` field. By adding all IP addresses in an event to
the `related.ip` field, there is now a single field to search for a given IP regardless of what field it
appeared:


[source,sh]
----
related.ip: 10.42.42.42
----

[float]
==== Network events

The <<ecs-mapping-network-events>> section explores the specifics of mapping network events with examples.
