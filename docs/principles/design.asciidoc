[[ecs-principles-design]]
=== Design

The considerations here form the basis of ECS's design. These principles help guide
making the appropriate decisions for the project.

[float]
==== Changes come at a cost

The goal of ECS is to maximize interoperability and reuse. When expanding the concepts represented in ECS,
consideration should be given to how broad or narrow the intended use cases are.

Fields with a narrow or incorrect definition or which lack understanding of semantics limit other use cases from adopting
them later on. Adding additional fields is less complicated than changing or removing defined ones.

Add the fewest fields to capture an event adequately, and avoid adding fields simply because a concept exists.

For example, a network protocol specification may contain many features, but some are obscure and used infrequently. Avoid standardization for standardizationâ€™s sake.

[float]
==== Field sets are namespaces

Field sets create independent schema sections for understanding a concept in isolation. Reusing common naming across different namespaces
makes the schema easier to learn and memorize frequently used fields. This design pattern helps ensure that words with broad meaning
are not limited to a single-use case.

Examples:

* Many concepts can include a `.name` or `.id` value (for example, `event.id`, `error.id`, `group.id`, `rule.id`, `user.id`).
* Multiple potential IP addresses in a single event (`source.ip`, `destination.ip`, `host.ip`).

Complex concepts may benefit from additional nesting. A field set may contain several sub-components that make up a larger concept: `dns.question.class`, `dns.question.answer`, `dns.question.type`.

[float]
==== Avoid duplication

Introducing additional fields may appear necessary if looking at a concept individually. However, looking at the entire contents of an event, using an existing field, or reusing a defined field set reuse can avoid duplicating fields.

If an application produces a unique ID for each log it emits, instead of adding a custom `.id` field for that application, consider the `event.id` field. Leveraging consistent fields across event sources
helps build more straightforward queries and visualizations.

Reusing a field set can also capture details for different entities when more than one place for a single event. The `user.*` field set and the reuse `user.target.*` allow collecting the
same detail about an acting and target users without redefining the entire `user.*` field set.

[float]
==== Custom fields

ECS can entirely model many different event types. As a part of a common schema, many different event types and data sources populate in their contents into the same fields. However, others may need custom fields to fully capture an event's contents.

Users and integrations are always encouraged to add custom fields to capture concepts not defined in ECS. Custom fields give users the flexibility to add fields for their internal use cases,
less common concepts, and experimentation.

Following the <<ecs-custom-fields-in-ecs, best practices>>, users and integrations can create a path for future migration if a similar concept appears in ECS.
