
[[ecs-base]]
=== Base fields

The `base` field set contains all fields which are on the top level. These fields are common across all types of events.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| @timestamp
| Date/time when the event originated.
| date

(core)

// ===============================================================

| tags
| List of keywords used to tag each event.
| keyword

(core)

// ===============================================================

| labels
| Custom key/value pairs.
| object

(core)

// ===============================================================

| message
| Log message optimized for viewing in a log viewer.
| text

(core)

// ===============================================================

|=====

[[ecs-base-details]]
==== Field details

===== @timestamp

Level: core

Datatype: date

Date/time when the event originated.
This is the date/time extracted from the event, typically representing when the event was generated by the source.
If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
Required field for all events.

example: `2016-05-23T08:05:34.853Z`

===== tags

Level: core

Datatype: keyword

List of keywords used to tag each event.

example: `["production", "env2"]`

===== labels

Level: core

Datatype: object

Custom key/value pairs.
Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.
Example: `docker` and `k8s` labels.

example: `{'application': 'foo-bar', 'env': 'production'}`

===== message

Level: core

Datatype: text

For log events the message field contains the log message, optimized for viewing in a log viewer.
For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
If multiple messages exist, they can be combined into one message.

example: `Hello World`

[[ecs-agent]]
=== Agent fields

The agent fields contain the data about the software entity, if any, that collects, detects, or observes events on a host, or takes measurements on a host.
Examples include Beats. Agents may also run on observers. ECS agent.* fields shall be populated with details of the agent running on the host or observer where the event happened or the measurement was taken.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| agent.version
| Version of the agent.
| keyword

(core)

// ===============================================================

| agent.name
| Custom name of the agent.
| keyword

(core)

// ===============================================================

| agent.type
| Type of the agent.
| keyword

(core)

// ===============================================================

| agent.id
| Unique identifier of this agent.
| keyword

(core)

// ===============================================================

| agent.ephemeral_id
| Ephemeral identifier of this agent.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-agent-details]]
==== Field details

===== agent.version

Level: core

Datatype: keyword

Version of the agent.

example: `6.0.0-rc2`

===== agent.name

Level: core

Datatype: keyword

Custom name of the agent.
This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.
If no name is given, the name is often left empty.

example: `foo`

===== agent.type

Level: core

Datatype: keyword

Type of the agent.
The agent type stays always the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.

example: `filebeat`

===== agent.id

Level: core

Datatype: keyword

Unique identifier of this agent (if one exists).
Example: For Beats this would be beat.id.

example: `8a4f500d`

===== agent.ephemeral_id

Level: extended

Datatype: keyword

Ephemeral identifier of this agent (if one exists).
This id normally changes across restarts, but `agent.id` does not.

example: `8a4f500f`

[[ecs-client]]
=== Client fields

A client is defined as the initiator of a network connection for events regarding sessions, connections, or bidirectional flow records.
For TCP events, the client is the initiator of the TCP connection that sends the SYN packet(s). For other protocols, the client is generally the initiator or requestor in the network transaction. Some systems use the term "originator" to refer the client in TCP connections. The client fields describe details about the system acting as the client in the network event. Client fields are usually populated in conjunction with server fields.  Client fields are generally not populated for packet-level events.
Client / server representations can add semantic context to an exchange, which is helpful to visualize the data in certain situations. If your context falls in that category, you should still ensure that source and destination are filled appropriately.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| client.address
| Client network address.
| keyword

(extended)

// ===============================================================

| client.geo.location
| Longitude and latitude.
| geo_point

(core)

// ===============================================================

| client.user.id
| One or multiple unique identifiers of the user.
| keyword

(core)

// ===============================================================

| client.user.group.id
| Unique identifier for the group on the system/platform.
| keyword

(extended)

// ===============================================================

| client.ip
| IP address of the client.
| ip

(core)

// ===============================================================

| client.user.group.name
| Name of the group.
| keyword

(extended)

// ===============================================================

| client.geo.continent_name
| Name of the continent.
| keyword

(core)

// ===============================================================

| client.user.name
| Short name or login of the user.
| keyword

(core)

// ===============================================================

| client.port
| Port of the client.
| long

(core)

// ===============================================================

| client.geo.country_name
| Country name.
| keyword

(core)

// ===============================================================

| client.user.full_name
| User's full name, if available.
| keyword

(extended)

// ===============================================================

| client.mac
| MAC address of the client.
| keyword

(core)

// ===============================================================

| client.user.email
| User email address.
| keyword

(extended)

// ===============================================================

| client.geo.region_name
| Region name.
| keyword

(core)

// ===============================================================

| client.domain
| Client domain.
| keyword

(core)

// ===============================================================

| client.user.hash
| Unique user hash to correlate information for a user in anonymized form.
| keyword

(extended)

// ===============================================================

| client.geo.city_name
| City name.
| keyword

(core)

// ===============================================================

| client.bytes
| Bytes sent from the client to the server.
| long

(core)

// ===============================================================

| client.geo.country_iso_code
| Country ISO code.
| keyword

(core)

// ===============================================================

| client.packets
| Packets sent from the client to the server.
| long

(core)

// ===============================================================

| client.geo.region_iso_code
| Region ISO code.
| keyword

(core)

// ===============================================================

| client.geo.name
| User-defined description of a location.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-client-details]]
==== Field details

===== client.address

Level: extended

Datatype: keyword

Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.



===== client.geo.location

Level: core

Datatype: geo_point

Longitude and latitude.

example: `{ "lon": -73.614830, "lat": 45.505918 }`

===== client.user.id

Level: core

Datatype: keyword

One or multiple unique identifiers of the user.



===== client.user.group.id

Level: extended

Datatype: keyword

Unique identifier for the group on the system/platform.



===== client.ip

Level: core

Datatype: ip

IP address of the client.
Can be one or multiple IPv4 or IPv6 addresses.



===== client.user.group.name

Level: extended

Datatype: keyword

Name of the group.



===== client.geo.continent_name

Level: core

Datatype: keyword

Name of the continent.

example: `North America`

===== client.user.name

Level: core

Datatype: keyword

Short name or login of the user.

example: `albert`

===== client.port

Level: core

Datatype: long

Port of the client.



===== client.geo.country_name

Level: core

Datatype: keyword

Country name.

example: `Canada`

===== client.user.full_name

Level: extended

Datatype: keyword

User's full name, if available.

example: `Albert Einstein`

===== client.mac

Level: core

Datatype: keyword

MAC address of the client.



===== client.user.email

Level: extended

Datatype: keyword

User email address.



===== client.geo.region_name

Level: core

Datatype: keyword

Region name.

example: `Quebec`

===== client.domain

Level: core

Datatype: keyword

Client domain.



===== client.user.hash

Level: extended

Datatype: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.



===== client.geo.city_name

Level: core

Datatype: keyword

City name.

example: `Montreal`

===== client.bytes

Level: core

Datatype: long

Bytes sent from the client to the server.

example: `184`

===== client.geo.country_iso_code

Level: core

Datatype: keyword

Country ISO code.

example: `CA`

===== client.packets

Level: core

Datatype: long

Packets sent from the client to the server.

example: `12`

===== client.geo.region_iso_code

Level: core

Datatype: keyword

Region ISO code.

example: `CA-QC`

===== client.geo.name

Level: extended

Datatype: keyword

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

example: `boston-dc`

[[ecs-cloud]]
=== Cloud fields

Fields related to the cloud or infrastructure the events are coming from.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| cloud.provider
| Name of the cloud provider.
| keyword

(extended)

// ===============================================================

| cloud.availability_zone
| Availability zone in which this host is running.
| keyword

(extended)

// ===============================================================

| cloud.region
| Region in which this host is running.
| keyword

(extended)

// ===============================================================

| cloud.instance.id
| Instance ID of the host machine.
| keyword

(extended)

// ===============================================================

| cloud.instance.name
| Instance name of the host machine.
| keyword

(extended)

// ===============================================================

| cloud.machine.type
| Machine type of the host machine.
| keyword

(extended)

// ===============================================================

| cloud.account.id
| The cloud account or organization id.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-cloud-details]]
==== Field details

===== cloud.provider

Level: extended

Datatype: keyword

Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.

example: `aws`

===== cloud.availability_zone

Level: extended

Datatype: keyword

Availability zone in which this host is running.

example: `us-east-1c`

===== cloud.region

Level: extended

Datatype: keyword

Region in which this host is running.

example: `us-east-1`

===== cloud.instance.id

Level: extended

Datatype: keyword

Instance ID of the host machine.

example: `i-1234567890abcdef0`

===== cloud.instance.name

Level: extended

Datatype: keyword

Instance name of the host machine.



===== cloud.machine.type

Level: extended

Datatype: keyword

Machine type of the host machine.

example: `t2.medium`

===== cloud.account.id

Level: extended

Datatype: keyword

The cloud account or organization id used to identify different entities in a multi-tenant environment.
Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.

example: `666777888999`

[[ecs-container]]
=== Container fields

Container fields are used for meta information about the specific container that is the source of information.
These fields help correlate data based containers from any runtime.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| container.runtime
| Runtime managing this container.
| keyword

(extended)

// ===============================================================

| container.id
| Unique container id.
| keyword

(core)

// ===============================================================

| container.image.name
| Name of the image the container was built on.
| keyword

(extended)

// ===============================================================

| container.image.tag
| Container image tag.
| keyword

(extended)

// ===============================================================

| container.name
| Container name.
| keyword

(extended)

// ===============================================================

| container.labels
| Image labels.
| object

(extended)

// ===============================================================

|=====

[[ecs-container-details]]
==== Field details

===== container.runtime

Level: extended

Datatype: keyword

Runtime managing this container.

example: `docker`

===== container.id

Level: core

Datatype: keyword

Unique container id.



===== container.image.name

Level: extended

Datatype: keyword

Name of the image the container was built on.



===== container.image.tag

Level: extended

Datatype: keyword

Container image tag.



===== container.name

Level: extended

Datatype: keyword

Container name.



===== container.labels

Level: extended

Datatype: object

Image labels.



[[ecs-destination]]
=== Destination fields

Destination fields describe details about the destination of a packet/event.
Destination fields are usually populated in conjunction with source fields.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| destination.address
| Destination network address.
| keyword

(extended)

// ===============================================================

| destination.geo.location
| Longitude and latitude.
| geo_point

(core)

// ===============================================================

| destination.user.id
| One or multiple unique identifiers of the user.
| keyword

(core)

// ===============================================================

| destination.user.group.id
| Unique identifier for the group on the system/platform.
| keyword

(extended)

// ===============================================================

| destination.ip
| IP address of the destination.
| ip

(core)

// ===============================================================

| destination.user.group.name
| Name of the group.
| keyword

(extended)

// ===============================================================

| destination.geo.continent_name
| Name of the continent.
| keyword

(core)

// ===============================================================

| destination.user.name
| Short name or login of the user.
| keyword

(core)

// ===============================================================

| destination.port
| Port of the destination.
| long

(core)

// ===============================================================

| destination.geo.country_name
| Country name.
| keyword

(core)

// ===============================================================

| destination.user.full_name
| User's full name, if available.
| keyword

(extended)

// ===============================================================

| destination.mac
| MAC address of the destination.
| keyword

(core)

// ===============================================================

| destination.user.email
| User email address.
| keyword

(extended)

// ===============================================================

| destination.geo.region_name
| Region name.
| keyword

(core)

// ===============================================================

| destination.domain
| Destination domain.
| keyword

(core)

// ===============================================================

| destination.user.hash
| Unique user hash to correlate information for a user in anonymized form.
| keyword

(extended)

// ===============================================================

| destination.geo.city_name
| City name.
| keyword

(core)

// ===============================================================

| destination.bytes
| Bytes sent from the destination to the source.
| long

(core)

// ===============================================================

| destination.geo.country_iso_code
| Country ISO code.
| keyword

(core)

// ===============================================================

| destination.packets
| Packets sent from the destination to the source.
| long

(core)

// ===============================================================

| destination.geo.region_iso_code
| Region ISO code.
| keyword

(core)

// ===============================================================

| destination.geo.name
| User-defined description of a location.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-destination-details]]
==== Field details

===== destination.address

Level: extended

Datatype: keyword

Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.



===== destination.geo.location

Level: core

Datatype: geo_point

Longitude and latitude.

example: `{ "lon": -73.614830, "lat": 45.505918 }`

===== destination.user.id

Level: core

Datatype: keyword

One or multiple unique identifiers of the user.



===== destination.user.group.id

Level: extended

Datatype: keyword

Unique identifier for the group on the system/platform.



===== destination.ip

Level: core

Datatype: ip

IP address of the destination.
Can be one or multiple IPv4 or IPv6 addresses.



===== destination.user.group.name

Level: extended

Datatype: keyword

Name of the group.



===== destination.geo.continent_name

Level: core

Datatype: keyword

Name of the continent.

example: `North America`

===== destination.user.name

Level: core

Datatype: keyword

Short name or login of the user.

example: `albert`

===== destination.port

Level: core

Datatype: long

Port of the destination.



===== destination.geo.country_name

Level: core

Datatype: keyword

Country name.

example: `Canada`

===== destination.user.full_name

Level: extended

Datatype: keyword

User's full name, if available.

example: `Albert Einstein`

===== destination.mac

Level: core

Datatype: keyword

MAC address of the destination.



===== destination.user.email

Level: extended

Datatype: keyword

User email address.



===== destination.geo.region_name

Level: core

Datatype: keyword

Region name.

example: `Quebec`

===== destination.domain

Level: core

Datatype: keyword

Destination domain.



===== destination.user.hash

Level: extended

Datatype: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.



===== destination.geo.city_name

Level: core

Datatype: keyword

City name.

example: `Montreal`

===== destination.bytes

Level: core

Datatype: long

Bytes sent from the destination to the source.

example: `184`

===== destination.geo.country_iso_code

Level: core

Datatype: keyword

Country ISO code.

example: `CA`

===== destination.packets

Level: core

Datatype: long

Packets sent from the destination to the source.

example: `12`

===== destination.geo.region_iso_code

Level: core

Datatype: keyword

Region ISO code.

example: `CA-QC`

===== destination.geo.name

Level: extended

Datatype: keyword

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

example: `boston-dc`

[[ecs-ecs]]
=== ECS fields

Meta-information specific to ECS.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| ecs.version
| ECS version this event conforms to.
| keyword

(core)

// ===============================================================

|=====

[[ecs-ecs-details]]
==== Field details

===== ecs.version

Level: core

Datatype: keyword

ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.

example: `1.0.0`

[[ecs-error]]
=== Error fields

These fields can represent errors of any kind.
Use them for errors that happen while fetching events or in cases where the event itself contains an error.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| error.id
| Unique identifier for the error.
| keyword

(core)

// ===============================================================

| error.message
| Error message.
| text

(core)

// ===============================================================

| error.code
| Error code describing the error.
| keyword

(core)

// ===============================================================

|=====

[[ecs-error-details]]
==== Field details

===== error.id

Level: core

Datatype: keyword

Unique identifier for the error.



===== error.message

Level: core

Datatype: text

Error message.



===== error.code

Level: core

Datatype: keyword

Error code describing the error.



[[ecs-event]]
=== Event fields

The event fields are used for context information about the log or metric event itself.
A log is defined as an event containing details of something that happened. Log events must include the time at which the thing happened. Examples of log events include a process starting on a host, a network packet being sent from a source to a destination, or a network connection between a client and a server being initiated or closed. A metric is defined as an event containing one or more numerical or categorical measurements and the time at which the measurement was taken. Examples of metric events include memory pressure measured on a host, or vulnerabilities measured on a scanned host.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| event.id
| Unique ID to describe the event.
| keyword

(core)

// ===============================================================

| event.kind
| The kind of the event.
| keyword

(extended)

// ===============================================================

| event.category
| Event category.
| keyword

(core)

// ===============================================================

| event.action
| The action captured by the event.
| keyword

(core)

// ===============================================================

| event.outcome
| The outcome of the event.
| keyword

(extended)

// ===============================================================

| event.type
| Reserved for future usage.
| keyword

(core)

// ===============================================================

| event.module
| Name of the module this data is coming from.
| keyword

(core)

// ===============================================================

| event.dataset
| Name of the dataset.
| keyword

(core)

// ===============================================================

| event.severity
| Original severity of the event.
| long

(core)

// ===============================================================

| event.original
| Raw text message of entire event.
| keyword

(core)

// ===============================================================

| event.hash
| Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.
| keyword

(extended)

// ===============================================================

| event.duration
| Duration of the event in nanoseconds.
| long

(core)

// ===============================================================

| event.timezone
| Event time zone.
| keyword

(extended)

// ===============================================================

| event.created
| Time when the event was first read by an agent or by your pipeline.
| date

(core)

// ===============================================================

| event.start
| event.start contains the date when the event started or when the activity was first observed.
| date

(extended)

// ===============================================================

| event.end
| event.end contains the date when the event ended or when the activity was last observed.
| date

(extended)

// ===============================================================

| event.risk_score
| Risk score or priority of the event (e.g. security solutions). Use your system's original value here.
| float

(core)

// ===============================================================

| event.risk_score_norm
| Normalized risk score or priority of the event (0-100).
| float

(extended)

// ===============================================================

|=====

[[ecs-event-details]]
==== Field details

===== event.id

Level: core

Datatype: keyword

Unique ID to describe the event.

example: `8a4f500d`

===== event.kind

Level: extended

Datatype: keyword

The kind of the event.
This gives information about what type of information the event contains, without being specific to the contents of the event.  Examples are `event`, `state`, `alarm`. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.

example: `state`

===== event.category

Level: core

Datatype: keyword

Event category.
This contains high-level information about the contents of the event. It is more generic than `event.action`, in the sense that typically a category contains multiple actions. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.

example: `user-management`

===== event.action

Level: core

Datatype: keyword

The action captured by the event.
This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.

example: `user-password-change`

===== event.outcome

Level: extended

Datatype: keyword

The outcome of the event.
If the event describes an action, this fields contains the outcome of that action. Examples outcomes are `success` and `failure`. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.

example: `success`

===== event.type

Level: core

Datatype: keyword

Reserved for future usage.
Please avoid using this field for user data.



===== event.module

Level: core

Datatype: keyword

Name of the module this data is coming from.
This information is coming from the modules used in Beats or Logstash.

example: `mysql`

===== event.dataset

Level: core

Datatype: keyword

Name of the dataset.
The concept of a `dataset` (fileset / metricset) is used in Beats as a subset of modules. It contains the information which is currently stored in metricset.name and metricset.module or fileset.name.

example: `stats`

===== event.severity

Level: core

Datatype: long

Severity describes the original severity of the event. What the different severity values mean can very different between use cases. It's up to the implementer to make sure severities are consistent across events.

example: `7`

===== event.original

Level: core

Datatype: keyword

Raw text message of entire event. Used to demonstrate log integrity.
This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`.

example: `Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124; worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232`

===== event.hash

Level: extended

Datatype: keyword

Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.

example: `123456789012345678901234567890ABCD`

===== event.duration

Level: core

Datatype: long

Duration of the event in nanoseconds.
If event.start and event.end are known this value should be the difference between the end and start time.



===== event.timezone

Level: extended

Datatype: keyword

This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.
Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").



===== event.created

Level: core

Datatype: date

event.created contains the date/time when the event was first read by an agent, or by your pipeline.
This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.
In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
In case the two timestamps are identical, @timestamp should be used.



===== event.start

Level: extended

Datatype: date

event.start contains the date when the event started or when the activity was first observed.



===== event.end

Level: extended

Datatype: date

event.end contains the date when the event ended or when the activity was last observed.



===== event.risk_score

Level: core

Datatype: float

Risk score or priority of the event (e.g. security solutions). Use your system's original value here.



===== event.risk_score_norm

Level: extended

Datatype: float

Normalized risk score or priority of the event, on a scale of 0 to 100.
This is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.



[[ecs-file]]
=== File fields

A file is defined as a set of information that has been created on, or has existed on a filesystem.
File objects can be associated with host events, network events, and/or file events (e.g., those produced by File Integrity Monitoring [FIM] products or services). File fields provide details about the affected file associated with the event or metric.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| file.path
| Path to the file.
| keyword

(extended)

// ===============================================================

| file.target_path
| Target path for symlinks.
| keyword

(extended)

// ===============================================================

| file.extension
| File extension.
| keyword

(extended)

// ===============================================================

| file.type
| File type (file, dir, or symlink).
| keyword

(extended)

// ===============================================================

| file.device
| Device that is the source of the file.
| keyword

(extended)

// ===============================================================

| file.inode
| Inode representing the file in the filesystem.
| keyword

(extended)

// ===============================================================

| file.uid
| The user ID (UID) or security identifier (SID) of the file owner.
| keyword

(extended)

// ===============================================================

| file.owner
| File owner's username.
| keyword

(extended)

// ===============================================================

| file.gid
| Primary group ID (GID) of the file.
| keyword

(extended)

// ===============================================================

| file.group
| Primary group name of the file.
| keyword

(extended)

// ===============================================================

| file.mode
| Mode of the file in octal representation.
| keyword

(extended)

// ===============================================================

| file.size
| File size in bytes (field is only added when `type` is `file`).
| long

(extended)

// ===============================================================

| file.mtime
| Last time file content was modified.
| date

(extended)

// ===============================================================

| file.ctime
| Last time file metadata changed.
| date

(extended)

// ===============================================================

|=====

[[ecs-file-details]]
==== Field details

===== file.path

Level: extended

Datatype: keyword

Path to the file.



===== file.target_path

Level: extended

Datatype: keyword

Target path for symlinks.



===== file.extension

Level: extended

Datatype: keyword

File extension.
This should allow easy filtering by file extensions.

example: `png`

===== file.type

Level: extended

Datatype: keyword

File type (file, dir, or symlink).



===== file.device

Level: extended

Datatype: keyword

Device that is the source of the file.



===== file.inode

Level: extended

Datatype: keyword

Inode representing the file in the filesystem.



===== file.uid

Level: extended

Datatype: keyword

The user ID (UID) or security identifier (SID) of the file owner.



===== file.owner

Level: extended

Datatype: keyword

File owner's username.



===== file.gid

Level: extended

Datatype: keyword

Primary group ID (GID) of the file.



===== file.group

Level: extended

Datatype: keyword

Primary group name of the file.



===== file.mode

Level: extended

Datatype: keyword

Mode of the file in octal representation.

example: `416`

===== file.size

Level: extended

Datatype: long

File size in bytes (field is only added when `type` is `file`).



===== file.mtime

Level: extended

Datatype: date

Last time file content was modified.



===== file.ctime

Level: extended

Datatype: date

Last time file metadata changed.



[[ecs-geo]]
=== Geo fields

Geo fields can carry data about a specific location related to an event.
This geolocation information can be derived from techniques such as Geo IP, or be user-supplied.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| geo.location
| Longitude and latitude.
| geo_point

(core)

// ===============================================================

| geo.continent_name
| Name of the continent.
| keyword

(core)

// ===============================================================

| geo.country_name
| Country name.
| keyword

(core)

// ===============================================================

| geo.region_name
| Region name.
| keyword

(core)

// ===============================================================

| geo.city_name
| City name.
| keyword

(core)

// ===============================================================

| geo.country_iso_code
| Country ISO code.
| keyword

(core)

// ===============================================================

| geo.region_iso_code
| Region ISO code.
| keyword

(core)

// ===============================================================

| geo.name
| User-defined description of a location.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-geo-details]]
==== Field details

===== geo.location

Level: core

Datatype: geo_point

Longitude and latitude.

example: `{ "lon": -73.614830, "lat": 45.505918 }`

===== geo.continent_name

Level: core

Datatype: keyword

Name of the continent.

example: `North America`

===== geo.country_name

Level: core

Datatype: keyword

Country name.

example: `Canada`

===== geo.region_name

Level: core

Datatype: keyword

Region name.

example: `Quebec`

===== geo.city_name

Level: core

Datatype: keyword

City name.

example: `Montreal`

===== geo.country_iso_code

Level: core

Datatype: keyword

Country ISO code.

example: `CA`

===== geo.region_iso_code

Level: core

Datatype: keyword

Region ISO code.

example: `CA-QC`

===== geo.name

Level: extended

Datatype: keyword

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

example: `boston-dc`

[[ecs-group]]
=== Group fields

The group fields are meant to represent groups that are relevant to the event.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| group.id
| Unique identifier for the group on the system/platform.
| keyword

(extended)

// ===============================================================

| group.name
| Name of the group.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-group-details]]
==== Field details

===== group.id

Level: extended

Datatype: keyword

Unique identifier for the group on the system/platform.



===== group.name

Level: extended

Datatype: keyword

Name of the group.



[[ecs-host]]
=== Host fields

A host is defined as a general computing instance.
ECS host.* fields should be populated with details about the host on which the event happened, or from which the measurement was taken. Host types include hardware, virtual machines, Docker containers, and Kubernetes nodes.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| host.hostname
| Hostname of the host.
| keyword

(core)

// ===============================================================

| host.geo.location
| Longitude and latitude.
| geo_point

(core)

// ===============================================================

| host.user.id
| One or multiple unique identifiers of the user.
| keyword

(core)

// ===============================================================

| host.user.group.id
| Unique identifier for the group on the system/platform.
| keyword

(extended)

// ===============================================================

| host.os.platform
| Operating system platform (such centos, ubuntu, windows).
| keyword

(extended)

// ===============================================================

| host.name
| Name of the host.
| keyword

(core)

// ===============================================================

| host.user.group.name
| Name of the group.
| keyword

(extended)

// ===============================================================

| host.geo.continent_name
| Name of the continent.
| keyword

(core)

// ===============================================================

| host.os.name
| Operating system name, without the version.
| keyword

(extended)

// ===============================================================

| host.user.name
| Short name or login of the user.
| keyword

(core)

// ===============================================================

| host.id
| Unique host id.
| keyword

(core)

// ===============================================================

| host.geo.country_name
| Country name.
| keyword

(core)

// ===============================================================

| host.os.full
| Operating system name, including the version or code name.
| keyword

(extended)

// ===============================================================

| host.user.full_name
| User's full name, if available.
| keyword

(extended)

// ===============================================================

| host.ip
| Host ip address.
| ip

(core)

// ===============================================================

| host.user.email
| User email address.
| keyword

(extended)

// ===============================================================

| host.os.family
| OS family (such as redhat, debian, freebsd, windows).
| keyword

(extended)

// ===============================================================

| host.geo.region_name
| Region name.
| keyword

(core)

// ===============================================================

| host.mac
| Host mac address.
| keyword

(core)

// ===============================================================

| host.user.hash
| Unique user hash to correlate information for a user in anonymized form.
| keyword

(extended)

// ===============================================================

| host.geo.city_name
| City name.
| keyword

(core)

// ===============================================================

| host.os.version
| Operating system version as a raw string.
| keyword

(extended)

// ===============================================================

| host.type
| Type of host.
| keyword

(core)

// ===============================================================

| host.geo.country_iso_code
| Country ISO code.
| keyword

(core)

// ===============================================================

| host.os.kernel
| Operating system kernel version as a raw string.
| keyword

(extended)

// ===============================================================

| host.architecture
| Operating system architecture.
| keyword

(core)

// ===============================================================

| host.geo.region_iso_code
| Region ISO code.
| keyword

(core)

// ===============================================================

| host.geo.name
| User-defined description of a location.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-host-details]]
==== Field details

===== host.hostname

Level: core

Datatype: keyword

Hostname of the host.
It normally contains what the `hostname` command returns on the host machine.



===== host.geo.location

Level: core

Datatype: geo_point

Longitude and latitude.

example: `{ "lon": -73.614830, "lat": 45.505918 }`

===== host.user.id

Level: core

Datatype: keyword

One or multiple unique identifiers of the user.



===== host.user.group.id

Level: extended

Datatype: keyword

Unique identifier for the group on the system/platform.



===== host.os.platform

Level: extended

Datatype: keyword

Operating system platform (such centos, ubuntu, windows).

example: `darwin`

===== host.name

Level: core

Datatype: keyword

Name of the host.
It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.



===== host.user.group.name

Level: extended

Datatype: keyword

Name of the group.



===== host.geo.continent_name

Level: core

Datatype: keyword

Name of the continent.

example: `North America`

===== host.os.name

Level: extended

Datatype: keyword

Operating system name, without the version.

example: `Mac OS X`

===== host.user.name

Level: core

Datatype: keyword

Short name or login of the user.

example: `albert`

===== host.id

Level: core

Datatype: keyword

Unique host id.
As hostname is not always unique, use values that are meaningful in your environment.
Example: The current usage of `beat.name`.



===== host.geo.country_name

Level: core

Datatype: keyword

Country name.

example: `Canada`

===== host.os.full

Level: extended

Datatype: keyword

Operating system name, including the version or code name.

example: `Mac OS Mojave`

===== host.user.full_name

Level: extended

Datatype: keyword

User's full name, if available.

example: `Albert Einstein`

===== host.ip

Level: core

Datatype: ip

Host ip address.



===== host.user.email

Level: extended

Datatype: keyword

User email address.



===== host.os.family

Level: extended

Datatype: keyword

OS family (such as redhat, debian, freebsd, windows).

example: `debian`

===== host.geo.region_name

Level: core

Datatype: keyword

Region name.

example: `Quebec`

===== host.mac

Level: core

Datatype: keyword

Host mac address.



===== host.user.hash

Level: extended

Datatype: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.



===== host.geo.city_name

Level: core

Datatype: keyword

City name.

example: `Montreal`

===== host.os.version

Level: extended

Datatype: keyword

Operating system version as a raw string.

example: `10.14.1`

===== host.type

Level: core

Datatype: keyword

Type of host.
For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.



===== host.geo.country_iso_code

Level: core

Datatype: keyword

Country ISO code.

example: `CA`

===== host.os.kernel

Level: extended

Datatype: keyword

Operating system kernel version as a raw string.

example: `4.4.0-112-generic`

===== host.architecture

Level: core

Datatype: keyword

Operating system architecture.

example: `x86_64`

===== host.geo.region_iso_code

Level: core

Datatype: keyword

Region ISO code.

example: `CA-QC`

===== host.geo.name

Level: extended

Datatype: keyword

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

example: `boston-dc`

[[ecs-http]]
=== HTTP fields

Fields related to HTTP activity. Use the `url` field set to store the url of the request.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| http.request.method
| HTTP request method.
| keyword

(extended)

// ===============================================================

| http.request.body.content
| The full HTTP request body.
| keyword

(extended)

// ===============================================================

| http.request.referrer
| Referrer for this HTTP request.
| keyword

(extended)

// ===============================================================

| http.response.status_code
| HTTP response status code.
| long

(extended)

// ===============================================================

| http.response.body.content
| The full HTTP response body.
| keyword

(extended)

// ===============================================================

| http.version
| HTTP version.
| keyword

(extended)

// ===============================================================

| http.request.bytes
| Total size in bytes of the request (body and headers).
| long

(extended)

// ===============================================================

| http.request.body.bytes
| Size in bytes of the request body.
| long

(extended)

// ===============================================================

| http.response.bytes
| Total size in bytes of the response (body and headers).
| long

(extended)

// ===============================================================

| http.response.body.bytes
| Size in bytes of the response body.
| long

(extended)

// ===============================================================

|=====

[[ecs-http-details]]
==== Field details

===== http.request.method

Level: extended

Datatype: keyword

HTTP request method.
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

example: `get, post, put`

===== http.request.body.content

Level: extended

Datatype: keyword

The full HTTP request body.

example: `Hello world`

===== http.request.referrer

Level: extended

Datatype: keyword

Referrer for this HTTP request.

example: `https://blog.example.com/`

===== http.response.status_code

Level: extended

Datatype: long

HTTP response status code.

example: `404`

===== http.response.body.content

Level: extended

Datatype: keyword

The full HTTP response body.

example: `Hello world`

===== http.version

Level: extended

Datatype: keyword

HTTP version.

example: `1.1`

===== http.request.bytes

Level: extended

Datatype: long

Total size in bytes of the request (body and headers).

example: `1437`

===== http.request.body.bytes

Level: extended

Datatype: long

Size in bytes of the request body.

example: `887`

===== http.response.bytes

Level: extended

Datatype: long

Total size in bytes of the response (body and headers).

example: `1437`

===== http.response.body.bytes

Level: extended

Datatype: long

Size in bytes of the response body.

example: `887`

[[ecs-log]]
=== Log fields

Fields which are specific to log events.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| log.level
| Log level of the log event.
| keyword

(core)

// ===============================================================

| log.original
| Original log message with light interpretation only (encoding, newlines).
| keyword

(core)

// ===============================================================

|=====

[[ecs-log-details]]
==== Field details

===== log.level

Level: core

Datatype: keyword

Original log level of the log event.
Some examples are `warn`, `error`, `i`.

example: `err`

===== log.original

Level: core

Datatype: keyword

This is the original log message and contains the full log message before splitting it up in multiple parts.
In contrast to the `message` field which can contain an extracted part of the log message, this field contains the original, full log message. It can have already some modifications applied like encoding or new lines removed to clean up the log message.
This field is not indexed and doc_values are disabled so it can't be queried but the value can be retrieved from `_source`.

example: `Sep 19 08:26:10 localhost My log`

[[ecs-network]]
=== Network fields

The network is defined as the communication path over which a host or network event happens.
The network.* fields should be populated with details about the network activity associated with an event.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| network.name
| Name given by operators to sections of their network.
| keyword

(extended)

// ===============================================================

| network.type
| In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
| keyword

(core)

// ===============================================================

| network.iana_number
| IANA Protocol Number.
| keyword

(extended)

// ===============================================================

| network.transport
| Protocol Name corresponding to the field `iana_number`.
| keyword

(core)

// ===============================================================

| network.application
| Application level protocol name.
| keyword

(extended)

// ===============================================================

| network.protocol
| L7 Network protocol name.
| keyword

(core)

// ===============================================================

| network.direction
| Direction of the network traffic.
| keyword

(core)

// ===============================================================

| network.forwarded_ip
| Host IP address when the source IP address is the proxy.
| ip

(core)

// ===============================================================

| network.community_id
| A hash of source and destination IPs and ports.
| keyword

(extended)

// ===============================================================

| network.bytes
| Total bytes transferred in both directions.
| long

(core)

// ===============================================================

| network.packets
| Total packets transferred in both directions.
| long

(core)

// ===============================================================

|=====

[[ecs-network-details]]
==== Field details

===== network.name

Level: extended

Datatype: keyword

Name given by operators to sections of their network.

example: `Guest Wifi`

===== network.type

Level: core

Datatype: keyword

In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

example: `ipv4`

===== network.iana_number

Level: extended

Datatype: keyword

IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.

example: `6`

===== network.transport

Level: core

Datatype: keyword

Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

example: `tcp`

===== network.application

Level: extended

Datatype: keyword

A name given to an application level protocol. This can be arbitrarily assigned for things like microservices, but also apply to things like skype, icq, facebook, twitter. This would be used in situations where the vendor or service can be decoded such as from the source/dest IP owners, ports, or wire format.
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

example: `aim`

===== network.protocol

Level: core

Datatype: keyword

L7 Network protocol name. ex. http, lumberjack, transport protocol.
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

example: `http`

===== network.direction

Level: core

Datatype: keyword

Direction of the network traffic.
Recommended values are:
  * inbound
  * outbound
  * internal
  * external
  * unknown

When mapping events from a host-based monitoring context, populate this field from the host's point of view.
When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of your network perimeter.

example: `inbound`

===== network.forwarded_ip

Level: core

Datatype: ip

Host IP address when the source IP address is the proxy.

example: `192.1.1.2`

===== network.community_id

Level: extended

Datatype: keyword

A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.
Learn more at https://github.com/corelight/community-id-spec.

example: `1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=`

===== network.bytes

Level: core

Datatype: long

Total bytes transferred in both directions.
If `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.

example: `368`

===== network.packets

Level: core

Datatype: long

Total packets transferred in both directions.
If `source.packets` and `destination.packets` are known, `network.packets` is their sum.

example: `24`

[[ecs-observer]]
=== Observer fields

An observer is defined as a special network, security, or application device used to detect, observe, or create network, security, or application-related events and metrics.
This could be a custom hardware appliance or a server that has been configured to run special network, security, or application software. Examples include firewalls, intrusion detection/prevention systems, network monitoring sensors, web application firewalls, data loss prevention systems, and APM servers. The observer.* fields shall be populated with details of the system, if any, that detects, observes and/or creates a network, security, or application event or metric. Message queues and ETL components used in processing events or metrics are not considered observers in ECS.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| observer.mac
| MAC address of the observer
| keyword

(core)

// ===============================================================

| observer.geo.location
| Longitude and latitude.
| geo_point

(core)

// ===============================================================

| observer.os.platform
| Operating system platform (such centos, ubuntu, windows).
| keyword

(extended)

// ===============================================================

| observer.ip
| IP address of the observer.
| ip

(core)

// ===============================================================

| observer.geo.continent_name
| Name of the continent.
| keyword

(core)

// ===============================================================

| observer.os.name
| Operating system name, without the version.
| keyword

(extended)

// ===============================================================

| observer.hostname
| Hostname of the observer.
| keyword

(core)

// ===============================================================

| observer.geo.country_name
| Country name.
| keyword

(core)

// ===============================================================

| observer.os.full
| Operating system name, including the version or code name.
| keyword

(extended)

// ===============================================================

| observer.vendor
| observer vendor information.
| keyword

(core)

// ===============================================================

| observer.os.family
| OS family (such as redhat, debian, freebsd, windows).
| keyword

(extended)

// ===============================================================

| observer.geo.region_name
| Region name.
| keyword

(core)

// ===============================================================

| observer.version
| Observer version.
| keyword

(core)

// ===============================================================

| observer.geo.city_name
| City name.
| keyword

(core)

// ===============================================================

| observer.os.version
| Operating system version as a raw string.
| keyword

(extended)

// ===============================================================

| observer.serial_number
| Observer serial number.
| keyword

(extended)

// ===============================================================

| observer.geo.country_iso_code
| Country ISO code.
| keyword

(core)

// ===============================================================

| observer.os.kernel
| Operating system kernel version as a raw string.
| keyword

(extended)

// ===============================================================

| observer.type
| The type of the observer the data is coming from.
| keyword

(core)

// ===============================================================

| observer.geo.region_iso_code
| Region ISO code.
| keyword

(core)

// ===============================================================

| observer.geo.name
| User-defined description of a location.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-observer-details]]
==== Field details

===== observer.mac

Level: core

Datatype: keyword

MAC address of the observer



===== observer.geo.location

Level: core

Datatype: geo_point

Longitude and latitude.

example: `{ "lon": -73.614830, "lat": 45.505918 }`

===== observer.os.platform

Level: extended

Datatype: keyword

Operating system platform (such centos, ubuntu, windows).

example: `darwin`

===== observer.ip

Level: core

Datatype: ip

IP address of the observer.



===== observer.geo.continent_name

Level: core

Datatype: keyword

Name of the continent.

example: `North America`

===== observer.os.name

Level: extended

Datatype: keyword

Operating system name, without the version.

example: `Mac OS X`

===== observer.hostname

Level: core

Datatype: keyword

Hostname of the observer.



===== observer.geo.country_name

Level: core

Datatype: keyword

Country name.

example: `Canada`

===== observer.os.full

Level: extended

Datatype: keyword

Operating system name, including the version or code name.

example: `Mac OS Mojave`

===== observer.vendor

Level: core

Datatype: keyword

observer vendor information.



===== observer.os.family

Level: extended

Datatype: keyword

OS family (such as redhat, debian, freebsd, windows).

example: `debian`

===== observer.geo.region_name

Level: core

Datatype: keyword

Region name.

example: `Quebec`

===== observer.version

Level: core

Datatype: keyword

Observer version.



===== observer.geo.city_name

Level: core

Datatype: keyword

City name.

example: `Montreal`

===== observer.os.version

Level: extended

Datatype: keyword

Operating system version as a raw string.

example: `10.14.1`

===== observer.serial_number

Level: extended

Datatype: keyword

Observer serial number.



===== observer.geo.country_iso_code

Level: core

Datatype: keyword

Country ISO code.

example: `CA`

===== observer.os.kernel

Level: extended

Datatype: keyword

Operating system kernel version as a raw string.

example: `4.4.0-112-generic`

===== observer.type

Level: core

Datatype: keyword

The type of the observer the data is coming from.
There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.

example: `firewall`

===== observer.geo.region_iso_code

Level: core

Datatype: keyword

Region ISO code.

example: `CA-QC`

===== observer.geo.name

Level: extended

Datatype: keyword

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

example: `boston-dc`

[[ecs-organization]]
=== Organization fields

The organization fields enrich data with information about the company or entity the data is associated with.
These fields help you arrange or filter data stored in an index by one or multiple organizations.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| organization.name
| Organization name.
| keyword

(extended)

// ===============================================================

| organization.id
| Unique identifier for the organization.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-organization-details]]
==== Field details

===== organization.name

Level: extended

Datatype: keyword

Organization name.



===== organization.id

Level: extended

Datatype: keyword

Unique identifier for the organization.



[[ecs-os]]
=== Operating System fields

The OS fields contain information about the operating system.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| os.platform
| Operating system platform (such centos, ubuntu, windows).
| keyword

(extended)

// ===============================================================

| os.name
| Operating system name, without the version.
| keyword

(extended)

// ===============================================================

| os.full
| Operating system name, including the version or code name.
| keyword

(extended)

// ===============================================================

| os.family
| OS family (such as redhat, debian, freebsd, windows).
| keyword

(extended)

// ===============================================================

| os.version
| Operating system version as a raw string.
| keyword

(extended)

// ===============================================================

| os.kernel
| Operating system kernel version as a raw string.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-os-details]]
==== Field details

===== os.platform

Level: extended

Datatype: keyword

Operating system platform (such centos, ubuntu, windows).

example: `darwin`

===== os.name

Level: extended

Datatype: keyword

Operating system name, without the version.

example: `Mac OS X`

===== os.full

Level: extended

Datatype: keyword

Operating system name, including the version or code name.

example: `Mac OS Mojave`

===== os.family

Level: extended

Datatype: keyword

OS family (such as redhat, debian, freebsd, windows).

example: `debian`

===== os.version

Level: extended

Datatype: keyword

Operating system version as a raw string.

example: `10.14.1`

===== os.kernel

Level: extended

Datatype: keyword

Operating system kernel version as a raw string.

example: `4.4.0-112-generic`

[[ecs-process]]
=== Process fields

These fields contain information about a process.
These fields can help you correlate metrics information with a process id/name from a log message.  The `process.pid` often stays in the metric itself and is copied to the global field for correlation.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| process.pid
| Process id.
| long

(core)

// ===============================================================

| process.name
| Process name.
| keyword

(extended)

// ===============================================================

| process.ppid
| Process parent id.
| long

(extended)

// ===============================================================

| process.args
| Array of process arguments.
| keyword

(extended)

// ===============================================================

| process.executable
| Absolute path to the process executable.
| keyword

(extended)

// ===============================================================

| process.title
| Process title.
| keyword

(extended)

// ===============================================================

| process.thread.id
| Thread ID.
| long

(extended)

// ===============================================================

| process.start
| The time the process started.
| date

(extended)

// ===============================================================

| process.working_directory
| The working directory of the process.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-process-details]]
==== Field details

===== process.pid

Level: core

Datatype: long

Process id.



===== process.name

Level: extended

Datatype: keyword

Process name.
Sometimes called program name or similar.

example: `ssh`

===== process.ppid

Level: extended

Datatype: long

Process parent id.



===== process.args

Level: extended

Datatype: keyword

Array of process arguments.
May be filtered to protect sensitive information.

example: `['ssh', '-l', 'user', '10.0.0.16']`

===== process.executable

Level: extended

Datatype: keyword

Absolute path to the process executable.

example: `/usr/bin/ssh`

===== process.title

Level: extended

Datatype: keyword

Process title.
The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.



===== process.thread.id

Level: extended

Datatype: long

Thread ID.

example: `4242`

===== process.start

Level: extended

Datatype: date

The time the process started.

example: `2016-05-23T08:05:34.853Z`

===== process.working_directory

Level: extended

Datatype: keyword

The working directory of the process.

example: `/home/alice`

[[ecs-related]]
=== Related fields

This field set is meant to facilitate pivoting around a piece of data.
Some pieces of information can be seen in many places in an ECS event. To facilitate searching for them, store an array of all seen values to their corresponding field in `related.`.
A concrete example is IP addresses, which can be under host, observer, source, destination, client, server, and network.forwarded_ip. If you append all IPs to `related.ip`, you can then search for a given IP trivially, no matter where it appeared, by querying `related.ip:a.b.c.d`.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| related.ip
| All of the IPs seen on your event.
| ip

(extended)

// ===============================================================

|=====

[[ecs-related-details]]
==== Field details

===== related.ip

Level: extended

Datatype: ip

All of the IPs seen on your event.



[[ecs-server]]
=== Server fields

A Server is defined as the responder in a network connection for events regarding sessions, connections, or bidirectional flow records.
For TCP events, the server is the receiver of the initial SYN packet(s) of the TCP connection. For other protocols, the server is generally the responder in the network transaction. Some systems actually use the term "responder" to refer the server in TCP connections. The server fields describe details about the system acting as the server in the network event. Server fields are usually populated in conjunction with client fields. Server fields are generally not populated for packet-level events.
Client / server representations can add semantic context to an exchange, which is helpful to visualize the data in certain situations. If your context falls in that category, you should still ensure that source and destination are filled appropriately.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| server.address
| Server network address.
| keyword

(extended)

// ===============================================================

| server.geo.location
| Longitude and latitude.
| geo_point

(core)

// ===============================================================

| server.user.id
| One or multiple unique identifiers of the user.
| keyword

(core)

// ===============================================================

| server.user.group.id
| Unique identifier for the group on the system/platform.
| keyword

(extended)

// ===============================================================

| server.ip
| IP address of the server.
| ip

(core)

// ===============================================================

| server.user.group.name
| Name of the group.
| keyword

(extended)

// ===============================================================

| server.geo.continent_name
| Name of the continent.
| keyword

(core)

// ===============================================================

| server.user.name
| Short name or login of the user.
| keyword

(core)

// ===============================================================

| server.port
| Port of the server.
| long

(core)

// ===============================================================

| server.geo.country_name
| Country name.
| keyword

(core)

// ===============================================================

| server.user.full_name
| User's full name, if available.
| keyword

(extended)

// ===============================================================

| server.mac
| MAC address of the server.
| keyword

(core)

// ===============================================================

| server.user.email
| User email address.
| keyword

(extended)

// ===============================================================

| server.geo.region_name
| Region name.
| keyword

(core)

// ===============================================================

| server.domain
| Server domain.
| keyword

(core)

// ===============================================================

| server.user.hash
| Unique user hash to correlate information for a user in anonymized form.
| keyword

(extended)

// ===============================================================

| server.geo.city_name
| City name.
| keyword

(core)

// ===============================================================

| server.bytes
| Bytes sent from the server to the client.
| long

(core)

// ===============================================================

| server.geo.country_iso_code
| Country ISO code.
| keyword

(core)

// ===============================================================

| server.packets
| Packets sent from the server to the client.
| long

(core)

// ===============================================================

| server.geo.region_iso_code
| Region ISO code.
| keyword

(core)

// ===============================================================

| server.geo.name
| User-defined description of a location.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-server-details]]
==== Field details

===== server.address

Level: extended

Datatype: keyword

Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.



===== server.geo.location

Level: core

Datatype: geo_point

Longitude and latitude.

example: `{ "lon": -73.614830, "lat": 45.505918 }`

===== server.user.id

Level: core

Datatype: keyword

One or multiple unique identifiers of the user.



===== server.user.group.id

Level: extended

Datatype: keyword

Unique identifier for the group on the system/platform.



===== server.ip

Level: core

Datatype: ip

IP address of the server.
Can be one or multiple IPv4 or IPv6 addresses.



===== server.user.group.name

Level: extended

Datatype: keyword

Name of the group.



===== server.geo.continent_name

Level: core

Datatype: keyword

Name of the continent.

example: `North America`

===== server.user.name

Level: core

Datatype: keyword

Short name or login of the user.

example: `albert`

===== server.port

Level: core

Datatype: long

Port of the server.



===== server.geo.country_name

Level: core

Datatype: keyword

Country name.

example: `Canada`

===== server.user.full_name

Level: extended

Datatype: keyword

User's full name, if available.

example: `Albert Einstein`

===== server.mac

Level: core

Datatype: keyword

MAC address of the server.



===== server.user.email

Level: extended

Datatype: keyword

User email address.



===== server.geo.region_name

Level: core

Datatype: keyword

Region name.

example: `Quebec`

===== server.domain

Level: core

Datatype: keyword

Server domain.



===== server.user.hash

Level: extended

Datatype: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.



===== server.geo.city_name

Level: core

Datatype: keyword

City name.

example: `Montreal`

===== server.bytes

Level: core

Datatype: long

Bytes sent from the server to the client.

example: `184`

===== server.geo.country_iso_code

Level: core

Datatype: keyword

Country ISO code.

example: `CA`

===== server.packets

Level: core

Datatype: long

Packets sent from the server to the client.

example: `12`

===== server.geo.region_iso_code

Level: core

Datatype: keyword

Region ISO code.

example: `CA-QC`

===== server.geo.name

Level: extended

Datatype: keyword

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

example: `boston-dc`

[[ecs-service]]
=== Service fields

The service fields describe the service for or from which the data was collected.
These fields help you find and correlate logs for a specific service and version.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| service.id
| Unique identifier of the running service.
| keyword

(core)

// ===============================================================

| service.name
| Name of the service.
| keyword

(core)

// ===============================================================

| service.type
| The type of the service.
| keyword

(core)

// ===============================================================

| service.state
| Current state of the service.
| keyword

(core)

// ===============================================================

| service.version
| Version of the service.
| keyword

(core)

// ===============================================================

| service.ephemeral_id
| Ephemeral identifier of this service.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-service-details]]
==== Field details

===== service.id

Level: core

Datatype: keyword

Unique identifier of the running service.
This id should uniquely identify this service. This makes it possible to correlate logs and metrics for one specific service.
Example: If you are experiencing issues with one redis instance, you can filter on that id to see metrics and logs for that single instance.

example: `d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6`

===== service.name

Level: core

Datatype: keyword

Name of the service data is collected from.
The name of the service is normally user given. This allows if two instances of the same service are running on the same machine they can be differentiated by the `service.name`.
Also it allows for distributed services that run on multiple hosts to correlate the related instances based on the name.
In the case of Elasticsearch the service.name could contain the cluster name. For Beats the service.name is by default a copy of the `service.type` field if no name is specified.

example: `elasticsearch-metrics`

===== service.type

Level: core

Datatype: keyword

The type of the service data is collected from.
The type can be used to group and correlate logs and metrics from one service type.
Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.

example: `elasticsearch`

===== service.state

Level: core

Datatype: keyword

Current state of the service.



===== service.version

Level: core

Datatype: keyword

Version of the service the data was collected from.
This allows to look at a data set only for a specific version of a service.

example: `3.2.4`

===== service.ephemeral_id

Level: extended

Datatype: keyword

Ephemeral identifier of this service (if one exists).
This id normally changes across restarts, but `service.id` does not.

example: `8a4f500f`

[[ecs-source]]
=== Source fields

Source fields describe details about the source of a packet/event.
Source fields are usually populated in conjunction with destination fields.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| source.address
| Source network address.
| keyword

(extended)

// ===============================================================

| source.geo.location
| Longitude and latitude.
| geo_point

(core)

// ===============================================================

| source.user.id
| One or multiple unique identifiers of the user.
| keyword

(core)

// ===============================================================

| source.user.group.id
| Unique identifier for the group on the system/platform.
| keyword

(extended)

// ===============================================================

| source.ip
| IP address of the source.
| ip

(core)

// ===============================================================

| source.user.group.name
| Name of the group.
| keyword

(extended)

// ===============================================================

| source.geo.continent_name
| Name of the continent.
| keyword

(core)

// ===============================================================

| source.user.name
| Short name or login of the user.
| keyword

(core)

// ===============================================================

| source.port
| Port of the source.
| long

(core)

// ===============================================================

| source.geo.country_name
| Country name.
| keyword

(core)

// ===============================================================

| source.user.full_name
| User's full name, if available.
| keyword

(extended)

// ===============================================================

| source.mac
| MAC address of the source.
| keyword

(core)

// ===============================================================

| source.user.email
| User email address.
| keyword

(extended)

// ===============================================================

| source.geo.region_name
| Region name.
| keyword

(core)

// ===============================================================

| source.domain
| Source domain.
| keyword

(core)

// ===============================================================

| source.user.hash
| Unique user hash to correlate information for a user in anonymized form.
| keyword

(extended)

// ===============================================================

| source.geo.city_name
| City name.
| keyword

(core)

// ===============================================================

| source.bytes
| Bytes sent from the source to the destination.
| long

(core)

// ===============================================================

| source.geo.country_iso_code
| Country ISO code.
| keyword

(core)

// ===============================================================

| source.packets
| Packets sent from the source to the destination.
| long

(core)

// ===============================================================

| source.geo.region_iso_code
| Region ISO code.
| keyword

(core)

// ===============================================================

| source.geo.name
| User-defined description of a location.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-source-details]]
==== Field details

===== source.address

Level: extended

Datatype: keyword

Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.



===== source.geo.location

Level: core

Datatype: geo_point

Longitude and latitude.

example: `{ "lon": -73.614830, "lat": 45.505918 }`

===== source.user.id

Level: core

Datatype: keyword

One or multiple unique identifiers of the user.



===== source.user.group.id

Level: extended

Datatype: keyword

Unique identifier for the group on the system/platform.



===== source.ip

Level: core

Datatype: ip

IP address of the source.
Can be one or multiple IPv4 or IPv6 addresses.



===== source.user.group.name

Level: extended

Datatype: keyword

Name of the group.



===== source.geo.continent_name

Level: core

Datatype: keyword

Name of the continent.

example: `North America`

===== source.user.name

Level: core

Datatype: keyword

Short name or login of the user.

example: `albert`

===== source.port

Level: core

Datatype: long

Port of the source.



===== source.geo.country_name

Level: core

Datatype: keyword

Country name.

example: `Canada`

===== source.user.full_name

Level: extended

Datatype: keyword

User's full name, if available.

example: `Albert Einstein`

===== source.mac

Level: core

Datatype: keyword

MAC address of the source.



===== source.user.email

Level: extended

Datatype: keyword

User email address.



===== source.geo.region_name

Level: core

Datatype: keyword

Region name.

example: `Quebec`

===== source.domain

Level: core

Datatype: keyword

Source domain.



===== source.user.hash

Level: extended

Datatype: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.



===== source.geo.city_name

Level: core

Datatype: keyword

City name.

example: `Montreal`

===== source.bytes

Level: core

Datatype: long

Bytes sent from the source to the destination.

example: `184`

===== source.geo.country_iso_code

Level: core

Datatype: keyword

Country ISO code.

example: `CA`

===== source.packets

Level: core

Datatype: long

Packets sent from the source to the destination.

example: `12`

===== source.geo.region_iso_code

Level: core

Datatype: keyword

Region ISO code.

example: `CA-QC`

===== source.geo.name

Level: extended

Datatype: keyword

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

example: `boston-dc`

[[ecs-url]]
=== URL fields

URL fields provide support for complete or partial URLs, and supports the breaking down into scheme, domain, path, and so on.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| url.original
| Unmodified original url as seen in the event source.
| keyword

(extended)

// ===============================================================

| url.full
| Full unparsed URL.
| keyword

(extended)

// ===============================================================

| url.scheme
| Scheme of the url.
| keyword

(extended)

// ===============================================================

| url.domain
| Domain of the url.
| keyword

(extended)

// ===============================================================

| url.port
| Port of the request, such as 443.
| long

(extended)

// ===============================================================

| url.path
| Path of the request, such as "/search".
| keyword

(extended)

// ===============================================================

| url.query
| Query string of the request.
| keyword

(extended)

// ===============================================================

| url.fragment
| Portion of the url after the `#`.
| keyword

(extended)

// ===============================================================

| url.username
| Username of the request.
| keyword

(extended)

// ===============================================================

| url.password
| Password of the request.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-url-details]]
==== Field details

===== url.original

Level: extended

Datatype: keyword

Unmodified original url as seen in the event source.
Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
This field is meant to represent the URL as it was observed, complete or not.

example: `https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch`

===== url.full

Level: extended

Datatype: keyword

If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.

example: `https://www.elastic.co:443/search?q=elasticsearch#top`

===== url.scheme

Level: extended

Datatype: keyword

Scheme of the request, such as "https".
Note: The `:` is not part of the scheme.

example: `https`

===== url.domain

Level: extended

Datatype: keyword

Domain of the url, such as "www.elastic.co".
In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.

example: `www.elastic.co`

===== url.port

Level: extended

Datatype: long

Port of the request, such as 443.

example: `443`

===== url.path

Level: extended

Datatype: keyword

Path of the request, such as "/search".



===== url.query

Level: extended

Datatype: keyword

The query field describes the query string of the request, such as "q=elasticsearch".
The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.



===== url.fragment

Level: extended

Datatype: keyword

Portion of the url after the `#`, such as "top".
The `#` is not part of the fragment.



===== url.username

Level: extended

Datatype: keyword

Username of the request.



===== url.password

Level: extended

Datatype: keyword

Password of the request.



[[ecs-user]]
=== User fields

The user fields describe information about the user that is relevant to the event.
Fields can have one entry or multiple entries. If a user has more than one id, provide an array that includes all of them.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| user.id
| One or multiple unique identifiers of the user.
| keyword

(core)

// ===============================================================

| user.group.id
| Unique identifier for the group on the system/platform.
| keyword

(extended)

// ===============================================================

| user.group.name
| Name of the group.
| keyword

(extended)

// ===============================================================

| user.name
| Short name or login of the user.
| keyword

(core)

// ===============================================================

| user.full_name
| User's full name, if available.
| keyword

(extended)

// ===============================================================

| user.email
| User email address.
| keyword

(extended)

// ===============================================================

| user.hash
| Unique user hash to correlate information for a user in anonymized form.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-user-details]]
==== Field details

===== user.id

Level: core

Datatype: keyword

One or multiple unique identifiers of the user.



===== user.group.id

Level: extended

Datatype: keyword

Unique identifier for the group on the system/platform.



===== user.group.name

Level: extended

Datatype: keyword

Name of the group.



===== user.name

Level: core

Datatype: keyword

Short name or login of the user.

example: `albert`

===== user.full_name

Level: extended

Datatype: keyword

User's full name, if available.

example: `Albert Einstein`

===== user.email

Level: extended

Datatype: keyword

User email address.



===== user.hash

Level: extended

Datatype: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.



[[ecs-user_agent]]
=== User agent fields

The user_agent fields normally come from a browser request.
They often show up in web service logs coming from the parsed user agent string.

==== Fields summary

[options="header"]
|=====
| Field  | Description | Type (Level)

// ===============================================================

| user_agent.original
| Unparsed version of the user_agent.
| keyword

(extended)

// ===============================================================

| user_agent.os.platform
| Operating system platform (such centos, ubuntu, windows).
| keyword

(extended)

// ===============================================================

| user_agent.name
| Name of the user agent.
| keyword

(extended)

// ===============================================================

| user_agent.os.name
| Operating system name, without the version.
| keyword

(extended)

// ===============================================================

| user_agent.version
| Version of the user agent.
| keyword

(extended)

// ===============================================================

| user_agent.os.full
| Operating system name, including the version or code name.
| keyword

(extended)

// ===============================================================

| user_agent.device.name
| Name of the device.
| keyword

(extended)

// ===============================================================

| user_agent.os.family
| OS family (such as redhat, debian, freebsd, windows).
| keyword

(extended)

// ===============================================================

| user_agent.os.version
| Operating system version as a raw string.
| keyword

(extended)

// ===============================================================

| user_agent.os.kernel
| Operating system kernel version as a raw string.
| keyword

(extended)

// ===============================================================

|=====

[[ecs-user_agent-details]]
==== Field details

===== user_agent.original

Level: extended

Datatype: keyword

Unparsed version of the user_agent.

example: `Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1`

===== user_agent.os.platform

Level: extended

Datatype: keyword

Operating system platform (such centos, ubuntu, windows).

example: `darwin`

===== user_agent.name

Level: extended

Datatype: keyword

Name of the user agent.

example: `Safari`

===== user_agent.os.name

Level: extended

Datatype: keyword

Operating system name, without the version.

example: `Mac OS X`

===== user_agent.version

Level: extended

Datatype: keyword

Version of the user agent.

example: `12.0`

===== user_agent.os.full

Level: extended

Datatype: keyword

Operating system name, including the version or code name.

example: `Mac OS Mojave`

===== user_agent.device.name

Level: extended

Datatype: keyword

Name of the device.

example: `iPhone`

===== user_agent.os.family

Level: extended

Datatype: keyword

OS family (such as redhat, debian, freebsd, windows).

example: `debian`

===== user_agent.os.version

Level: extended

Datatype: keyword

Operating system version as a raw string.

example: `10.14.1`

===== user_agent.os.kernel

Level: extended

Datatype: keyword

Operating system kernel version as a raw string.

example: `4.4.0-112-generic`
