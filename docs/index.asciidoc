= Elastic Common Schema (ECS) Reference
:doctype: book
:ecs: ECS

include::{asciidoc-dir}/../../shared/versions.asciidoc[]
include::{asciidoc-dir}/../../shared/attributes.asciidoc[]

[[ecs-reference]]
== Overview

[float]
=== What is ECS?

The Elastic Common Schema (ECS) defines a common set of fields,
their datatype, and gives guidance on their correct usage.
ECS is used to improve uniformity of event data ingested into Elasticsearch.

Following ECS ensures your monitoring events follow a predictable schema, at all levels:

- *Event source*: whether the source of your event is an Elastic product,
  a third party product, or custom events generated by your application.
- *Event pipeline*: in any kind of event pipeline, such as
  Beats processors, Logstash or Elasticsearch ingest node.
- *Consumption*: API consumers, Kibana applications and Kibana dashboards are
  all simpler to build, maintain or share, when they are based on ECS.

Following ECS reduces dependencies between unrelated parts of your event pipeline.

The ultimate goal of ECS is to help you correlate data from various sources
like logs, metrics, IT operations analytics, and security analytics together.

[float]
=== My events don't map with ECS

ECS is a permissive schema. If your events have additional data that cannot be
mapped to ECS, you can simply add them to your events, using non-ECS field names.


[float]
=== Maturity

With ECS turning 1.0, the team will release improvements to the schema by following
https://semver.org/[Semantic Versioning].
Generally major ECS releases are planned to be aligned with major Elastic Stack releases.

Any feedback on the general structure, missing fields, or existing fields is appreciated.
For contributions please read the
https://github.com/elastic/ecs/blob/master/CONTRIBUTING.md[Contribution
Guidelines].

[float]
=== Types of fields

* *Core fields.* Fields that are most common across all use cases.
Focus on populating these fields first.

* *Extended fields.* Any fields that are not a core field.
Extended fields may apply to more narrow use cases, or may be more open
to interpretation depending on the use case. Extended fields are more likely to
change over time.



include::fields.asciidoc[]
include::conventions.asciidoc[]
include::guidelines.asciidoc[]
include::convert.asciidoc[]
// include::use-cases.asciidoc[]
include::faq.asciidoc[]
include::contributing.asciidoc[]
include::glossary.asciidoc[]
