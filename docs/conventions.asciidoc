//[[ecs-conventions]]
== {ecs} Conventions

{ecs} is most effective when you understand and follow conventions.

[float]
=== Multi-fields text indexing

Elasticsearch can index text using:

* *Text.* Text indexing allows for full text search, or searching arbitrary words that
  are part of the field. 
  See https://www.elastic.co/guide/en/elasticsearch/reference/current/text.html[Text datatype]
  in the {es} Reference Guide.
* *Keywords.* Keyword indexing offers faster exact match filtering and prefix search,
  and makes aggregations (for Kibana visualizations) possible.
  See the {es} Reference Guide for more information on 
  https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html[exact match filtering],
  https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html[prefix search], or 
  https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html[aggregations].


[float]
==== Default Elasticsearch convention
  
Unless your index mapping or index template specifies otherwise
(as the ECS index template does),
Elasticsearch indexes text field as `text` at the canonical field name,
and indexes a second time as `keyword`, nested in a multi-field.

Default Elasticsearch convention:

* Canonical field: `myfield` is `text`
* Multi-field: `myfield.keyword` is `keyword`

[float]
==== ECS multi-field convention for text

For monitoring use cases, `keyword` indexing is needed almost exclusively, with
full text search on very few fields. Given this premise, ECS defaults
all text indexing to `keyword` at the top level (with very few exceptions).
Any use case that requires full text search indexing on additional fields
https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-fields.html[multi-field].
for full text search. Doing so does not conflict with ECS,
as the canonical field name will remain `keyword` indexed.

ECS multi-field convention for text:

* Canonical field: `myfield` is `keyword`
* Multi-field: `myfield.text` is `text`

[float]
==== Exceptions

The only exceptions to this convention are fields `message` and `error.message`,
which are indexed for full text search only, with no multi-field.
These two fields don't follow the new convention because they are deemed too big
of a breaking change with these two widely used fields in Beats.

Any future field that will be indexed for full text search in ECS will however
follow the multi-field convention where `text` indexing is nested in the multi-field.

[float]
=== IDs and most codes are keywords, not integers

Despite the fact that IDs and codes (e.g. error codes) are often integers,
this is not always the case.
Since we want to make it possible to map as many systems and data sources
to ECS as possible, we default to using the `keyword` type for IDs and codes.

Some specific kinds of codes are always integers, like HTTP status codes.
If those have a specific corresponding specific field (as HTTP status does),
its type can safely be an integer type.
But generic field like `error.code` cannot have this guarantee, and are therefore `keyword`.


