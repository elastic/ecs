// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by scripts/gocodegen.go - DO NOT EDIT.

package ecs

import (
	"time"
)

// The email fields are used to store information extracted from email messages
// and headers.
type Email struct {
	// The field can be used to store the account used to manage the email
	// service provider.
	EspAccount string `ecs:"esp_account"`

	// The email service providers tracking id used to track the email through
	// different log types.
	TrackingID string `ecs:"tracking_id"`

	// The action taken when the email service provider received the email.
	Action string `ecs:"action"`

	// The TLS cipher used if the email was received using TLS.
	TlsCipher string `ecs:"tls_cipher"`

	// The time the email was received.
	Received time.Time `ecs:"received"`

	// The date and time delivery was attempted.
	DeliveryTime time.Time `ecs:"delivery_time"`

	// If the email was delivered successfully or not.
	Delivered bool `ecs:"delivered"`

	// The direction the email was sent.
	// Outbound: The email was sent from an internal to external address.
	// Inbound: The email was sent from an external to internal address.
	// Internal: The email was sent between internal users.
	Direction string `ecs:"direction"`

	// The email service provider may give an email id so it's possible to
	// identify the email message.
	ID string `ecs:"id"`

	// The total size of the email in bytes.
	Size int64 `ecs:"size"`

	// The email address of the user who received the email.
	Recipient string `ecs:"recipient"`

	// The highest registered domain taken from the recipient address, stripped
	// of the subdomain.
	// For example, the registered domain for "foo.google.com" is "google.com".
	// This value can be determined precisely with a list like the public
	// suffix list (http://publicsuffix.org). Trying to approximate this by
	// simply taking the last two labels will not work well for TLDs such as
	// "co.uk".
	RecipientRegisteredDomain string `ecs:"recipient_registered_domain"`

	// The reason that the click was blocked by the email service provider.
	Blocked string `ecs:"blocked"`

	// The receipt acknowledgment message received by email service provider
	// from the receiving mail server.
	ReceiptAck string `ecs:"receipt_ack"`

	// The email address of the person who sent the email. The address is taken
	// from the "From" field in the email header.
	From string `ecs:"from"`

	// The highest registered domain taken from the "From" address, stripped of
	// the subdomain.
	// For example, the registered domain for "foo.google.com" is "google.com".
	// This value can be determined precisely with a list like the public
	// suffix list (http://publicsuffix.org). Trying to approximate this by
	// simply taking the last two labels will not work well for TLDs such as
	// "co.uk".
	FromRegisteredDomain string `ecs:"from_registered_domain"`

	// The reason the email was held for review (quarantined), if applicable.
	Quarantined string `ecs:"quarantined"`

	// The sender address found in the MAIL_FROM field in the email header.
	// This address can be different to the FROM address if the email is
	// spoofed.
	MailFrom string `ecs:"mail_from"`

	// The highest registered domain taken from the "MAIL FROM" address,
	// stripped of the subdomain.
	// For example, the registered domain for "foo.google.com" is "google.com".
	// This value can be determined precisely with a list like the public
	// suffix list (http://publicsuffix.org). Trying to approximate this by
	// simply taking the last two labels will not work well for TLDs such as
	// "co.uk".
	MailFromRegisteredDomain string `ecs:"mail_from_registered_domain"`

	// The rejection code issued if the email was rejected at the receipt
	// stage.
	RejectCode string `ecs:"reject_code"`

	// The rejection information if the email was rejected at the receipt
	// stage.
	RejectInfo string `ecs:"reject_info"`

	// The rejection type if the email was rejected at the receipt stage.
	RejectType string `ecs:"reject_type"`

	// Information from email service provuider for messages found to be Spam.
	SpamInfo string `ecs:"spam_info"`

	// The email service providers Spam limit defined for the given sender and
	// recipient.
	SpamLimit string `ecs:"spam_limit"`

	// The email service providers Spam score the email was given.
	SpamScore string `ecs:"spam_score"`

	// The time in milliseconds that the delivery attempt took.
	Latency int32 `ecs:"latency"`

	// The count of the attempts that it took the email service provider to
	// deliver the email.
	Attempts int32 `ecs:"attempts"`

	// The filenames of all attachments on the email.
	AttachmentNames int32 `ecs:"attachment_names"`

	// The total size of attachments delivered in bytes.
	AttachmentsSize int32 `ecs:"attachments_size"`

	// The total number of attachments delivered.
	AttachmentCount int32 `ecs:"attachment_count"`

	// The subject of the email.
	Subject string `ecs:"subject"`

	// The TLS version used if the email was received using TLS.
	TlsVersion string `ecs:"tls_version"`

	// Set to true if TLS is enabled.
	TlsEnabled bool `ecs:"tls_enabled"`

	// The email service provider delivery route used.
	Route string `ecs:"route"`

	// The path of the log on the email service providers platform.
	LogPath string `ecs:"log_path"`

	// The email service provider's category of the URL that was clicked.
	UrlCategory string `ecs:"url_category"`

	// The amount of data in bytes that were delivered.
	SentBytes int64 `ecs:"sent_bytes"`

	// Any malware the email service provider detected while scanning the
	// email.
	Malware string `ecs:"malware"`

	// Set to true if email spoofing was detected.
	// Setting the spoofed flag to true will also users to quickly find spoofed
	// emails in Elasticsearch.
	Spoofed string `ecs:"spoofed"`

	// The email address and name in the reply_to field in the header.
	// When the person who receives the email clicks reply, the email should be
	// sent to the name and address in the reply_to field.
	ReplyTo string `ecs:"reply_to"`

	// The highest registered domain taken from the "reply_to" address,
	// stripped of the subdomain.
	// For example, the registered domain for "foo.google.com" is "google.com".
	// This value can be determined precisely with a list like the public
	// suffix list (http://publicsuffix.org). Trying to approximate this by
	// simply taking the last two labels will not work well for TLDs such as
	// "co.uk".
	ReplyToRegisteredDomain string `ecs:"reply_to_registered_domain"`

	// The email address in the return path field.
	// When an email doesn't make it to its intended destination, the return
	// path indicates where non-delivery receipts or bounce messages are to be
	// sent.
	ReturnPath string `ecs:"return_path"`

	// The sender policy framework (SPF) error taken from the email header.
	// The email service provider may check the MX domains SPF record to check
	// it is authorised to send the email.
	// The - infront of all in the spf record means senders not listed will be
	// created as a hard fail. A hard fail will prevent the sender from sending
	// the email. v=spf1 ip4:192.168.0.1 -all
	// The ~ infront of all in the spf record means senders not listed will be
	// created as a soft fail. A soft fail may allow the sender to send the
	// email, but the soft fail spf error in the header will be flagged as
	// suspicious by anti-Spam filters. v=spf1
	// include:spf.protection.outlook.com ~all
	SpfError string `ecs:"spf_error"`
}
