// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by scripts/gocodegen.go - DO NOT EDIT.

package ecs

import (
	"time"
)

// The vulnerability fields describe information about a vulnerabilty that is
// relevant to an event.
// Fields can have one entry or multiple entries.
type Vulnerability struct {
	// The Common Vulnerability Scoring System (CVSS) is an open framework for
	// communicating the characteristics and severity of software
	// vulnerabilities. Scores can range from 0.0 to 10.0, with 10.0 being the
	// most severe.
	// Base scores cover an assessment for exploitability metrics (attack
	// vector, complexity, privileges, and user interaction), impact metrics
	// (confidentialy, integrity, and availability), and scope. For example
	// (ex. https://www.first.org/cvss/specification-document)
	CvssScoreBase int64 `ecs:"cvss.score.base"`

	// The Common Vulnerability Scoring System (CVSS) is an open framework for
	// communicating the characteristics and severity of software
	// vulnerabilities. Scores can range from 0.0 to 10.0, with 10.0 being the
	// most severe.
	// Temporal scores cover an assessment for code maturity, remediation
	// level, and confidence. For example (ex.
	// https://www.first.org/cvss/specification-document)
	CvssScoreTemporal int64 `ecs:"cvss.score.temporal"`

	// The Common Vulnerability Scoring System (CVSS) is an open framework for
	// communicating the characteristics and severity of software
	// vulnerabilities. Scores can range from 0.0 to 10.0, with 10.0 being the
	// most severe.
	// Environmental scores cover an assessment for any modified Base metrics,
	// confidentiality, integrity, and availability requirements. For example
	// (ex. https://www.first.org/cvss/specification-document)
	CvssScoreEvironmental int64 `ecs:"cvss.score.evironmental"`

	// The type of system or architecture that the vulnerability affects. These
	// may be platform-specific (for example, Debian or SUSE) or general (for
	// example, Database or Firewall). For example (ex.
	// https://qualysguard.qualys.com/qwebhelp/fo_portal/knowledgebase/vulnerability_categories.htm)
	Category string `ecs:"category"`

	// The Common Vulnerability and Exposures (CVE) list is an open source list
	// for publicly known cybersecurity vulnerabilities providing an
	// identification number, a description, and at least one public reference.
	// The description of the vulnerability that provides additional context of
	// the vulnerability. For example (ex.
	// https://cve.mitre.org/about/faqs.html#cve_entry_descriptions_created)
	CveDescription string `ecs:"cve.description"`

	// The Common Vulnerability and Exposures (CVE) list is an open source list
	// for publicly known cybersecurity vulnerabilities providing an
	// identification number, a description, and at least one public reference.
	// The identification (ID) is the number portion of a CVE Entry. It
	// includes the year the vulnerability ID was requested followed by a
	// sequence number. CVE-YYYY-NNNNN. For example (ex.
	// https://cve.mitre.org/about/faqs.html#what_is_cve_id)
	CveID string `ecs:"cve.id"`

	// The severity of the vulnerability can help with metrics and internal
	// prioritization regarding remediation. For example (ex.
	// https://nvd.nist.gov/vuln-metrics/cvss)
	Severity string `ecs:"severity"`

	// The current status of the vulerability on the asset:
	// New - The first time a vulnerability is detected by a scan the status is
	// set to New. Active - A vulnerability detected by two or more scans is
	// set to Active. Fixed - A vulnerability was verified by the most recent
	// scan as fixed, and this vulnerability was detected by the previous scan.
	// Re-Opened - A vulnerability was reopened by the most recent scan, and
	// this vulnerability was verified as fixed by the previous scan.
	// For example (ex.
	// https://qualysguard.qualys.com/qwebhelp/fo_portal/scans/vulnerability_status.htm)
	Status string `ecs:"status"`

	// The first time that the vulnerability was observed on the asset.
	DetectedFirst time.Time `ecs:"detected.first"`

	// The last time that the vulnerability was observed on the asset.
	DetectedLast time.Time `ecs:"detected.last"`

	// The first time that the asset was scanned for vulnerabilities.
	ScannedFirst time.Time `ecs:"scanned.first"`

	// The last time that the asset was scanned for vulnerabilities.
	ScannedLast time.Time `ecs:"scanned.last"`
}
