// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by scripts/gocodegen.go - DO NOT EDIT.

package ecs

// The network is defined as the communication path over which a host or
// network event happens.
// The network.* fields should be populated with details about the network
// activity associated with an event.
type Network struct {
	// Name given by operators to sections of their network.
	Name string `ecs:"name"`

	// The customer VLAN identifier in the C-TAG (Customer VLAN Tag) TCI (Tag
	// Control Information) field as defined in IEEE 802.1Q. This could be the
	// VLAN's numeric identifier or text description.
	Dot1qCtag string `ecs:"dot1q_ctag"`

	// The VLAN identifier portion of the TCI (Tag Control Information) field
	// of an Ethernet frame as defined in IEEE 802.1Q. This could be the VLAN's
	// numeric identifier or text description.
	Dot1qVlan string `ecs:"dot1q_vlan"`

	// In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec,
	// pim, etc
	// The field value must be normalized to lowercase for querying. See the
	// documentation section "Implementing ECS".
	Type string `ecs:"type"`

	// In the case of IPv4 packets this would correspond to the TOS (Type of
	// Service) field. In the case of IPv6 packets this would correspond to the
	// Traffic Class field.
	ClassOfService int64 `ecs:"class_of_service"`

	// This could be represented using a numeric value or a text description.
	// For example, an ICMP echo request would have "type = 8" and "code = 0",
	// which could be represented as "0x0800" or "ICMP Echo".
	IcmpTypeCode string `ecs:"icmp_type_code"`

	// IANA Protocol Number
	// (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
	// Standardized list of protocols. This aligns well with NetFlow and sFlow
	// related logs which use the IANA Protocol Number.
	IANANumber string `ecs:"iana_number"`

	// Same as network.iana_number, but instead using the Keyword name of the
	// transport layer (udp, tcp, ipv6-icmp, etc.)
	// The field value must be normalized to lowercase for querying. See the
	// documentation section "Implementing ECS".
	Transport string `ecs:"transport"`

	// The value of the fragment identification field from an IPv4 or IPv6
	// packet header.
	FragmentIdentification int64 `ecs:"fragment_identification"`

	// This could be represented using a numeric value or text description. For
	// example, a TCP syncrhonize flag could be represented as "0x0002" or
	// "SYN".
	TcpControlBits string `ecs:"tcp_control_bits"`

	// A name given to an application level protocol. This can be arbitrarily
	// assigned for things like microservices, but also apply to things like
	// skype, icq, facebook, twitter. This would be used in situations where
	// the vendor or service can be decoded such as from the source/dest IP
	// owners, ports, or wire format.
	// The field value must be normalized to lowercase for querying. See the
	// documentation section "Implementing ECS".
	Application string `ecs:"application"`

	// L7 Network protocol name. ex. http, lumberjack, transport protocol.
	// The field value must be normalized to lowercase for querying. See the
	// documentation section "Implementing ECS".
	Protocol string `ecs:"protocol"`

	// Direction of the network traffic.
	// Recommended values are:
	//   * inbound
	//   * outbound
	//   * internal
	//   * external
	//   * unknown
	//
	// When mapping events from a host-based monitoring context, populate this
	// field from the host's point of view.
	// When mapping events from a network or perimeter-based monitoring
	// context, populate this field from the point of view of your network
	// perimeter.
	Direction string `ecs:"direction"`

	// From the observation point of a network event, the network interface
	// from which frames or packets were transmitted. For example, in the case
	// of a switch or router this might be the port name (e.g. eth0, ge-0/1,
	// GigabitEthernet0/0, etc.), port description, or SNMP ifIndex (e.g. 501).
	EgressInterface string `ecs:"egress_interface"`

	// From the observation point of a network event, the VLAN in which the
	// frame was transmitted. This could be the VLAN's numeric identifier or
	// text description.
	EgressVlan string `ecs:"egress_vlan"`

	// From the observation point of a network event, the network interface
	// into which frames or packets were received. For example, in the case of
	// a switch or router this might be the port name (e.g. eth0, ge-0/1,
	// GigabitEthernet0/0, etc.), port description, or SNMP ifIndex (e.g. 501).
	IngressInterface string `ecs:"ingress_interface"`

	// From the observation point of a network event, the VLAN in which the
	// frame was received. This could be the VLAN's numeric identifier or text
	// description.
	IngressVlan string `ecs:"ingress_vlan"`

	// Host IP address when the source IP address is the proxy.
	ForwardedIP string `ecs:"forwarded_ip"`

	// A hash of source and destination IPs and ports, as well as the protocol
	// used in a communication. This is a tool-agnostic standard to identify
	// flows.
	// Learn more at https://github.com/corelight/community-id-spec.
	CommunityID string `ecs:"community_id"`

	// Total bytes transferred in both directions.
	// If `source.bytes` and `destination.bytes` are known, `network.bytes` is
	// their sum.
	Bytes int64 `ecs:"bytes"`

	// Calculated by dividing the total number of bits transferred during an
	// arbitrary period of time by that period of time. By convention, this
	// would likely be presented in bps (bits per second).
	BitRate float64 `ecs:"bit_rate"`

	// Total packets transferred in both directions.
	// If `source.packets` and `destination.packets` are known,
	// `network.packets` is their sum.
	Packets int64 `ecs:"packets"`

	// Calculated by dividing the total number of packets transferred during an
	// arbitrary period of time by that period of time. By convention, this
	// would likely be presented in pps (packets per second).
	PacketRate float64 `ecs:"packet_rate"`
}
