// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by scripts/gocodegen.go - DO NOT EDIT.

package ecs

// Fields describing a Java virtual machine (JVM) runtime.
// These fields can be used for monitoring the performance of a JVM-based
// application.
type Jvm struct {
	// The amount of used heap memory.
	MemoryHeapUsed int64 `ecs:"memory.heap.used"`

	// The amount of memory committed for the Java virtual machine to use.
	// This amount of memory is guaranteed for the Java virtual machine to use.
	MemoryHeapCommitted int64 `ecs:"memory.heap.committed"`

	// The maximum amount of heap memory that can be used for memory
	// management.
	// If the maximum memory size is undefined, the value is `-1`
	MemoryHeapMax int64 `ecs:"memory.heap.max"`

	// The amount of used non-heap memory.
	MemoryNonHeapUsed int64 `ecs:"memory.non_heap.used"`

	// The amount of non-heap memory committed for the Java virtual machine to
	// use.
	// This amount of memory is guaranteed for the Java virtual machine to use.
	MemoryNonHeapCommitted int64 `ecs:"memory.non_heap.committed"`

	// The maximum amount of heap memory that can be used for memory
	// management.
	// If the maximum memory size is undefined, the value is `-1`
	MemoryNonHeapMax int64 `ecs:"memory.non_heap.max"`

	// The current number of live threads in the JVM, including both daemon and
	// non-daemon threads.
	ThreadCount int64 `ecs:"thread.count"`

	// The total number of garbage collections that have occurred.
	// This metric may be reported multiple times for different memory
	// managers, such as in the case of generational garbage collectors. The
	// name of the memory manager is recorded as `label.name`.
	GcCount int64 `ecs:"gc.count"`

	// The approximate accumulated collection elapsed time in milliseconds.
	// This metric may be reported multiple times for different memory
	// managers, such as in the case of generational garbage collectors. The
	// name of the memory manager is recorded as `label.name`.
	GcTime int64 `ecs:"gc.time"`

	// An approximation of the total amount of memory allocated in heap memory.
	GcAlloc int64 `ecs:"gc.alloc"`
}
