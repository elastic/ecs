'@timestamp':
  dashed_name: timestamp
  description: 'Date/time when the event originated.

    This is the date/time extracted from the event, typically representing when the
    event was generated by the source.

    If the event source has no original timestamp, this value is typically populated
    by the first time the event was received by the pipeline.

    Required field for all events.'
  example: '2016-05-23T08:05:34.853Z'
  flat_name: '@timestamp'
  level: core
  name: '@timestamp'
  normalize: []
  required: true
  short: Date/time when the event originated.
  type: date
agent.build.original:
  dashed_name: agent-build-original
  description: 'Extended build information for the agent.

    This field is intended to contain any build information that a data source may
    provide, no specific formatting is required.'
  example: metricbeat version 7.6.0 (amd64), libbeat 7.6.0 [6a23e8f8f30f5001ba344e4e54d8d9cb82cb107c
    built 2020-02-05 23:10:10 +0000 UTC]
  flat_name: agent.build.original
  ignore_above: 1024
  level: core
  name: build.original
  normalize: []
  short: Extended build information for the agent.
  type: keyword
agent.ephemeral_id:
  dashed_name: agent-ephemeral-id
  description: 'Ephemeral identifier of this agent (if one exists).

    This id normally changes across restarts, but `agent.id` does not.'
  example: 8a4f500f
  flat_name: agent.ephemeral_id
  ignore_above: 1024
  level: extended
  name: ephemeral_id
  normalize: []
  short: Ephemeral identifier of this agent.
  type: keyword
agent.id:
  dashed_name: agent-id
  description: 'Unique identifier of this agent (if one exists).

    Example: For Beats this would be beat.id.'
  example: 8a4f500d
  flat_name: agent.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique identifier of this agent.
  type: keyword
agent.name:
  dashed_name: agent-name
  description: 'Custom name of the agent.

    This is a name that can be given to an agent. This can be helpful if for example
    two Filebeat instances are running on the same host but a human readable separation
    is needed on which Filebeat instance data is coming from.

    If no name is given, the name is often left empty.'
  example: foo
  flat_name: agent.name
  ignore_above: 1024
  level: core
  name: name
  normalize: []
  short: Custom name of the agent.
  type: keyword
agent.type:
  dashed_name: agent-type
  description: 'Type of the agent.

    The agent type always stays the same and should be given by the agent used. In
    case of Filebeat the agent would always be Filebeat also if two Filebeat instances
    are run on the same machine.'
  example: filebeat
  flat_name: agent.type
  ignore_above: 1024
  level: core
  name: type
  normalize: []
  short: Type of the agent.
  type: keyword
agent.version:
  dashed_name: agent-version
  description: Version of the agent.
  example: 6.0.0-rc2
  flat_name: agent.version
  ignore_above: 1024
  level: core
  name: version
  normalize: []
  short: Version of the agent.
  type: keyword
cgroup.cpu.periods:
  dashed_name: cgroup-cpu-periods
  description: Number of period intervals that have elapsed.
  example: 454839343
  flat_name: cgroup.cpu.periods
  level: extended
  name: cpu.periods
  normalize: []
  short: Number of period intervals that have elapsed.
  type: long
cgroup.cpu.throttled.us:
  dashed_name: cgroup-cpu-throttled-us
  description: Microseconds of CPU throttled time.
  example: 15000
  flat_name: cgroup.cpu.throttled.us
  level: extended
  name: cpu.throttled.us
  normalize: []
  short: Microseconds of CPU throttled time.
  type: long
cgroup.cpu.usage:
  dashed_name: cgroup-cpu-usage
  description: CPU usage, normalized by the CPU count.
  flat_name: cgroup.cpu.usage
  level: extended
  name: cpu.usage
  normalize: []
  scaling_factor: 1000
  short: CPU usage, normalized by the CPU count.
  type: scaled_float
cgroup.memory.limit:
  dashed_name: cgroup-memory-limit
  description: Memory limit within the cgroup.
  example: 256
  flat_name: cgroup.memory.limit
  level: extended
  name: memory.limit
  normalize: []
  short: Memory limit within the cgroup.
  type: long
cgroup.memory.swap.usage:
  dashed_name: cgroup-memory-swap-usage
  description: The amount of cgroup memory in swap.
  example: 5600
  flat_name: cgroup.memory.swap.usage
  level: extended
  name: memory.swap.usage
  normalize: []
  short: The amount of cgroup memory in swap.
  type: long
cgroup.memory.usage:
  dashed_name: cgroup-memory-usage
  description: Memory usage in bytes
  example: 25600
  flat_name: cgroup.memory.usage
  level: extended
  name: memory.usage
  normalize: []
  short: Memory usage in bytes
  type: long
cgroup.version:
  dashed_name: cgroup-version
  description: The cgroup version linked to the metrics
  flat_name: cgroup.version
  level: extended
  name: version
  normalize: []
  short: The cgroup version linked to the metrics
  type: long
client.address:
  dashed_name: client-address
  description: 'Some event client addresses are defined ambiguously. The event will
    sometimes list an IP, a domain or a unix socket.  You should always store the
    raw address in the `.address` field.

    Then it should be duplicated to `.ip` or `.domain`, depending on which one it
    is.'
  flat_name: client.address
  ignore_above: 1024
  level: extended
  name: address
  normalize: []
  short: Client network address.
  type: keyword
client.as.number:
  dashed_name: client-as-number
  description: Unique number allocated to the autonomous system. The autonomous system
    number (ASN) uniquely identifies each network on the Internet.
  example: 15169
  flat_name: client.as.number
  level: extended
  name: number
  normalize: []
  original_fieldset: as
  short: Unique number allocated to the autonomous system.
  type: long
client.as.organization.name:
  dashed_name: client-as-organization-name
  description: Organization name.
  example: Google LLC
  flat_name: client.as.organization.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: client.as.organization.name.text
    name: text
    type: match_only_text
  name: organization.name
  normalize: []
  original_fieldset: as
  short: Organization name.
  type: keyword
client.bytes:
  dashed_name: client-bytes
  description: Bytes sent from the client to the server.
  example: 184
  flat_name: client.bytes
  format: bytes
  level: core
  name: bytes
  normalize: []
  short: Bytes sent from the client to the server.
  type: long
client.domain:
  dashed_name: client-domain
  description: 'The domain name of the client system.

    This value may be a host name, a fully qualified domain name, or another host
    naming format. The value may derive from the original event or be added from enrichment.'
  example: foo.example.com
  flat_name: client.domain
  ignore_above: 1024
  level: core
  name: domain
  normalize: []
  short: The domain name of the client.
  type: keyword
client.geo.city_name:
  dashed_name: client-geo-city-name
  description: City name.
  example: Montreal
  flat_name: client.geo.city_name
  ignore_above: 1024
  level: core
  name: city_name
  normalize: []
  original_fieldset: geo
  short: City name.
  type: keyword
client.geo.continent_code:
  dashed_name: client-geo-continent-code
  description: Two-letter code representing continent's name.
  example: NA
  flat_name: client.geo.continent_code
  ignore_above: 1024
  level: core
  name: continent_code
  normalize: []
  original_fieldset: geo
  short: Continent code.
  type: keyword
client.geo.continent_name:
  dashed_name: client-geo-continent-name
  description: Name of the continent.
  example: North America
  flat_name: client.geo.continent_name
  ignore_above: 1024
  level: core
  name: continent_name
  normalize: []
  original_fieldset: geo
  short: Name of the continent.
  type: keyword
client.geo.country_iso_code:
  dashed_name: client-geo-country-iso-code
  description: Country ISO code.
  example: CA
  flat_name: client.geo.country_iso_code
  ignore_above: 1024
  level: core
  name: country_iso_code
  normalize: []
  original_fieldset: geo
  short: Country ISO code.
  type: keyword
client.geo.country_name:
  dashed_name: client-geo-country-name
  description: Country name.
  example: Canada
  flat_name: client.geo.country_name
  ignore_above: 1024
  level: core
  name: country_name
  normalize: []
  original_fieldset: geo
  short: Country name.
  type: keyword
client.geo.location:
  dashed_name: client-geo-location
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  flat_name: client.geo.location
  level: core
  name: location
  normalize: []
  original_fieldset: geo
  short: Longitude and latitude.
  type: geo_point
client.geo.name:
  dashed_name: client-geo-name
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  flat_name: client.geo.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: geo
  short: User-defined description of a location.
  type: keyword
client.geo.postal_code:
  dashed_name: client-geo-postal-code
  description: 'Postal code associated with the location.

    Values appropriate for this field may also be known as a postcode or ZIP code
    and will vary widely from country to country.'
  example: 94040
  flat_name: client.geo.postal_code
  ignore_above: 1024
  level: core
  name: postal_code
  normalize: []
  original_fieldset: geo
  short: Postal code.
  type: keyword
client.geo.region_iso_code:
  dashed_name: client-geo-region-iso-code
  description: Region ISO code.
  example: CA-QC
  flat_name: client.geo.region_iso_code
  ignore_above: 1024
  level: core
  name: region_iso_code
  normalize: []
  original_fieldset: geo
  short: Region ISO code.
  type: keyword
client.geo.region_name:
  dashed_name: client-geo-region-name
  description: Region name.
  example: Quebec
  flat_name: client.geo.region_name
  ignore_above: 1024
  level: core
  name: region_name
  normalize: []
  original_fieldset: geo
  short: Region name.
  type: keyword
client.geo.timezone:
  dashed_name: client-geo-timezone
  description: The time zone of the location, such as IANA time zone name.
  example: America/Argentina/Buenos_Aires
  flat_name: client.geo.timezone
  ignore_above: 1024
  level: core
  name: timezone
  normalize: []
  original_fieldset: geo
  short: Time zone.
  type: keyword
client.ip:
  dashed_name: client-ip
  description: IP address of the client (IPv4 or IPv6).
  flat_name: client.ip
  level: core
  name: ip
  normalize: []
  short: IP address of the client.
  type: ip
client.mac:
  dashed_name: client-mac
  description: 'MAC address of the client.

    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte)
    is represented by two [uppercase] hexadecimal digits giving the value of the octet
    as an unsigned integer. Successive octets are separated by a hyphen.'
  example: 00-00-5E-00-53-23
  flat_name: client.mac
  ignore_above: 1024
  level: core
  name: mac
  normalize: []
  patther: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
  short: MAC address of the client.
  type: keyword
client.nat.ip:
  dashed_name: client-nat-ip
  description: 'Translated IP of source based NAT sessions (e.g. internal client to
    internet).

    Typically connections traversing load balancers, firewalls, or routers.'
  flat_name: client.nat.ip
  level: extended
  name: nat.ip
  normalize: []
  short: Client NAT ip address
  type: ip
client.nat.port:
  dashed_name: client-nat-port
  description: 'Translated port of source based NAT sessions (e.g. internal client
    to internet).

    Typically connections traversing load balancers, firewalls, or routers.'
  flat_name: client.nat.port
  format: string
  level: extended
  name: nat.port
  normalize: []
  short: Client NAT port
  type: long
client.packets:
  dashed_name: client-packets
  description: Packets sent from the client to the server.
  example: 12
  flat_name: client.packets
  level: core
  name: packets
  normalize: []
  short: Packets sent from the client to the server.
  type: long
client.port:
  dashed_name: client-port
  description: Port of the client.
  flat_name: client.port
  format: string
  level: core
  name: port
  normalize: []
  short: Port of the client.
  type: long
client.registered_domain:
  dashed_name: client-registered-domain
  description: 'The highest registered client domain, stripped of the subdomain.

    For example, the registered domain for "foo.example.com" is "example.com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    two labels will not work well for TLDs such as "co.uk".'
  example: example.com
  flat_name: client.registered_domain
  ignore_above: 1024
  level: extended
  name: registered_domain
  normalize: []
  short: The highest registered client domain, stripped of the subdomain.
  type: keyword
client.subdomain:
  dashed_name: client-subdomain
  description: 'The subdomain portion of a fully qualified domain name includes all
    of the names except the host name under the registered_domain.  In a partially
    qualified domain, or if the the qualification level of the full name cannot be
    determined, subdomain contains all of the names below the registered domain.

    For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the
    domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the
    subdomain field should contain "sub2.sub1", with no trailing period.'
  example: east
  flat_name: client.subdomain
  ignore_above: 1024
  level: extended
  name: subdomain
  normalize: []
  short: The subdomain of the domain.
  type: keyword
client.top_level_domain:
  dashed_name: client-top-level-domain
  description: 'The effective top level domain (eTLD), also known as the domain suffix,
    is the last part of the domain name. For example, the top level domain for example.com
    is "com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    label will not work well for effective TLDs such as "co.uk".'
  example: co.uk
  flat_name: client.top_level_domain
  ignore_above: 1024
  level: extended
  name: top_level_domain
  normalize: []
  short: The effective top level domain (com, org, net, co.uk).
  type: keyword
client.user.domain:
  dashed_name: client-user-domain
  description: 'Name of the directory the user is a member of.

    For example, an LDAP or Active Directory domain name.'
  flat_name: client.user.domain
  ignore_above: 1024
  level: extended
  name: domain
  normalize: []
  original_fieldset: user
  short: Name of the directory the user is a member of.
  type: keyword
client.user.email:
  dashed_name: client-user-email
  description: User email address.
  flat_name: client.user.email
  ignore_above: 1024
  level: extended
  name: email
  normalize: []
  original_fieldset: user
  short: User email address.
  type: keyword
client.user.full_name:
  dashed_name: client-user-full-name
  description: User's full name, if available.
  example: Albert Einstein
  flat_name: client.user.full_name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: client.user.full_name.text
    name: text
    type: match_only_text
  name: full_name
  normalize: []
  original_fieldset: user
  short: User's full name, if available.
  type: keyword
client.user.group.domain:
  dashed_name: client-user-group-domain
  description: 'Name of the directory the group is a member of.

    For example, an LDAP or Active Directory domain name.'
  flat_name: client.user.group.domain
  ignore_above: 1024
  level: extended
  name: domain
  normalize: []
  original_fieldset: group
  short: Name of the directory the group is a member of.
  type: keyword
client.user.group.id:
  dashed_name: client-user-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: client.user.group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
client.user.group.name:
  dashed_name: client-user-group-name
  description: Name of the group.
  flat_name: client.user.group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
client.user.hash:
  dashed_name: client-user-hash
  description: 'Unique user hash to correlate information for a user in anonymized
    form.

    Useful if `user.id` or `user.name` contain confidential information and cannot
    be used.'
  flat_name: client.user.hash
  ignore_above: 1024
  level: extended
  name: hash
  normalize: []
  original_fieldset: user
  short: Unique user hash to correlate information for a user in anonymized form.
  type: keyword
client.user.id:
  dashed_name: client-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: client.user.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
client.user.name:
  dashed_name: client-user-name
  description: Short name or login of the user.
  example: a.einstein
  flat_name: client.user.name
  ignore_above: 1024
  level: core
  multi_fields:
  - flat_name: client.user.name.text
    name: text
    type: match_only_text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
client.user.roles:
  dashed_name: client-user-roles
  description: Array of user roles at the time of the event.
  example: '["kibana_admin", "reporting_user"]'
  flat_name: client.user.roles
  ignore_above: 1024
  level: extended
  name: roles
  normalize:
  - array
  original_fieldset: user
  short: Array of user roles at the time of the event.
  type: keyword
cloud.account.id:
  dashed_name: cloud-account-id
  description: 'The cloud account or organization id used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
  example: 666777888999
  flat_name: cloud.account.id
  ignore_above: 1024
  level: extended
  name: account.id
  normalize: []
  short: The cloud account or organization id.
  type: keyword
cloud.account.name:
  dashed_name: cloud-account-name
  description: 'The cloud account name or alias used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account name, Google Cloud ORG display name.'
  example: elastic-dev
  flat_name: cloud.account.name
  ignore_above: 1024
  level: extended
  name: account.name
  normalize: []
  short: The cloud account name.
  type: keyword
cloud.availability_zone:
  dashed_name: cloud-availability-zone
  description: Availability zone in which this host, resource, or service is located.
  example: us-east-1c
  flat_name: cloud.availability_zone
  ignore_above: 1024
  level: extended
  name: availability_zone
  normalize: []
  short: Availability zone in which this host, resource, or service is located.
  type: keyword
cloud.instance.id:
  dashed_name: cloud-instance-id
  description: Instance ID of the host machine.
  example: i-1234567890abcdef0
  flat_name: cloud.instance.id
  ignore_above: 1024
  level: extended
  name: instance.id
  normalize: []
  short: Instance ID of the host machine.
  type: keyword
cloud.instance.name:
  dashed_name: cloud-instance-name
  description: Instance name of the host machine.
  flat_name: cloud.instance.name
  ignore_above: 1024
  level: extended
  name: instance.name
  normalize: []
  short: Instance name of the host machine.
  type: keyword
cloud.machine.type:
  dashed_name: cloud-machine-type
  description: Machine type of the host machine.
  example: t2.medium
  flat_name: cloud.machine.type
  ignore_above: 1024
  level: extended
  name: machine.type
  normalize: []
  short: Machine type of the host machine.
  type: keyword
cloud.origin.account.id:
  dashed_name: cloud-origin-account-id
  description: 'The cloud account or organization id used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
  example: 666777888999
  flat_name: cloud.origin.account.id
  ignore_above: 1024
  level: extended
  name: account.id
  normalize: []
  original_fieldset: cloud
  short: The cloud account or organization id.
  type: keyword
cloud.origin.account.name:
  dashed_name: cloud-origin-account-name
  description: 'The cloud account name or alias used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account name, Google Cloud ORG display name.'
  example: elastic-dev
  flat_name: cloud.origin.account.name
  ignore_above: 1024
  level: extended
  name: account.name
  normalize: []
  original_fieldset: cloud
  short: The cloud account name.
  type: keyword
cloud.origin.availability_zone:
  dashed_name: cloud-origin-availability-zone
  description: Availability zone in which this host, resource, or service is located.
  example: us-east-1c
  flat_name: cloud.origin.availability_zone
  ignore_above: 1024
  level: extended
  name: availability_zone
  normalize: []
  original_fieldset: cloud
  short: Availability zone in which this host, resource, or service is located.
  type: keyword
cloud.origin.instance.id:
  dashed_name: cloud-origin-instance-id
  description: Instance ID of the host machine.
  example: i-1234567890abcdef0
  flat_name: cloud.origin.instance.id
  ignore_above: 1024
  level: extended
  name: instance.id
  normalize: []
  original_fieldset: cloud
  short: Instance ID of the host machine.
  type: keyword
cloud.origin.instance.name:
  dashed_name: cloud-origin-instance-name
  description: Instance name of the host machine.
  flat_name: cloud.origin.instance.name
  ignore_above: 1024
  level: extended
  name: instance.name
  normalize: []
  original_fieldset: cloud
  short: Instance name of the host machine.
  type: keyword
cloud.origin.machine.type:
  dashed_name: cloud-origin-machine-type
  description: Machine type of the host machine.
  example: t2.medium
  flat_name: cloud.origin.machine.type
  ignore_above: 1024
  level: extended
  name: machine.type
  normalize: []
  original_fieldset: cloud
  short: Machine type of the host machine.
  type: keyword
cloud.origin.project.id:
  dashed_name: cloud-origin-project-id
  description: 'The cloud project identifier.

    Examples: Google Cloud Project id, Azure Project id.'
  example: my-project
  flat_name: cloud.origin.project.id
  ignore_above: 1024
  level: extended
  name: project.id
  normalize: []
  original_fieldset: cloud
  short: The cloud project id.
  type: keyword
cloud.origin.project.name:
  dashed_name: cloud-origin-project-name
  description: 'The cloud project name.

    Examples: Google Cloud Project name, Azure Project name.'
  example: my project
  flat_name: cloud.origin.project.name
  ignore_above: 1024
  level: extended
  name: project.name
  normalize: []
  original_fieldset: cloud
  short: The cloud project name.
  type: keyword
cloud.origin.provider:
  dashed_name: cloud-origin-provider
  description: Name of the cloud provider. Example values are aws, azure, gcp, or
    digitalocean.
  example: aws
  flat_name: cloud.origin.provider
  ignore_above: 1024
  level: extended
  name: provider
  normalize: []
  original_fieldset: cloud
  short: Name of the cloud provider.
  type: keyword
cloud.origin.region:
  dashed_name: cloud-origin-region
  description: Region in which this host, resource, or service is located.
  example: us-east-1
  flat_name: cloud.origin.region
  ignore_above: 1024
  level: extended
  name: region
  normalize: []
  original_fieldset: cloud
  short: Region in which this host, resource, or service is located.
  type: keyword
cloud.origin.service.name:
  dashed_name: cloud-origin-service-name
  description: 'The cloud service name is intended to distinguish services running
    on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App
    Engine, Azure VM vs App Server.

    Examples: app engine, app service, cloud run, fargate, lambda.'
  example: lambda
  flat_name: cloud.origin.service.name
  ignore_above: 1024
  level: extended
  name: service.name
  normalize: []
  original_fieldset: cloud
  short: The cloud service name.
  type: keyword
cloud.project.id:
  dashed_name: cloud-project-id
  description: 'The cloud project identifier.

    Examples: Google Cloud Project id, Azure Project id.'
  example: my-project
  flat_name: cloud.project.id
  ignore_above: 1024
  level: extended
  name: project.id
  normalize: []
  short: The cloud project id.
  type: keyword
cloud.project.name:
  dashed_name: cloud-project-name
  description: 'The cloud project name.

    Examples: Google Cloud Project name, Azure Project name.'
  example: my project
  flat_name: cloud.project.name
  ignore_above: 1024
  level: extended
  name: project.name
  normalize: []
  short: The cloud project name.
  type: keyword
cloud.provider:
  dashed_name: cloud-provider
  description: Name of the cloud provider. Example values are aws, azure, gcp, or
    digitalocean.
  example: aws
  flat_name: cloud.provider
  ignore_above: 1024
  level: extended
  name: provider
  normalize: []
  short: Name of the cloud provider.
  type: keyword
cloud.region:
  dashed_name: cloud-region
  description: Region in which this host, resource, or service is located.
  example: us-east-1
  flat_name: cloud.region
  ignore_above: 1024
  level: extended
  name: region
  normalize: []
  short: Region in which this host, resource, or service is located.
  type: keyword
cloud.service.name:
  dashed_name: cloud-service-name
  description: 'The cloud service name is intended to distinguish services running
    on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App
    Engine, Azure VM vs App Server.

    Examples: app engine, app service, cloud run, fargate, lambda.'
  example: lambda
  flat_name: cloud.service.name
  ignore_above: 1024
  level: extended
  name: service.name
  normalize: []
  short: The cloud service name.
  type: keyword
cloud.target.account.id:
  dashed_name: cloud-target-account-id
  description: 'The cloud account or organization id used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
  example: 666777888999
  flat_name: cloud.target.account.id
  ignore_above: 1024
  level: extended
  name: account.id
  normalize: []
  original_fieldset: cloud
  short: The cloud account or organization id.
  type: keyword
cloud.target.account.name:
  dashed_name: cloud-target-account-name
  description: 'The cloud account name or alias used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account name, Google Cloud ORG display name.'
  example: elastic-dev
  flat_name: cloud.target.account.name
  ignore_above: 1024
  level: extended
  name: account.name
  normalize: []
  original_fieldset: cloud
  short: The cloud account name.
  type: keyword
cloud.target.availability_zone:
  dashed_name: cloud-target-availability-zone
  description: Availability zone in which this host, resource, or service is located.
  example: us-east-1c
  flat_name: cloud.target.availability_zone
  ignore_above: 1024
  level: extended
  name: availability_zone
  normalize: []
  original_fieldset: cloud
  short: Availability zone in which this host, resource, or service is located.
  type: keyword
cloud.target.instance.id:
  dashed_name: cloud-target-instance-id
  description: Instance ID of the host machine.
  example: i-1234567890abcdef0
  flat_name: cloud.target.instance.id
  ignore_above: 1024
  level: extended
  name: instance.id
  normalize: []
  original_fieldset: cloud
  short: Instance ID of the host machine.
  type: keyword
cloud.target.instance.name:
  dashed_name: cloud-target-instance-name
  description: Instance name of the host machine.
  flat_name: cloud.target.instance.name
  ignore_above: 1024
  level: extended
  name: instance.name
  normalize: []
  original_fieldset: cloud
  short: Instance name of the host machine.
  type: keyword
cloud.target.machine.type:
  dashed_name: cloud-target-machine-type
  description: Machine type of the host machine.
  example: t2.medium
  flat_name: cloud.target.machine.type
  ignore_above: 1024
  level: extended
  name: machine.type
  normalize: []
  original_fieldset: cloud
  short: Machine type of the host machine.
  type: keyword
cloud.target.project.id:
  dashed_name: cloud-target-project-id
  description: 'The cloud project identifier.

    Examples: Google Cloud Project id, Azure Project id.'
  example: my-project
  flat_name: cloud.target.project.id
  ignore_above: 1024
  level: extended
  name: project.id
  normalize: []
  original_fieldset: cloud
  short: The cloud project id.
  type: keyword
cloud.target.project.name:
  dashed_name: cloud-target-project-name
  description: 'The cloud project name.

    Examples: Google Cloud Project name, Azure Project name.'
  example: my project
  flat_name: cloud.target.project.name
  ignore_above: 1024
  level: extended
  name: project.name
  normalize: []
  original_fieldset: cloud
  short: The cloud project name.
  type: keyword
cloud.target.provider:
  dashed_name: cloud-target-provider
  description: Name of the cloud provider. Example values are aws, azure, gcp, or
    digitalocean.
  example: aws
  flat_name: cloud.target.provider
  ignore_above: 1024
  level: extended
  name: provider
  normalize: []
  original_fieldset: cloud
  short: Name of the cloud provider.
  type: keyword
cloud.target.region:
  dashed_name: cloud-target-region
  description: Region in which this host, resource, or service is located.
  example: us-east-1
  flat_name: cloud.target.region
  ignore_above: 1024
  level: extended
  name: region
  normalize: []
  original_fieldset: cloud
  short: Region in which this host, resource, or service is located.
  type: keyword
cloud.target.service.name:
  dashed_name: cloud-target-service-name
  description: 'The cloud service name is intended to distinguish services running
    on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App
    Engine, Azure VM vs App Server.

    Examples: app engine, app service, cloud run, fargate, lambda.'
  example: lambda
  flat_name: cloud.target.service.name
  ignore_above: 1024
  level: extended
  name: service.name
  normalize: []
  original_fieldset: cloud
  short: The cloud service name.
  type: keyword
container.cpu.usage:
  beta: This field is beta and subject to change.
  dashed_name: container-cpu-usage
  description: 'Percent CPU used which is normalized by the number of CPU cores and
    it ranges from 0 to 1. Scaling factor: 1000.'
  flat_name: container.cpu.usage
  level: extended
  name: cpu.usage
  normalize: []
  scaling_factor: 1000
  short: Percent CPU used, between 0 and 1.
  type: scaled_float
container.disk.read.bytes:
  beta: This field is beta and subject to change.
  dashed_name: container-disk-read-bytes
  description: The total number of bytes (gauge) read successfully (aggregated from
    all disks) since the last metric collection.
  flat_name: container.disk.read.bytes
  level: extended
  name: disk.read.bytes
  normalize: []
  short: The number of bytes read by all disks.
  type: long
container.disk.write.bytes:
  beta: This field is beta and subject to change.
  dashed_name: container-disk-write-bytes
  description: The total number of bytes (gauge) written successfully (aggregated
    from all disks) since the last metric collection.
  flat_name: container.disk.write.bytes
  level: extended
  name: disk.write.bytes
  normalize: []
  short: The number of bytes written on all disks.
  type: long
container.id:
  dashed_name: container-id
  description: Unique container id.
  flat_name: container.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique container id.
  type: keyword
container.image.hash.all:
  dashed_name: container-image-hash-all
  description: 'An array of digests of the image the container was built on. Each
    digest consists of the hash algorithm and value in this format: `algorithm:value`.
    Algorithm names should align with the field names in the ECS hash field set.'
  example: '[sha256:f8fefc80e3273dc756f288a63945820d6476ad64883892c771b5e2ece6bf1b26]'
  flat_name: container.image.hash.all
  ignore_above: 1024
  level: extended
  name: image.hash.all
  normalize:
  - array
  short: An array of digests of the image the container was built on.
  type: keyword
container.image.name:
  dashed_name: container-image-name
  description: Name of the image the container was built on.
  flat_name: container.image.name
  ignore_above: 1024
  level: extended
  name: image.name
  normalize: []
  short: Name of the image the container was built on.
  type: keyword
container.image.tag:
  dashed_name: container-image-tag
  description: Container image tags.
  flat_name: container.image.tag
  ignore_above: 1024
  level: extended
  name: image.tag
  normalize:
  - array
  short: Container image tags.
  type: keyword
container.labels:
  dashed_name: container-labels
  description: Image labels.
  flat_name: container.labels
  level: extended
  name: labels
  normalize: []
  object_type: keyword
  short: Image labels.
  type: object
container.memory.usage:
  beta: This field is beta and subject to change.
  dashed_name: container-memory-usage
  description: 'Memory usage percentage and it ranges from 0 to 1. Scaling factor:
    1000.'
  flat_name: container.memory.usage
  level: extended
  name: memory.usage
  normalize: []
  scaling_factor: 1000
  short: Percent memory used, between 0 and 1.
  type: scaled_float
container.name:
  dashed_name: container-name
  description: Container name.
  flat_name: container.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  short: Container name.
  type: keyword
container.network.egress.bytes:
  beta: This field is beta and subject to change.
  dashed_name: container-network-egress-bytes
  description: The number of bytes (gauge) sent out on all network interfaces by the
    container since the last metric collection.
  flat_name: container.network.egress.bytes
  level: extended
  name: network.egress.bytes
  normalize: []
  short: The number of bytes sent on all network interfaces.
  type: long
container.network.ingress.bytes:
  beta: This field is beta and subject to change.
  dashed_name: container-network-ingress-bytes
  description: The number of bytes received (gauge) on all network interfaces by the
    container since the last metric collection.
  flat_name: container.network.ingress.bytes
  level: extended
  name: network.ingress.bytes
  normalize: []
  short: The number of bytes received on all network interfaces.
  type: long
container.runtime:
  dashed_name: container-runtime
  description: Runtime managing this container.
  example: docker
  flat_name: container.runtime
  ignore_above: 1024
  level: extended
  name: runtime
  normalize: []
  short: Runtime managing this container.
  type: keyword
data_stream.dataset:
  dashed_name: data-stream-dataset
  description: "The field can contain anything that makes sense to signify the source\
    \ of the data.\nExamples include `nginx.access`, `prometheus`, `endpoint` etc.\
    \ For data streams that otherwise fit, but that do not have dataset set we use\
    \ the value \"generic\" for the dataset value. `event.dataset` should have the\
    \ same value as `data_stream.dataset`.\nBeyond the Elasticsearch data stream naming\
    \ criteria noted above, the `dataset` value has additional restrictions:\n  *\
    \ Must not contain `-`\n  * No longer than 100 characters"
  example: nginx.access
  flat_name: data_stream.dataset
  level: extended
  name: dataset
  normalize: []
  short: The field can contain anything that makes sense to signify the source of
    the data.
  type: constant_keyword
data_stream.namespace:
  dashed_name: data-stream-namespace
  description: "A user defined namespace. Namespaces are useful to allow grouping\
    \ of data.\nMany users already organize their indices this way, and the data stream\
    \ naming scheme now provides this best practice as a default. Many users will\
    \ populate this field with `default`. If no value is used, it falls back to `default`.\n\
    Beyond the Elasticsearch index naming criteria noted above, `namespace` value\
    \ has the additional restrictions:\n  * Must not contain `-`\n  * No longer than\
    \ 100 characters"
  example: production
  flat_name: data_stream.namespace
  level: extended
  name: namespace
  normalize: []
  short: A user defined namespace. Namespaces are useful to allow grouping of data.
  type: constant_keyword
data_stream.type:
  dashed_name: data-stream-type
  description: 'An overarching type for the data stream.

    Currently allowed values are "logs" and "metrics". We expect to also add "traces"
    and "synthetics" in the near future.'
  example: logs
  flat_name: data_stream.type
  level: extended
  name: type
  normalize: []
  short: An overarching type for the data stream.
  type: constant_keyword
destination.address:
  dashed_name: destination-address
  description: 'Some event destination addresses are defined ambiguously. The event
    will sometimes list an IP, a domain or a unix socket.  You should always store
    the raw address in the `.address` field.

    Then it should be duplicated to `.ip` or `.domain`, depending on which one it
    is.'
  flat_name: destination.address
  ignore_above: 1024
  level: extended
  name: address
  normalize: []
  short: Destination network address.
  type: keyword
destination.as.number:
  dashed_name: destination-as-number
  description: Unique number allocated to the autonomous system. The autonomous system
    number (ASN) uniquely identifies each network on the Internet.
  example: 15169
  flat_name: destination.as.number
  level: extended
  name: number
  normalize: []
  original_fieldset: as
  short: Unique number allocated to the autonomous system.
  type: long
destination.as.organization.name:
  dashed_name: destination-as-organization-name
  description: Organization name.
  example: Google LLC
  flat_name: destination.as.organization.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: destination.as.organization.name.text
    name: text
    type: match_only_text
  name: organization.name
  normalize: []
  original_fieldset: as
  short: Organization name.
  type: keyword
destination.bytes:
  dashed_name: destination-bytes
  description: Bytes sent from the destination to the source.
  example: 184
  flat_name: destination.bytes
  format: bytes
  level: core
  name: bytes
  normalize: []
  short: Bytes sent from the destination to the source.
  type: long
destination.domain:
  dashed_name: destination-domain
  description: 'The domain name of the destination system.

    This value may be a host name, a fully qualified domain name, or another host
    naming format. The value may derive from the original event or be added from enrichment.'
  example: foo.example.com
  flat_name: destination.domain
  ignore_above: 1024
  level: core
  name: domain
  normalize: []
  short: The domain name of the destination.
  type: keyword
destination.geo.city_name:
  dashed_name: destination-geo-city-name
  description: City name.
  example: Montreal
  flat_name: destination.geo.city_name
  ignore_above: 1024
  level: core
  name: city_name
  normalize: []
  original_fieldset: geo
  short: City name.
  type: keyword
destination.geo.continent_code:
  dashed_name: destination-geo-continent-code
  description: Two-letter code representing continent's name.
  example: NA
  flat_name: destination.geo.continent_code
  ignore_above: 1024
  level: core
  name: continent_code
  normalize: []
  original_fieldset: geo
  short: Continent code.
  type: keyword
destination.geo.continent_name:
  dashed_name: destination-geo-continent-name
  description: Name of the continent.
  example: North America
  flat_name: destination.geo.continent_name
  ignore_above: 1024
  level: core
  name: continent_name
  normalize: []
  original_fieldset: geo
  short: Name of the continent.
  type: keyword
destination.geo.country_iso_code:
  dashed_name: destination-geo-country-iso-code
  description: Country ISO code.
  example: CA
  flat_name: destination.geo.country_iso_code
  ignore_above: 1024
  level: core
  name: country_iso_code
  normalize: []
  original_fieldset: geo
  short: Country ISO code.
  type: keyword
destination.geo.country_name:
  dashed_name: destination-geo-country-name
  description: Country name.
  example: Canada
  flat_name: destination.geo.country_name
  ignore_above: 1024
  level: core
  name: country_name
  normalize: []
  original_fieldset: geo
  short: Country name.
  type: keyword
destination.geo.location:
  dashed_name: destination-geo-location
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  flat_name: destination.geo.location
  level: core
  name: location
  normalize: []
  original_fieldset: geo
  short: Longitude and latitude.
  type: geo_point
destination.geo.name:
  dashed_name: destination-geo-name
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  flat_name: destination.geo.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: geo
  short: User-defined description of a location.
  type: keyword
destination.geo.postal_code:
  dashed_name: destination-geo-postal-code
  description: 'Postal code associated with the location.

    Values appropriate for this field may also be known as a postcode or ZIP code
    and will vary widely from country to country.'
  example: 94040
  flat_name: destination.geo.postal_code
  ignore_above: 1024
  level: core
  name: postal_code
  normalize: []
  original_fieldset: geo
  short: Postal code.
  type: keyword
destination.geo.region_iso_code:
  dashed_name: destination-geo-region-iso-code
  description: Region ISO code.
  example: CA-QC
  flat_name: destination.geo.region_iso_code
  ignore_above: 1024
  level: core
  name: region_iso_code
  normalize: []
  original_fieldset: geo
  short: Region ISO code.
  type: keyword
destination.geo.region_name:
  dashed_name: destination-geo-region-name
  description: Region name.
  example: Quebec
  flat_name: destination.geo.region_name
  ignore_above: 1024
  level: core
  name: region_name
  normalize: []
  original_fieldset: geo
  short: Region name.
  type: keyword
destination.geo.timezone:
  dashed_name: destination-geo-timezone
  description: The time zone of the location, such as IANA time zone name.
  example: America/Argentina/Buenos_Aires
  flat_name: destination.geo.timezone
  ignore_above: 1024
  level: core
  name: timezone
  normalize: []
  original_fieldset: geo
  short: Time zone.
  type: keyword
destination.ip:
  dashed_name: destination-ip
  description: IP address of the destination (IPv4 or IPv6).
  flat_name: destination.ip
  level: core
  name: ip
  normalize: []
  short: IP address of the destination.
  type: ip
destination.mac:
  dashed_name: destination-mac
  description: 'MAC address of the destination.

    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte)
    is represented by two [uppercase] hexadecimal digits giving the value of the octet
    as an unsigned integer. Successive octets are separated by a hyphen.'
  example: 00-00-5E-00-53-23
  flat_name: destination.mac
  ignore_above: 1024
  level: core
  name: mac
  normalize: []
  pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
  short: MAC address of the destination.
  type: keyword
destination.nat.ip:
  dashed_name: destination-nat-ip
  description: 'Translated ip of destination based NAT sessions (e.g. internet to
    private DMZ)

    Typically used with load balancers, firewalls, or routers.'
  flat_name: destination.nat.ip
  level: extended
  name: nat.ip
  normalize: []
  short: Destination NAT ip
  type: ip
destination.nat.port:
  dashed_name: destination-nat-port
  description: 'Port the source session is translated to by NAT Device.

    Typically used with load balancers, firewalls, or routers.'
  flat_name: destination.nat.port
  format: string
  level: extended
  name: nat.port
  normalize: []
  short: Destination NAT Port
  type: long
destination.packets:
  dashed_name: destination-packets
  description: Packets sent from the destination to the source.
  example: 12
  flat_name: destination.packets
  level: core
  name: packets
  normalize: []
  short: Packets sent from the destination to the source.
  type: long
destination.port:
  dashed_name: destination-port
  description: Port of the destination.
  flat_name: destination.port
  format: string
  level: core
  name: port
  normalize: []
  short: Port of the destination.
  type: long
destination.registered_domain:
  dashed_name: destination-registered-domain
  description: 'The highest registered destination domain, stripped of the subdomain.

    For example, the registered domain for "foo.example.com" is "example.com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    two labels will not work well for TLDs such as "co.uk".'
  example: example.com
  flat_name: destination.registered_domain
  ignore_above: 1024
  level: extended
  name: registered_domain
  normalize: []
  short: The highest registered destination domain, stripped of the subdomain.
  type: keyword
destination.subdomain:
  dashed_name: destination-subdomain
  description: 'The subdomain portion of a fully qualified domain name includes all
    of the names except the host name under the registered_domain.  In a partially
    qualified domain, or if the the qualification level of the full name cannot be
    determined, subdomain contains all of the names below the registered domain.

    For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the
    domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the
    subdomain field should contain "sub2.sub1", with no trailing period.'
  example: east
  flat_name: destination.subdomain
  ignore_above: 1024
  level: extended
  name: subdomain
  normalize: []
  short: The subdomain of the domain.
  type: keyword
destination.top_level_domain:
  dashed_name: destination-top-level-domain
  description: 'The effective top level domain (eTLD), also known as the domain suffix,
    is the last part of the domain name. For example, the top level domain for example.com
    is "com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    label will not work well for effective TLDs such as "co.uk".'
  example: co.uk
  flat_name: destination.top_level_domain
  ignore_above: 1024
  level: extended
  name: top_level_domain
  normalize: []
  short: The effective top level domain (com, org, net, co.uk).
  type: keyword
destination.user.domain:
  dashed_name: destination-user-domain
  description: 'Name of the directory the user is a member of.

    For example, an LDAP or Active Directory domain name.'
  flat_name: destination.user.domain
  ignore_above: 1024
  level: extended
  name: domain
  normalize: []
  original_fieldset: user
  short: Name of the directory the user is a member of.
  type: keyword
destination.user.email:
  dashed_name: destination-user-email
  description: User email address.
  flat_name: destination.user.email
  ignore_above: 1024
  level: extended
  name: email
  normalize: []
  original_fieldset: user
  short: User email address.
  type: keyword
destination.user.full_name:
  dashed_name: destination-user-full-name
  description: User's full name, if available.
  example: Albert Einstein
  flat_name: destination.user.full_name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: destination.user.full_name.text
    name: text
    type: match_only_text
  name: full_name
  normalize: []
  original_fieldset: user
  short: User's full name, if available.
  type: keyword
destination.user.group.domain:
  dashed_name: destination-user-group-domain
  description: 'Name of the directory the group is a member of.

    For example, an LDAP or Active Directory domain name.'
  flat_name: destination.user.group.domain
  ignore_above: 1024
  level: extended
  name: domain
  normalize: []
  original_fieldset: group
  short: Name of the directory the group is a member of.
  type: keyword
destination.user.group.id:
  dashed_name: destination-user-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: destination.user.group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
destination.user.group.name:
  dashed_name: destination-user-group-name
  description: Name of the group.
  flat_name: destination.user.group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
destination.user.hash:
  dashed_name: destination-user-hash
  description: 'Unique user hash to correlate information for a user in anonymized
    form.

    Useful if `user.id` or `user.name` contain confidential information and cannot
    be used.'
  flat_name: destination.user.hash
  ignore_above: 1024
  level: extended
  name: hash
  normalize: []
  original_fieldset: user
  short: Unique user hash to correlate information for a user in anonymized form.
  type: keyword
destination.user.id:
  dashed_name: destination-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: destination.user.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
destination.user.name:
  dashed_name: destination-user-name
  description: Short name or login of the user.
  example: a.einstein
  flat_name: destination.user.name
  ignore_above: 1024
  level: core
  multi_fields:
  - flat_name: destination.user.name.text
    name: text
    type: match_only_text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
destination.user.roles:
  dashed_name: destination-user-roles
  description: Array of user roles at the time of the event.
  example: '["kibana_admin", "reporting_user"]'
  flat_name: destination.user.roles
  ignore_above: 1024
  level: extended
  name: roles
  normalize:
  - array
  original_fieldset: user
  short: Array of user roles at the time of the event.
  type: keyword
dll.code_signature.digest_algorithm:
  dashed_name: dll-code-signature-digest-algorithm
  description: 'The hashing algorithm used to sign the process.

    This value can distinguish signatures when a file is signed multiple times by
    the same signer but with a different digest algorithm.'
  example: sha256
  flat_name: dll.code_signature.digest_algorithm
  ignore_above: 1024
  level: extended
  name: digest_algorithm
  normalize: []
  original_fieldset: code_signature
  short: Hashing algorithm used to sign the process.
  type: keyword
dll.code_signature.exists:
  dashed_name: dll-code-signature-exists
  description: Boolean to capture if a signature is present.
  example: 'true'
  flat_name: dll.code_signature.exists
  level: core
  name: exists
  normalize: []
  original_fieldset: code_signature
  short: Boolean to capture if a signature is present.
  type: boolean
dll.code_signature.signing_id:
  dashed_name: dll-code-signature-signing-id
  description: 'The identifier used to sign the process.

    This is used to identify the application manufactured by a software vendor. The
    field is relevant to Apple *OS only.'
  example: com.apple.xpc.proxy
  flat_name: dll.code_signature.signing_id
  ignore_above: 1024
  level: extended
  name: signing_id
  normalize: []
  original_fieldset: code_signature
  short: The identifier used to sign the process.
  type: keyword
dll.code_signature.status:
  dashed_name: dll-code-signature-status
  description: 'Additional information about the certificate status.

    This is useful for logging cryptographic errors with the certificate validity
    or trust status. Leave unpopulated if the validity or trust of the certificate
    was unchecked.'
  example: ERROR_UNTRUSTED_ROOT
  flat_name: dll.code_signature.status
  ignore_above: 1024
  level: extended
  name: status
  normalize: []
  original_fieldset: code_signature
  short: Additional information about the certificate status.
  type: keyword
dll.code_signature.subject_name:
  dashed_name: dll-code-signature-subject-name
  description: Subject name of the code signer
  example: Microsoft Corporation
  flat_name: dll.code_signature.subject_name
  ignore_above: 1024
  level: core
  name: subject_name
  normalize: []
  original_fieldset: code_signature
  short: Subject name of the code signer
  type: keyword
dll.code_signature.team_id:
  dashed_name: dll-code-signature-team-id
  description: 'The team identifier used to sign the process.

    This is used to identify the team or vendor of a software product. The field is
    relevant to Apple *OS only.'
  example: EQHXZ8M8AV
  flat_name: dll.code_signature.team_id
  ignore_above: 1024
  level: extended
  name: team_id
  normalize: []
  original_fieldset: code_signature
  short: The team identifier used to sign the process.
  type: keyword
dll.code_signature.timestamp:
  dashed_name: dll-code-signature-timestamp
  description: Date and time when the code signature was generated and signed.
  example: '2021-01-01T12:10:30Z'
  flat_name: dll.code_signature.timestamp
  level: extended
  name: timestamp
  normalize: []
  original_fieldset: code_signature
  short: When the signature was generated and signed.
  type: date
dll.code_signature.trusted:
  dashed_name: dll-code-signature-trusted
  description: 'Stores the trust status of the certificate chain.

    Validating the trust of the certificate chain may be complicated, and this field
    should only be populated by tools that actively check the status.'
  example: 'true'
  flat_name: dll.code_signature.trusted
  level: extended
  name: trusted
  normalize: []
  original_fieldset: code_signature
  short: Stores the trust status of the certificate chain.
  type: boolean
dll.code_signature.valid:
  dashed_name: dll-code-signature-valid
  description: 'Boolean to capture if the digital signature is verified against the
    binary content.

    Leave unpopulated if a certificate was unchecked.'
  example: 'true'
  flat_name: dll.code_signature.valid
  level: extended
  name: valid
  normalize: []
  original_fieldset: code_signature
  short: Boolean to capture if the digital signature is verified against the binary
    content.
  type: boolean
dll.hash.md5:
  dashed_name: dll-hash-md5
  description: MD5 hash.
  flat_name: dll.hash.md5
  ignore_above: 1024
  level: extended
  name: md5
  normalize: []
  original_fieldset: hash
  short: MD5 hash.
  type: keyword
dll.hash.sha1:
  dashed_name: dll-hash-sha1
  description: SHA1 hash.
  flat_name: dll.hash.sha1
  ignore_above: 1024
  level: extended
  name: sha1
  normalize: []
  original_fieldset: hash
  short: SHA1 hash.
  type: keyword
dll.hash.sha256:
  dashed_name: dll-hash-sha256
  description: SHA256 hash.
  flat_name: dll.hash.sha256
  ignore_above: 1024
  level: extended
  name: sha256
  normalize: []
  original_fieldset: hash
  short: SHA256 hash.
  type: keyword
dll.hash.sha384:
  dashed_name: dll-hash-sha384
  description: SHA384 hash.
  flat_name: dll.hash.sha384
  ignore_above: 1024
  level: extended
  name: sha384
  normalize: []
  original_fieldset: hash
  short: SHA384 hash.
  type: keyword
dll.hash.sha512:
  dashed_name: dll-hash-sha512
  description: SHA512 hash.
  flat_name: dll.hash.sha512
  ignore_above: 1024
  level: extended
  name: sha512
  normalize: []
  original_fieldset: hash
  short: SHA512 hash.
  type: keyword
dll.hash.ssdeep:
  dashed_name: dll-hash-ssdeep
  description: SSDEEP hash.
  flat_name: dll.hash.ssdeep
  ignore_above: 1024
  level: extended
  name: ssdeep
  normalize: []
  original_fieldset: hash
  short: SSDEEP hash.
  type: keyword
dll.hash.tlsh:
  dashed_name: dll-hash-tlsh
  description: TLSH hash.
  flat_name: dll.hash.tlsh
  ignore_above: 1024
  level: extended
  name: tlsh
  normalize: []
  original_fieldset: hash
  short: TLSH hash.
  type: keyword
dll.name:
  dashed_name: dll-name
  description: 'Name of the library.

    This generally maps to the name of the file on disk.'
  example: kernel32.dll
  flat_name: dll.name
  ignore_above: 1024
  level: core
  name: name
  normalize: []
  short: Name of the library.
  type: keyword
dll.path:
  dashed_name: dll-path
  description: Full file path of the library.
  example: C:\Windows\System32\kernel32.dll
  flat_name: dll.path
  ignore_above: 1024
  level: extended
  name: path
  normalize: []
  short: Full file path of the library.
  type: keyword
dll.pe.architecture:
  dashed_name: dll-pe-architecture
  description: CPU architecture target for the file.
  example: x64
  flat_name: dll.pe.architecture
  ignore_above: 1024
  level: extended
  name: architecture
  normalize: []
  original_fieldset: pe
  short: CPU architecture target for the file.
  type: keyword
dll.pe.company:
  dashed_name: dll-pe-company
  description: Internal company name of the file, provided at compile-time.
  example: Microsoft Corporation
  flat_name: dll.pe.company
  ignore_above: 1024
  level: extended
  name: company
  normalize: []
  original_fieldset: pe
  short: Internal company name of the file, provided at compile-time.
  type: keyword
dll.pe.description:
  dashed_name: dll-pe-description
  description: Internal description of the file, provided at compile-time.
  example: Paint
  flat_name: dll.pe.description
  ignore_above: 1024
  level: extended
  name: description
  normalize: []
  original_fieldset: pe
  short: Internal description of the file, provided at compile-time.
  type: keyword
dll.pe.file_version:
  dashed_name: dll-pe-file-version
  description: Internal version of the file, provided at compile-time.
  example: 6.3.9600.17415
  flat_name: dll.pe.file_version
  ignore_above: 1024
  level: extended
  name: file_version
  normalize: []
  original_fieldset: pe
  short: Process name.
  type: keyword
dll.pe.imphash:
  dashed_name: dll-pe-imphash
  description: 'A hash of the imports in a PE file. An imphash -- or import hash --
    can be used to fingerprint binaries even after recompilation or other code-level
    transformations have occurred, which would change more traditional hash values.

    Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
  example: 0c6803c4e922103c4dca5963aad36ddf
  flat_name: dll.pe.imphash
  ignore_above: 1024
  level: extended
  name: imphash
  normalize: []
  original_fieldset: pe
  short: A hash of the imports in a PE file.
  type: keyword
dll.pe.original_file_name:
  dashed_name: dll-pe-original-file-name
  description: Internal name of the file, provided at compile-time.
  example: MSPAINT.EXE
  flat_name: dll.pe.original_file_name
  ignore_above: 1024
  level: extended
  name: original_file_name
  normalize: []
  original_fieldset: pe
  short: Internal name of the file, provided at compile-time.
  type: keyword
dll.pe.pehash:
  dashed_name: dll-pe-pehash
  description: 'A hash of the PE header and data from one or more PE sections. An
    pehash can be used to cluster files by transforming structural information about
    a file into a hash value.

    Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
  example: 73ff189b63cd6be375a7ff25179a38d347651975
  flat_name: dll.pe.pehash
  ignore_above: 1024
  level: extended
  name: pehash
  normalize: []
  original_fieldset: pe
  short: A hash of the PE header and data from one or more PE sections.
  type: keyword
dll.pe.product:
  dashed_name: dll-pe-product
  description: Internal product name of the file, provided at compile-time.
  example: "Microsoft\xAE Windows\xAE Operating System"
  flat_name: dll.pe.product
  ignore_above: 1024
  level: extended
  name: product
  normalize: []
  original_fieldset: pe
  short: Internal product name of the file, provided at compile-time.
  type: keyword
dns.answers:
  dashed_name: dns-answers
  description: 'An array containing an object for each answer section returned by
    the server.

    The main keys that should be present in these objects are defined by ECS. Records
    that have more information may contain more keys than what ECS defines.

    Not all DNS data sources give all details about DNS answers. At minimum, answer
    objects must contain the `data` key. If more information is available, map as
    much of it to ECS as possible, and add any additional fields to the answer objects
    as custom fields.'
  flat_name: dns.answers
  level: extended
  name: answers
  normalize:
  - array
  short: Array of DNS answers.
  type: object
dns.answers.class:
  dashed_name: dns-answers-class
  description: The class of DNS data contained in this resource record.
  example: IN
  flat_name: dns.answers.class
  ignore_above: 1024
  level: extended
  name: answers.class
  normalize: []
  short: The class of DNS data contained in this resource record.
  type: keyword
dns.answers.data:
  dashed_name: dns-answers-data
  description: 'The data describing the resource.

    The meaning of this data depends on the type and class of the resource record.'
  example: 10.10.10.10
  flat_name: dns.answers.data
  ignore_above: 1024
  level: extended
  name: answers.data
  normalize: []
  short: The data describing the resource.
  type: keyword
dns.answers.name:
  dashed_name: dns-answers-name
  description: 'The domain name to which this resource record pertains.

    If a chain of CNAME is being resolved, each answer''s `name` should be the one
    that corresponds with the answer''s `data`. It should not simply be the original
    `question.name` repeated.'
  example: www.example.com
  flat_name: dns.answers.name
  ignore_above: 1024
  level: extended
  name: answers.name
  normalize: []
  short: The domain name to which this resource record pertains.
  type: keyword
dns.answers.ttl:
  dashed_name: dns-answers-ttl
  description: The time interval in seconds that this resource record may be cached
    before it should be discarded. Zero values mean that the data should not be cached.
  example: 180
  flat_name: dns.answers.ttl
  level: extended
  name: answers.ttl
  normalize: []
  short: The time interval in seconds that this resource record may be cached before
    it should be discarded.
  type: long
dns.answers.type:
  dashed_name: dns-answers-type
  description: The type of data contained in this resource record.
  example: CNAME
  flat_name: dns.answers.type
  ignore_above: 1024
  level: extended
  name: answers.type
  normalize: []
  short: The type of data contained in this resource record.
  type: keyword
dns.header_flags:
  dashed_name: dns-header-flags
  description: 'Array of 2 letter DNS header flags.

    Expected values are: AA, TC, RD, RA, AD, CD, DO.'
  example: '["RD", "RA"]'
  flat_name: dns.header_flags
  ignore_above: 1024
  level: extended
  name: header_flags
  normalize:
  - array
  short: Array of DNS header flags.
  type: keyword
dns.id:
  dashed_name: dns-id
  description: The DNS packet identifier assigned by the program that generated the
    query. The identifier is copied to the response.
  example: 62111
  flat_name: dns.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  short: The DNS packet identifier assigned by the program that generated the query.
    The identifier is copied to the response.
  type: keyword
dns.op_code:
  dashed_name: dns-op-code
  description: The DNS operation code that specifies the kind of query in the message.
    This value is set by the originator of a query and copied into the response.
  example: QUERY
  flat_name: dns.op_code
  ignore_above: 1024
  level: extended
  name: op_code
  normalize: []
  short: The DNS operation code that specifies the kind of query in the message.
  type: keyword
dns.question.class:
  dashed_name: dns-question-class
  description: The class of records being queried.
  example: IN
  flat_name: dns.question.class
  ignore_above: 1024
  level: extended
  name: question.class
  normalize: []
  short: The class of records being queried.
  type: keyword
dns.question.name:
  dashed_name: dns-question-name
  description: 'The name being queried.

    If the name field contains non-printable characters (below 32 or above 126), those
    characters should be represented as escaped base 10 integers (\DDD). Back slashes
    and quotes should be escaped. Tabs, carriage returns, and line feeds should be
    converted to \t, \r, and \n respectively.'
  example: www.example.com
  flat_name: dns.question.name
  ignore_above: 1024
  level: extended
  name: question.name
  normalize: []
  short: The name being queried.
  type: keyword
dns.question.registered_domain:
  dashed_name: dns-question-registered-domain
  description: 'The highest registered domain, stripped of the subdomain.

    For example, the registered domain for "foo.example.com" is "example.com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    two labels will not work well for TLDs such as "co.uk".'
  example: example.com
  flat_name: dns.question.registered_domain
  ignore_above: 1024
  level: extended
  name: question.registered_domain
  normalize: []
  short: The highest registered domain, stripped of the subdomain.
  type: keyword
dns.question.subdomain:
  dashed_name: dns-question-subdomain
  description: 'The subdomain is all of the labels under the registered_domain.

    If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
    the subdomain field should contain "sub2.sub1", with no trailing period.'
  example: www
  flat_name: dns.question.subdomain
  ignore_above: 1024
  level: extended
  name: question.subdomain
  normalize: []
  short: The subdomain of the domain.
  type: keyword
dns.question.top_level_domain:
  dashed_name: dns-question-top-level-domain
  description: 'The effective top level domain (eTLD), also known as the domain suffix,
    is the last part of the domain name. For example, the top level domain for example.com
    is "com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    label will not work well for effective TLDs such as "co.uk".'
  example: co.uk
  flat_name: dns.question.top_level_domain
  ignore_above: 1024
  level: extended
  name: question.top_level_domain
  normalize: []
  short: The effective top level domain (com, org, net, co.uk).
  type: keyword
dns.question.type:
  dashed_name: dns-question-type
  description: The type of record being queried.
  example: AAAA
  flat_name: dns.question.type
  ignore_above: 1024
  level: extended
  name: question.type
  normalize: []
  short: The type of record being queried.
  type: keyword
dns.resolved_ip:
  dashed_name: dns-resolved-ip
  description: 'Array containing all IPs seen in `answers.data`.

    The `answers` array can be difficult to use, because of the variety of data formats
    it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip`
    makes it possible to index them as IP addresses, and makes them easier to visualize
    and query for.'
  example: '["10.10.10.10", "10.10.10.11"]'
  flat_name: dns.resolved_ip
  level: extended
  name: resolved_ip
  normalize:
  - array
  short: Array containing all IPs seen in answers.data
  type: ip
dns.response_code:
  dashed_name: dns-response-code
  description: The DNS response code.
  example: NOERROR
  flat_name: dns.response_code
  ignore_above: 1024
  level: extended
  name: response_code
  normalize: []
  short: The DNS response code.
  type: keyword
dns.type:
  dashed_name: dns-type
  description: 'The type of DNS event captured, query or answer.

    If your source of DNS events only gives you DNS queries, you should only create
    dns events of type `dns.type:query`.

    If your source of DNS events gives you answers as well, you should create one
    event per query (optionally as soon as the query is seen). And a second event
    containing all query details as well as an array of answers.'
  example: answer
  flat_name: dns.type
  ignore_above: 1024
  level: extended
  name: type
  normalize: []
  short: The type of DNS event captured, query or answer.
  type: keyword
ecs.version:
  dashed_name: ecs-version
  description: 'ECS version this event conforms to. `ecs.version` is a required field
    and must exist in all events.

    When querying across multiple indices -- which may conform to slightly different
    ECS versions -- this field lets integrations adjust to the schema version of the
    events.'
  example: 1.0.0
  flat_name: ecs.version
  ignore_above: 1024
  level: core
  name: version
  normalize: []
  required: true
  short: ECS version this event conforms to.
  type: keyword
email.attachments:
  dashed_name: email-attachments
  description: A list of objects describing the attachment files sent along with an
    email message.
  flat_name: email.attachments
  level: extended
  name: attachments
  normalize:
  - array
  short: List of objects describing the attachments.
  type: nested
email.attachments.file.extension:
  dashed_name: email-attachments-file-extension
  description: Attachment file extension, excluding the leading dot.
  example: txt
  flat_name: email.attachments.file.extension
  ignore_above: 1024
  level: extended
  name: attachments.file.extension
  normalize: []
  short: Attachment file extension.
  type: keyword
email.attachments.file.hash.md5:
  dashed_name: email-attachments-file-hash-md5
  description: MD5 hash.
  flat_name: email.attachments.file.hash.md5
  ignore_above: 1024
  level: extended
  name: md5
  normalize: []
  original_fieldset: hash
  short: MD5 hash.
  type: keyword
email.attachments.file.hash.sha1:
  dashed_name: email-attachments-file-hash-sha1
  description: SHA1 hash.
  flat_name: email.attachments.file.hash.sha1
  ignore_above: 1024
  level: extended
  name: sha1
  normalize: []
  original_fieldset: hash
  short: SHA1 hash.
  type: keyword
email.attachments.file.hash.sha256:
  dashed_name: email-attachments-file-hash-sha256
  description: SHA256 hash.
  flat_name: email.attachments.file.hash.sha256
  ignore_above: 1024
  level: extended
  name: sha256
  normalize: []
  original_fieldset: hash
  short: SHA256 hash.
  type: keyword
email.attachments.file.hash.sha384:
  dashed_name: email-attachments-file-hash-sha384
  description: SHA384 hash.
  flat_name: email.attachments.file.hash.sha384
  ignore_above: 1024
  level: extended
  name: sha384
  normalize: []
  original_fieldset: hash
  short: SHA384 hash.
  type: keyword
email.attachments.file.hash.sha512:
  dashed_name: email-attachments-file-hash-sha512
  description: SHA512 hash.
  flat_name: email.attachments.file.hash.sha512
  ignore_above: 1024
  level: extended
  name: sha512
  normalize: []
  original_fieldset: hash
  short: SHA512 hash.
  type: keyword
email.attachments.file.hash.ssdeep:
  dashed_name: email-attachments-file-hash-ssdeep
  description: SSDEEP hash.
  flat_name: email.attachments.file.hash.ssdeep
  ignore_above: 1024
  level: extended
  name: ssdeep
  normalize: []
  original_fieldset: hash
  short: SSDEEP hash.
  type: keyword
email.attachments.file.hash.tlsh:
  dashed_name: email-attachments-file-hash-tlsh
  description: TLSH hash.
  flat_name: email.attachments.file.hash.tlsh
  ignore_above: 1024
  level: extended
  name: tlsh
  normalize: []
  original_fieldset: hash
  short: TLSH hash.
  type: keyword
email.attachments.file.mime_type:
  dashed_name: email-attachments-file-mime-type
  description: 'The MIME media type of the attachment.

    This value will typically be extracted from the `Content-Type` MIME header field.'
  example: text/plain
  flat_name: email.attachments.file.mime_type
  ignore_above: 1024
  level: extended
  name: attachments.file.mime_type
  normalize: []
  short: MIME type of the attachment file.
  type: keyword
email.attachments.file.name:
  dashed_name: email-attachments-file-name
  description: Name of the attachment file including the file extension.
  example: attachment.txt
  flat_name: email.attachments.file.name
  ignore_above: 1024
  level: extended
  name: attachments.file.name
  normalize: []
  short: Name of the attachment file.
  type: keyword
email.attachments.file.size:
  dashed_name: email-attachments-file-size
  description: Attachment file size in bytes.
  example: 64329
  flat_name: email.attachments.file.size
  level: extended
  name: attachments.file.size
  normalize: []
  short: Attachment file size.
  type: long
email.bcc.address:
  dashed_name: email-bcc-address
  description: The email address of BCC recipient
  example: bcc.user1@example.com
  flat_name: email.bcc.address
  ignore_above: 1024
  level: extended
  name: bcc.address
  normalize:
  - array
  short: Email address of BCC recipient
  type: keyword
email.cc.address:
  dashed_name: email-cc-address
  description: The email address of CC recipient
  example: cc.user1@example.com
  flat_name: email.cc.address
  ignore_above: 1024
  level: extended
  name: cc.address
  normalize:
  - array
  short: Email address of CC recipient
  type: keyword
email.content_type:
  dashed_name: email-content-type
  description: 'Information about how the message is to be displayed.

    Typically a MIME type.'
  example: text/plain
  flat_name: email.content_type
  ignore_above: 1024
  level: extended
  name: content_type
  normalize: []
  short: MIME type of the email message.
  type: keyword
email.delivery_timestamp:
  dashed_name: email-delivery-timestamp
  description: The date and time when the email message was received by the service
    or client.
  example: '2020-11-10T22:12:34.8196921Z'
  flat_name: email.delivery_timestamp
  level: extended
  name: delivery_timestamp
  normalize: []
  short: Date and time when message was delivered.
  type: date
email.direction:
  dashed_name: email-direction
  description: The direction of the message based on the sending and receiving domains.
  example: inbound
  flat_name: email.direction
  ignore_above: 1024
  level: extended
  name: direction
  normalize: []
  short: Direction of the message.
  type: keyword
email.from.address:
  dashed_name: email-from-address
  description: The email address of the sender, typically from the RFC 5322 `From:`
    header field.
  example: sender@example.com
  flat_name: email.from.address
  ignore_above: 1024
  level: extended
  name: from.address
  normalize:
  - array
  short: The sender's email address.
  type: keyword
email.local_id:
  dashed_name: email-local-id
  description: 'Unique identifier given to the email by the source that created the
    event.

    Identifier is not persistent across hops.'
  example: c26dbea0-80d5-463b-b93c-4e8b708219ce
  flat_name: email.local_id
  ignore_above: 1024
  level: extended
  name: local_id
  normalize: []
  short: Unique identifier given by the source.
  type: keyword
email.message_id:
  dashed_name: email-message-id
  description: Identifier from the RFC 5322 `Message-ID:` email header that refers
    to a particular email message.
  example: 81ce15$8r2j59@mail01.example.com
  flat_name: email.message_id
  level: extended
  name: message_id
  normalize: []
  short: Value from the Message-ID header.
  type: wildcard
email.origination_timestamp:
  dashed_name: email-origination-timestamp
  description: The date and time the email message was composed. Many email clients
    will fill in this value automatically when the message is sent by a user.
  example: '2020-11-10T22:12:34.8196921Z'
  flat_name: email.origination_timestamp
  level: extended
  name: origination_timestamp
  normalize: []
  short: Date and time the email was composed.
  type: date
email.reply_to.address:
  dashed_name: email-reply-to-address
  description: The address that replies should be delivered to based on the value
    in the RFC 5322 `Reply-To:` header.
  example: reply.here@example.com
  flat_name: email.reply_to.address
  ignore_above: 1024
  level: extended
  name: reply_to.address
  normalize:
  - array
  short: Address replies should be delivered to.
  type: keyword
email.sender.address:
  dashed_name: email-sender-address
  description: Per RFC 5322, specifies the address responsible for the actual transmission
    of the message.
  flat_name: email.sender.address
  ignore_above: 1024
  level: extended
  name: sender.address
  normalize: []
  short: Address of the message sender.
  type: keyword
email.subject:
  dashed_name: email-subject
  description: A brief summary of the topic of the message.
  example: Please see this important message.
  flat_name: email.subject
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: email.subject.text
    name: text
    type: match_only_text
  name: subject
  normalize: []
  short: The subject of the email message.
  type: keyword
email.to.address:
  dashed_name: email-to-address
  description: The email address of recipient
  example: user1@example.com
  flat_name: email.to.address
  ignore_above: 1024
  level: extended
  name: to.address
  normalize:
  - array
  short: Email address of recipient
  type: keyword
email.x_mailer:
  dashed_name: email-x-mailer
  description: The name of the application that was used to draft and send the original
    email message.
  example: Spambot v2.5
  flat_name: email.x_mailer
  ignore_above: 1024
  level: extended
  name: x_mailer
  normalize: []
  short: Application that drafted email.
  type: keyword
error.code:
  dashed_name: error-code
  description: Error code describing the error.
  flat_name: error.code
  ignore_above: 1024
  level: core
  name: code
  normalize: []
  short: Error code describing the error.
  type: keyword
error.id:
  dashed_name: error-id
  description: Unique identifier for the error.
  flat_name: error.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique identifier for the error.
  type: keyword
error.message:
  dashed_name: error-message
  description: Error message.
  flat_name: error.message
  level: core
  name: message
  normalize: []
  short: Error message.
  type: match_only_text
error.stack_trace:
  dashed_name: error-stack-trace
  description: The stack trace of this error in plain text.
  flat_name: error.stack_trace
  level: extended
  multi_fields:
  - flat_name: error.stack_trace.text
    name: text
    type: match_only_text
  name: stack_trace
  normalize: []
  short: The stack trace of this error in plain text.
  type: wildcard
error.type:
  dashed_name: error-type
  description: The type of the error, for example the class name of the exception.
  example: java.lang.NullPointerException
  flat_name: error.type
  ignore_above: 1024
  level: extended
  name: type
  normalize: []
  short: The type of the error, for example the class name of the exception.
  type: keyword
event.action:
  dashed_name: event-action
  description: 'The action captured by the event.

    This describes the information in the event. It is more specific than `event.category`.
    Examples are `group-add`, `process-started`, `file-created`. The value is normally
    defined by the implementer.'
  example: user-password-change
  flat_name: event.action
  ignore_above: 1024
  level: core
  name: action
  normalize: []
  short: The action captured by the event.
  type: keyword
event.agent_id_status:
  dashed_name: event-agent-id-status
  description: 'Agents are normally responsible for populating the `agent.id` field
    value. If the system receiving events is capable of validating the value based
    on authentication information for the client then this field can be used to reflect
    the outcome of that validation.

    For example if the agent''s connection is authenticated with mTLS and the client
    cert contains the ID of the agent to which the cert was issued then the `agent.id`
    value in events can be checked against the certificate. If the values match then
    `event.agent_id_status: verified` is added to the event, otherwise one of the
    other allowed values should be used.

    If no validation is performed then the field should be omitted.

    The allowed values are:

    `verified` - The `agent.id` field value matches expected value obtained from auth
    metadata.

    `mismatch` - The `agent.id` field value does not match the expected value obtained
    from auth metadata.

    `missing` - There was no `agent.id` field in the event to validate.

    `auth_metadata_missing` - There was no auth metadata or it was missing information
    about the agent ID.'
  example: verified
  flat_name: event.agent_id_status
  ignore_above: 1024
  level: extended
  name: agent_id_status
  normalize: []
  short: Validation status of the event's agent.id field.
  type: keyword
event.category:
  allowed_values:
  - description: Events in this category are related to the challenge and response
      process in which credentials are supplied and verified to allow the creation
      of a session. Common sources for these logs are Windows event logs and ssh logs.
      Visualize and analyze events in this category to look for failed logins, and
      other authentication-related activity.
    expected_event_types:
    - start
    - end
    - info
    name: authentication
  - description: 'Events in the configuration category have to deal with creating,
      modifying, or deleting the settings or parameters of an application, process,
      or system.

      Example sources include security policy change logs, configuration auditing
      logging, and system integrity monitoring.'
    expected_event_types:
    - access
    - change
    - creation
    - deletion
    - info
    name: configuration
  - description: The database category denotes events and metrics relating to a data
      storage and retrieval system. Note that use of this category is not limited
      to relational database systems. Examples include event logs from MS SQL, MySQL,
      Elasticsearch, MongoDB, etc. Use this category to visualize and analyze database
      activity such as accesses and changes.
    expected_event_types:
    - access
    - change
    - info
    - error
    name: database
  - description: 'Events in the driver category have to do with operating system device
      drivers and similar software entities such as Windows drivers, kernel extensions,
      kernel modules, etc.

      Use events and metrics in this category to visualize and analyze driver-related
      activity and status on hosts.'
    expected_event_types:
    - change
    - end
    - info
    - start
    name: driver
  - description: 'This category is used for events relating to email messages, email
      attachments, and email network or protocol activity.

      Emails events can be produced by email security gateways, mail transfer agents,
      email cloud service providers, or mail server monitoring applications.'
    expected_event_types:
    - info
    name: email
  - description: Relating to a set of information that has been created on, or has
      existed on a filesystem. Use this category of events to visualize and analyze
      the creation, access, and deletions of files. Events in this category can come
      from both host-based and network-based sources. An example source of a network-based
      detection of a file transfer would be the Zeek file.log.
    expected_event_types:
    - change
    - creation
    - deletion
    - info
    name: file
  - description: 'Use this category to visualize and analyze information such as host
      inventory or host lifecycle events.

      Most of the events in this category can usually be observed from the outside,
      such as from a hypervisor or a control plane''s point of view. Some can also
      be seen from within, such as "start" or "end".

      Note that this category is for information about hosts themselves; it is not
      meant to capture activity "happening on a host".'
    expected_event_types:
    - access
    - change
    - end
    - info
    - start
    name: host
  - description: Identity and access management (IAM) events relating to users, groups,
      and administration. Use this category to visualize and analyze IAM-related logs
      and data from active directory, LDAP, Okta, Duo, and other IAM systems.
    expected_event_types:
    - admin
    - change
    - creation
    - deletion
    - group
    - info
    - user
    name: iam
  - description: Relating to intrusion detections from IDS/IPS systems and functions,
      both network and host-based. Use this category to visualize and analyze intrusion
      detection alerts from systems such as Snort, Suricata, and Palo Alto threat
      detections.
    expected_event_types:
    - allowed
    - denied
    - info
    name: intrusion_detection
  - description: Malware detection events and alerts. Use this category to visualize
      and analyze malware detections from EDR/EPP systems such as Elastic Endpoint
      Security, Symantec Endpoint Protection, Crowdstrike, and network IDS/IPS systems
      such as Suricata, or other sources of malware-related events such as Palo Alto
      Networks threat logs and Wildfire logs.
    expected_event_types:
    - info
    name: malware
  - description: Relating to all network activity, including network connection lifecycle,
      network traffic, and essentially any event that includes an IP address. Many
      events containing decoded network protocol transactions fit into this category.
      Use events in this category to visualize or analyze counts of network ports,
      protocols, addresses, geolocation information, etc.
    expected_event_types:
    - access
    - allowed
    - connection
    - denied
    - end
    - info
    - protocol
    - start
    name: network
  - description: Relating to software packages installed on hosts. Use this category
      to visualize and analyze inventory of software installed on various hosts, or
      to determine host vulnerability in the absence of vulnerability scan data.
    expected_event_types:
    - access
    - change
    - deletion
    - info
    - installation
    - start
    name: package
  - description: Use this category of events to visualize and analyze process-specific
      information such as lifecycle events or process ancestry.
    expected_event_types:
    - access
    - change
    - end
    - info
    - start
    name: process
  - description: Having to do with settings and assets stored in the Windows registry.
      Use this category to visualize and analyze activity such as registry access
      and modifications.
    expected_event_types:
    - access
    - change
    - creation
    - deletion
    name: registry
  - description: The session category is applied to events and metrics regarding logical
      persistent connections to hosts and services. Use this category to visualize
      and analyze interactive or automated persistent connections between assets.
      Data for this category may come from Windows Event logs, SSH logs, or stateless
      sessions such as HTTP cookie-based sessions, etc.
    expected_event_types:
    - start
    - end
    - info
    name: session
  - description: Use this category to visualize and analyze events describing threat
      actors' targets, motives, or behaviors.
    expected_event_types:
    - indicator
    name: threat
  - description: 'Relating to web server access. Use this category to create a dashboard
      of web server/proxy activity from apache, IIS, nginx web servers, etc. Note:
      events from network observers such as Zeek http log may also be included in
      this category.'
    expected_event_types:
    - access
    - error
    - info
    name: web
  dashed_name: event-category
  description: 'This is one of four ECS Categorization Fields, and indicates the second
    level in the ECS category hierarchy.

    `event.category` represents the "big buckets" of ECS categories. For example,
    filtering on `event.category:process` yields all events relating to process activity.
    This field is closely related to `event.type`, which is used as a subcategory.

    This field is an array. This will allow proper categorization of some events that
    fall in multiple categories.'
  example: authentication
  flat_name: event.category
  ignore_above: 1024
  level: core
  name: category
  normalize:
  - array
  short: Event category. The second categorization field in the hierarchy.
  type: keyword
event.code:
  dashed_name: event-code
  description: 'Identification code for this event, if one exists.

    Some event sources use event codes to identify messages unambiguously, regardless
    of message language or wording adjustments over time. An example of this is the
    Windows Event ID.'
  example: 4648
  flat_name: event.code
  ignore_above: 1024
  level: extended
  name: code
  normalize: []
  short: Identification code for this event.
  type: keyword
event.created:
  dashed_name: event-created
  description: 'event.created contains the date/time when the event was first read
    by an agent, or by your pipeline.

    This field is distinct from @timestamp in that @timestamp typically contain the
    time extracted from the original event.

    In most situations, these two timestamps will be slightly different. The difference
    can be used to calculate the delay between your source generating an event, and
    the time when your agent first processed it. This can be used to monitor your
    agent''s or pipeline''s ability to keep up with your event source.

    In case the two timestamps are identical, @timestamp should be used.'
  example: '2016-05-23T08:05:34.857Z'
  flat_name: event.created
  level: core
  name: created
  normalize: []
  short: Time when the event was first read by an agent or by your pipeline.
  type: date
event.dataset:
  dashed_name: event-dataset
  description: 'Name of the dataset.

    If an event source publishes more than one type of log or events (e.g. access
    log, error log), the dataset is used to specify which one the event comes from.

    It''s recommended but not required to start the dataset name with the module name,
    followed by a dot, then the dataset name.'
  example: apache.access
  flat_name: event.dataset
  ignore_above: 1024
  level: core
  name: dataset
  normalize: []
  short: Name of the dataset.
  type: keyword
event.duration:
  dashed_name: event-duration
  description: 'Duration of the event in nanoseconds.

    If event.start and event.end are known this value should be the difference between
    the end and start time.'
  flat_name: event.duration
  format: duration
  input_format: nanoseconds
  level: core
  name: duration
  normalize: []
  output_format: asMilliseconds
  output_precision: 1
  short: Duration of the event in nanoseconds.
  type: long
event.end:
  dashed_name: event-end
  description: event.end contains the date when the event ended or when the activity
    was last observed.
  flat_name: event.end
  level: extended
  name: end
  normalize: []
  short: event.end contains the date when the event ended or when the activity was
    last observed.
  type: date
event.hash:
  dashed_name: event-hash
  description: Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate
    log integrity.
  example: 123456789012345678901234567890ABCD
  flat_name: event.hash
  ignore_above: 1024
  level: extended
  name: hash
  normalize: []
  short: Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate
    log integrity.
  type: keyword
event.id:
  dashed_name: event-id
  description: Unique ID to describe the event.
  example: 8a4f500d
  flat_name: event.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique ID to describe the event.
  type: keyword
event.ingested:
  dashed_name: event-ingested
  description: 'Timestamp when an event arrived in the central data store.

    This is different from `@timestamp`, which is when the event originally occurred.  It''s
    also different from `event.created`, which is meant to capture the first time
    an agent saw the event.

    In normal conditions, assuming no tampering, the timestamps should chronologically
    look like this: `@timestamp` < `event.created` < `event.ingested`.'
  example: '2016-05-23T08:05:35.101Z'
  flat_name: event.ingested
  level: core
  name: ingested
  normalize: []
  short: Timestamp when an event arrived in the central data store.
  type: date
event.kind:
  allowed_values:
  - description: 'This value indicates an event such as an alert or notable event,
      triggered by a detection rule executing externally to the Elastic Stack.

      `event.kind:alert` is often populated for events coming from firewalls, intrusion
      detection systems, endpoint detection and response systems, and so on.

      This value is not used by Elastic solutions for alert documents that are created
      by rules executing within the Kibana alerting framework.'
    name: alert
  - description: 'The `enrichment` value indicates an event collected to provide additional
      context, often to other events.

      An example is collecting indicators of compromise (IOCs) from a threat intelligence
      provider with the intent to use those values to enrich other events. The IOC
      events from the intelligence provider should be categorized as `event.kind:enrichment`.'
    name: enrichment
  - description: This value is the most general and most common value for this field.
      It is used to represent events that indicate that something happened.
    name: event
  - description: 'This value is used to indicate that this event describes a numeric
      measurement taken at given point in time.

      Examples include CPU utilization, memory usage, or device temperature.

      Metric events are often collected on a predictable frequency, such as once every
      few seconds, or once a minute, but can also be used to describe ad-hoc numeric
      metric queries.'
    name: metric
  - description: 'The state value is similar to metric, indicating that this event
      describes a measurement taken at given point in time, except that the measurement
      does not result in a numeric value, but rather one of a fixed set of categorical
      values that represent conditions or states.

      Examples include periodic events reporting Elasticsearch cluster state (green/yellow/red),
      the state of a TCP connection (open, closed, fin_wait, etc.), the state of a
      host with respect to a software vulnerability (vulnerable, not vulnerable),
      and the state of a system regarding compliance with a regulatory standard (compliant,
      not compliant).

      Note that an event that describes a change of state would not use `event.kind:state`,
      but instead would use ''event.kind:event'' since a state change fits the more
      general event definition of something that happened.

      State events are often collected on a predictable frequency, such as once every
      few seconds, once a minute, once an hour, or once a day, but can also be used
      to describe ad-hoc state queries.'
    name: state
  - description: This value indicates that an error occurred during the ingestion
      of this event, and that event data may be missing, inconsistent, or incorrect.
      `event.kind:pipeline_error` is often associated with parsing errors.
    name: pipeline_error
  - description: 'This value is used by Elastic solutions (e.g., Security, Observability)
      for alert documents that are created by rules executing within the Kibana alerting
      framework.

      Usage of this value is reserved, and data ingestion pipelines must not populate
      `event.kind` with the value "signal".'
    name: signal
  dashed_name: event-kind
  description: 'This is one of four ECS Categorization Fields, and indicates the highest
    level in the ECS category hierarchy.

    `event.kind` gives high-level information about what type of information the event
    contains, without being specific to the contents of the event. For example, values
    of this field distinguish alert events from metric events.

    The value of this field can be used to inform how these kinds of events should
    be handled. They may warrant different retention, different access control, it
    may also help understand whether the data coming in at a regular interval or not.'
  example: alert
  flat_name: event.kind
  ignore_above: 1024
  level: core
  name: kind
  normalize: []
  short: The kind of the event. The highest categorization field in the hierarchy.
  type: keyword
event.module:
  dashed_name: event-module
  description: 'Name of the module this data is coming from.

    If your monitoring agent supports the concept of modules or plugins to process
    events of a given source (e.g. Apache logs), `event.module` should contain the
    name of this module.'
  example: apache
  flat_name: event.module
  ignore_above: 1024
  level: core
  name: module
  normalize: []
  short: Name of the module this data is coming from.
  type: keyword
event.original:
  dashed_name: event-original
  description: 'Raw text message of entire event. Used to demonstrate log integrity
    or where the full log message (before splitting it up in multiple parts) may be
    required, e.g. for reindex.

    This field is not indexed and doc_values are disabled. It cannot be searched,
    but it can be retrieved from `_source`. If users wish to override this and index
    this field, please see `Field data types` in the `Elasticsearch Reference`.'
  doc_values: false
  example: Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124;
    worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232
  flat_name: event.original
  index: false
  level: core
  name: original
  normalize: []
  short: Raw text message of entire event.
  type: keyword
event.outcome:
  allowed_values:
  - description: Indicates that this event describes a failed result. A common example
      is `event.category:file AND event.type:access AND event.outcome:failure` to
      indicate that a file access was attempted, but was not successful.
    name: failure
  - description: Indicates that this event describes a successful result. A common
      example is `event.category:file AND event.type:create AND event.outcome:success`
      to indicate that a file was successfully created.
    name: success
  - description: Indicates that this event describes only an attempt for which the
      result is unknown from the perspective of the event producer. For example, if
      the event contains information only about the request side of a transaction
      that results in a response, populating `event.outcome:unknown` in the request
      event is appropriate. The unknown value should not be used when an outcome doesn't
      make logical sense for the event. In such cases `event.outcome` should not be
      populated.
    name: unknown
  dashed_name: event-outcome
  description: 'This is one of four ECS Categorization Fields, and indicates the lowest
    level in the ECS category hierarchy.

    `event.outcome` simply denotes whether the event represents a success or a failure
    from the perspective of the entity that produced the event.

    Note that when a single transaction is described in multiple events, each event
    may populate different values of `event.outcome`, according to their perspective.

    Also note that in the case of a compound event (a single event that contains multiple
    logical events), this field should be populated with the value that best captures
    the overall success or failure from the perspective of the event producer.

    Further note that not all events will have an associated outcome. For example,
    this field is generally not populated for metric events, events with `event.type:info`,
    or any events for which an outcome does not make logical sense.'
  example: success
  flat_name: event.outcome
  ignore_above: 1024
  level: core
  name: outcome
  normalize: []
  short: The outcome of the event. The lowest level categorization field in the hierarchy.
  type: keyword
event.provider:
  dashed_name: event-provider
  description: 'Source of the event.

    Event transports such as Syslog or the Windows Event Log typically mention the
    source of an event. It can be the name of the software that generated the event
    (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).'
  example: kernel
  flat_name: event.provider
  ignore_above: 1024
  level: extended
  name: provider
  normalize: []
  short: Source of the event.
  type: keyword
event.reason:
  dashed_name: event-reason
  description: 'Reason why this event happened, according to the source.

    This describes the why of a particular action or outcome captured in the event.
    Where `event.action` captures the action from the event, `event.reason` describes
    why that action was taken. For example, a web proxy with an `event.action` which
    denied the request may also populate `event.reason` with the reason why (e.g.
    `blocked site`).'
  example: Terminated an unexpected process
  flat_name: event.reason
  ignore_above: 1024
  level: extended
  name: reason
  normalize: []
  short: Reason why this event happened, according to the source
  type: keyword
event.reference:
  dashed_name: event-reference
  description: 'Reference URL linking to additional information about this event.

    This URL links to a static definition of this event. Alert events, indicated by
    `event.kind:alert`, are a common use case for this field.'
  example: https://system.example.com/event/#0001234
  flat_name: event.reference
  ignore_above: 1024
  level: extended
  name: reference
  normalize: []
  short: Event reference URL
  type: keyword
event.risk_score:
  dashed_name: event-risk-score
  description: Risk score or priority of the event (e.g. security solutions). Use
    your system's original value here.
  flat_name: event.risk_score
  level: core
  name: risk_score
  normalize: []
  short: Risk score or priority of the event (e.g. security solutions). Use your system's
    original value here.
  type: float
event.risk_score_norm:
  dashed_name: event-risk-score-norm
  description: 'Normalized risk score or priority of the event, on a scale of 0 to
    100.

    This is mainly useful if you use more than one system that assigns risk scores,
    and you want to see a normalized value across all systems.'
  flat_name: event.risk_score_norm
  level: extended
  name: risk_score_norm
  normalize: []
  short: Normalized risk score or priority of the event (0-100).
  type: float
event.sequence:
  dashed_name: event-sequence
  description: 'Sequence number of the event.

    The sequence number is a value published by some event sources, to make the exact
    ordering of events unambiguous, regardless of the timestamp precision.'
  flat_name: event.sequence
  format: string
  level: extended
  name: sequence
  normalize: []
  short: Sequence number of the event.
  type: long
event.severity:
  dashed_name: event-severity
  description: 'The numeric severity of the event according to your event source.

    What the different severity values mean can be different between sources and use
    cases. It''s up to the implementer to make sure severities are consistent across
    events from the same source.

    The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is
    meant to represent the severity according to the event source (e.g. firewall,
    IDS). If the event source does not publish its own severity, you may optionally
    copy the `log.syslog.severity.code` to `event.severity`.'
  example: 7
  flat_name: event.severity
  format: string
  level: core
  name: severity
  normalize: []
  short: Numeric severity of the event.
  type: long
event.start:
  dashed_name: event-start
  description: event.start contains the date when the event started or when the activity
    was first observed.
  flat_name: event.start
  level: extended
  name: start
  normalize: []
  short: event.start contains the date when the event started or when the activity
    was first observed.
  type: date
event.timezone:
  dashed_name: event-timezone
  description: 'This field should be populated when the event''s timestamp does not
    include timezone information already (e.g. default Syslog timestamps). It''s optional
    otherwise.

    Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated
    (e.g. "EST") or an HH:mm differential (e.g. "-05:00").'
  flat_name: event.timezone
  ignore_above: 1024
  level: extended
  name: timezone
  normalize: []
  short: Event time zone.
  type: keyword
event.type:
  allowed_values:
  - description: The access event type is used for the subset of events within a category
      that indicate that something was accessed. Common examples include `event.category:database
      AND event.type:access`, or `event.category:file AND event.type:access`. Note
      for file access, both directory listings and file opens should be included in
      this subcategory. You can further distinguish access operations using the ECS
      `event.action` field.
    name: access
  - description: 'The admin event type is used for the subset of events within a category
      that are related to admin objects. For example, administrative changes within
      an IAM framework that do not specifically affect a user or group (e.g., adding
      new applications to a federation solution or connecting discrete forests in
      Active Directory) would fall into this subcategory. Common example: `event.category:iam
      AND event.type:change AND event.type:admin`. You can further distinguish admin
      operations using the ECS `event.action` field.'
    name: admin
  - description: The allowed event type is used for the subset of events within a
      category that indicate that something was allowed. Common examples include `event.category:network
      AND event.type:connection AND event.type:allowed` (to indicate a network firewall
      event for which the firewall disposition was to allow the connection to complete)
      and `event.category:intrusion_detection AND event.type:allowed` (to indicate
      a network intrusion prevention system event for which the IPS disposition was
      to allow the connection to complete). You can further distinguish allowed operations
      using the ECS `event.action` field, populating with values of your choosing,
      such as "allow", "detect", or "pass".
    name: allowed
  - description: The change event type is used for the subset of events within a category
      that indicate that something has changed. If semantics best describe an event
      as modified, then include them in this subcategory. Common examples include
      `event.category:process AND event.type:change`, and `event.category:file AND
      event.type:change`. You can further distinguish change operations using the
      ECS `event.action` field.
    name: change
  - description: Used primarily with `event.category:network` this value is used for
      the subset of network traffic that includes sufficient information for the event
      to be included in flow or connection analysis. Events in this subcategory will
      contain at least source and destination IP addresses, source and destination
      TCP/UDP ports, and will usually contain counts of bytes and/or packets transferred.
      Events in this subcategory may contain unidirectional or bidirectional information,
      including summary information. Use this subcategory to visualize and analyze
      network connections. Flow analysis, including Netflow, IPFIX, and other flow-related
      events fit in this subcategory. Note that firewall events from many Next-Generation
      Firewall (NGFW) devices will also fit into this subcategory.  A common filter
      for flow/connection information would be `event.category:network AND event.type:connection
      AND event.type:end` (to view or analyze all completed network connections, ignoring
      mid-flow reports). You can further distinguish connection events using the ECS
      `event.action` field, populating with values of your choosing, such as "timeout",
      or "reset".
    name: connection
  - description: The "creation" event type is used for the subset of events within
      a category that indicate that something was created. A common example is `event.category:file
      AND event.type:creation`.
    name: creation
  - description: The deletion event type is used for the subset of events within a
      category that indicate that something was deleted. A common example is `event.category:file
      AND event.type:deletion` to indicate that a file has been deleted.
    name: deletion
  - description: The denied event type is used for the subset of events within a category
      that indicate that something was denied. Common examples include `event.category:network
      AND event.type:denied` (to indicate a network firewall event for which the firewall
      disposition was to deny the connection) and `event.category:intrusion_detection
      AND event.type:denied` (to indicate a network intrusion prevention system event
      for which the IPS disposition was to deny the connection to complete). You can
      further distinguish denied operations using the ECS `event.action` field, populating
      with values of your choosing, such as "blocked", "dropped", or "quarantined".
    name: denied
  - description: The end event type is used for the subset of events within a category
      that indicate something has ended. A common example is `event.category:process
      AND event.type:end`.
    name: end
  - description: The error event type is used for the subset of events within a category
      that indicate or describe an error. A common example is `event.category:database
      AND event.type:error`. Note that pipeline errors that occur during the event
      ingestion process should not use this `event.type` value. Instead, they should
      use `event.kind:pipeline_error`.
    name: error
  - description: 'The group event type is used for the subset of events within a category
      that are related to group objects. Common example: `event.category:iam AND event.type:creation
      AND event.type:group`. You can further distinguish group operations using the
      ECS `event.action` field.'
    name: group
  - description: 'The indicator event type is used for the subset of events within
      a category that contain details about indicators of compromise (IOCs).

      A common example is `event.category:threat AND event.type:indicator`.'
    name: indicator
  - description: The info event type is used for the subset of events within a category
      that indicate that they are purely informational, and don't report a state change,
      or any type of action. For example, an initial run of a file integrity monitoring
      system (FIM), where an agent reports all files under management, would fall
      into the "info" subcategory. Similarly, an event containing a dump of all currently
      running processes (as opposed to reporting that a process started/ended) would
      fall into the "info" subcategory. An additional common examples is `event.category:intrusion_detection
      AND event.type:info`.
    name: info
  - description: The installation event type is used for the subset of events within
      a category that indicate that something was installed. A common example is `event.category:package`
      AND `event.type:installation`.
    name: installation
  - description: The protocol event type is used for the subset of events within a
      category that indicate that they contain protocol details or analysis, beyond
      simply identifying the protocol. Generally, network events that contain specific
      protocol details will fall into this subcategory. A common example is `event.category:network
      AND event.type:protocol AND event.type:connection AND event.type:end` (to indicate
      that the event is a network connection event sent at the end of a connection
      that also includes a protocol detail breakdown). Note that events that only
      indicate the name or id of the protocol should not use the protocol value. Further
      note that when the protocol subcategory is used, the identified protocol is
      populated in the ECS `network.protocol` field.
    name: protocol
  - description: The start event type is used for the subset of events within a category
      that indicate something has started. A common example is `event.category:process
      AND event.type:start`.
    name: start
  - description: 'The user event type is used for the subset of events within a category
      that are related to user objects. Common example: `event.category:iam AND event.type:deletion
      AND event.type:user`. You can further distinguish user operations using the
      ECS `event.action` field.'
    name: user
  dashed_name: event-type
  description: 'This is one of four ECS Categorization Fields, and indicates the third
    level in the ECS category hierarchy.

    `event.type` represents a categorization "sub-bucket" that, when used along with
    the `event.category` field values, enables filtering events down to a level appropriate
    for single visualization.

    This field is an array. This will allow proper categorization of some events that
    fall in multiple event types.'
  flat_name: event.type
  ignore_above: 1024
  level: core
  name: type
  normalize:
  - array
  short: Event type. The third categorization field in the hierarchy.
  type: keyword
event.url:
  dashed_name: event-url
  description: 'URL linking to an external system to continue investigation of this
    event.

    This URL links to another system where in-depth investigation of the specific
    occurrence of this event can take place. Alert events, indicated by `event.kind:alert`,
    are a common use case for this field.'
  example: https://mysystem.example.com/alert/5271dedb-f5b0-4218-87f0-4ac4870a38fe
  flat_name: event.url
  ignore_above: 1024
  level: extended
  name: url
  normalize: []
  short: Event investigation URL
  type: keyword
faas.coldstart:
  dashed_name: faas-coldstart
  description: Boolean value indicating a cold start of a function.
  flat_name: faas.coldstart
  level: extended
  name: coldstart
  normalize: []
  short: Boolean value indicating a cold start of a function.
  type: boolean
faas.execution:
  dashed_name: faas-execution
  description: The execution ID of the current function execution.
  example: af9d5aa4-a685-4c5f-a22b-444f80b3cc28
  flat_name: faas.execution
  ignore_above: 1024
  level: extended
  name: execution
  normalize: []
  short: The execution ID of the current function execution.
  type: keyword
faas.id:
  dashed_name: faas-id
  description: 'The unique identifier of a serverless function.

    For AWS Lambda it''s the function ARN (Amazon Resource Name) without a version
    or alias suffix.'
  example: arn:aws:lambda:us-west-2:123456789012:function:my-function
  flat_name: faas.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  short: The unique identifier of a serverless function.
  type: keyword
faas.name:
  dashed_name: faas-name
  description: The name of a serverless function.
  example: my-function
  flat_name: faas.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  short: The name of a serverless function.
  type: keyword
faas.trigger:
  dashed_name: faas-trigger
  description: Details about the function trigger.
  flat_name: faas.trigger
  level: extended
  name: trigger
  normalize: []
  short: Details about the function trigger.
  type: nested
faas.trigger.request_id:
  dashed_name: faas-trigger-request-id
  description: The ID of the trigger request , message, event, etc.
  example: 123456789
  flat_name: faas.trigger.request_id
  ignore_above: 1024
  level: extended
  name: trigger.request_id
  normalize: []
  short: The ID of the trigger request , message, event, etc.
  type: keyword
faas.trigger.type:
  dashed_name: faas-trigger-type
  description: "The trigger for the function execution.\nExpected values are:\n  *\
    \ http\n  * pubsub\n  * datasource\n  * timer\n  * other"
  example: http
  flat_name: faas.trigger.type
  ignore_above: 1024
  level: extended
  name: trigger.type
  normalize: []
  short: The trigger for the function execution.
  type: keyword
faas.version:
  dashed_name: faas-version
  description: The version of a serverless function.
  example: '123'
  flat_name: faas.version
  ignore_above: 1024
  level: extended
  name: version
  normalize: []
  short: The version of a serverless function.
  type: keyword
file.accessed:
  dashed_name: file-accessed
  description: 'Last time the file was accessed.

    Note that not all filesystems keep track of access time.'
  flat_name: file.accessed
  level: extended
  name: accessed
  normalize: []
  short: Last time the file was accessed.
  type: date
file.attributes:
  dashed_name: file-attributes
  description: 'Array of file attributes.

    Attributes names will vary by platform. Here''s a non-exhaustive list of values
    that are expected in this field: archive, compressed, directory, encrypted, execute,
    hidden, read, readonly, system, write.'
  example: '["readonly", "system"]'
  flat_name: file.attributes
  ignore_above: 1024
  level: extended
  name: attributes
  normalize:
  - array
  short: Array of file attributes.
  type: keyword
file.code_signature.digest_algorithm:
  dashed_name: file-code-signature-digest-algorithm
  description: 'The hashing algorithm used to sign the process.

    This value can distinguish signatures when a file is signed multiple times by
    the same signer but with a different digest algorithm.'
  example: sha256
  flat_name: file.code_signature.digest_algorithm
  ignore_above: 1024
  level: extended
  name: digest_algorithm
  normalize: []
  original_fieldset: code_signature
  short: Hashing algorithm used to sign the process.
  type: keyword
file.code_signature.exists:
  dashed_name: file-code-signature-exists
  description: Boolean to capture if a signature is present.
  example: 'true'
  flat_name: file.code_signature.exists
  level: core
  name: exists
  normalize: []
  original_fieldset: code_signature
  short: Boolean to capture if a signature is present.
  type: boolean
file.code_signature.signing_id:
  dashed_name: file-code-signature-signing-id
  description: 'The identifier used to sign the process.

    This is used to identify the application manufactured by a software vendor. The
    field is relevant to Apple *OS only.'
  example: com.apple.xpc.proxy
  flat_name: file.code_signature.signing_id
  ignore_above: 1024
  level: extended
  name: signing_id
  normalize: []
  original_fieldset: code_signature
  short: The identifier used to sign the process.
  type: keyword
file.code_signature.status:
  dashed_name: file-code-signature-status
  description: 'Additional information about the certificate status.

    This is useful for logging cryptographic errors with the certificate validity
    or trust status. Leave unpopulated if the validity or trust of the certificate
    was unchecked.'
  example: ERROR_UNTRUSTED_ROOT
  flat_name: file.code_signature.status
  ignore_above: 1024
  level: extended
  name: status
  normalize: []
  original_fieldset: code_signature
  short: Additional information about the certificate status.
  type: keyword
file.code_signature.subject_name:
  dashed_name: file-code-signature-subject-name
  description: Subject name of the code signer
  example: Microsoft Corporation
  flat_name: file.code_signature.subject_name
  ignore_above: 1024
  level: core
  name: subject_name
  normalize: []
  original_fieldset: code_signature
  short: Subject name of the code signer
  type: keyword
file.code_signature.team_id:
  dashed_name: file-code-signature-team-id
  description: 'The team identifier used to sign the process.

    This is used to identify the team or vendor of a software product. The field is
    relevant to Apple *OS only.'
  example: EQHXZ8M8AV
  flat_name: file.code_signature.team_id
  ignore_above: 1024
  level: extended
  name: team_id
  normalize: []
  original_fieldset: code_signature
  short: The team identifier used to sign the process.
  type: keyword
file.code_signature.timestamp:
  dashed_name: file-code-signature-timestamp
  description: Date and time when the code signature was generated and signed.
  example: '2021-01-01T12:10:30Z'
  flat_name: file.code_signature.timestamp
  level: extended
  name: timestamp
  normalize: []
  original_fieldset: code_signature
  short: When the signature was generated and signed.
  type: date
file.code_signature.trusted:
  dashed_name: file-code-signature-trusted
  description: 'Stores the trust status of the certificate chain.

    Validating the trust of the certificate chain may be complicated, and this field
    should only be populated by tools that actively check the status.'
  example: 'true'
  flat_name: file.code_signature.trusted
  level: extended
  name: trusted
  normalize: []
  original_fieldset: code_signature
  short: Stores the trust status of the certificate chain.
  type: boolean
file.code_signature.valid:
  dashed_name: file-code-signature-valid
  description: 'Boolean to capture if the digital signature is verified against the
    binary content.

    Leave unpopulated if a certificate was unchecked.'
  example: 'true'
  flat_name: file.code_signature.valid
  level: extended
  name: valid
  normalize: []
  original_fieldset: code_signature
  short: Boolean to capture if the digital signature is verified against the binary
    content.
  type: boolean
file.created:
  dashed_name: file-created
  description: 'File creation time.

    Note that not all filesystems store the creation time.'
  flat_name: file.created
  level: extended
  name: created
  normalize: []
  short: File creation time.
  type: date
file.ctime:
  dashed_name: file-ctime
  description: 'Last time the file attributes or metadata changed.

    Note that changes to the file content will update `mtime`. This implies `ctime`
    will be adjusted at the same time, since `mtime` is an attribute of the file.'
  flat_name: file.ctime
  level: extended
  name: ctime
  normalize: []
  short: Last time the file attributes or metadata changed.
  type: date
file.device:
  dashed_name: file-device
  description: Device that is the source of the file.
  example: sda
  flat_name: file.device
  ignore_above: 1024
  level: extended
  name: device
  normalize: []
  short: Device that is the source of the file.
  type: keyword
file.directory:
  dashed_name: file-directory
  description: Directory where the file is located. It should include the drive letter,
    when appropriate.
  example: /home/alice
  flat_name: file.directory
  ignore_above: 1024
  level: extended
  name: directory
  normalize: []
  short: Directory where the file is located.
  type: keyword
file.drive_letter:
  dashed_name: file-drive-letter
  description: 'Drive letter where the file is located. This field is only relevant
    on Windows.

    The value should be uppercase, and not include the colon.'
  example: C
  flat_name: file.drive_letter
  ignore_above: 1
  level: extended
  name: drive_letter
  normalize: []
  short: Drive letter where the file is located.
  type: keyword
file.elf.architecture:
  dashed_name: file-elf-architecture
  description: Machine architecture of the ELF file.
  example: x86-64
  flat_name: file.elf.architecture
  ignore_above: 1024
  level: extended
  name: architecture
  normalize: []
  original_fieldset: elf
  short: Machine architecture of the ELF file.
  type: keyword
file.elf.byte_order:
  dashed_name: file-elf-byte-order
  description: Byte sequence of ELF file.
  example: Little Endian
  flat_name: file.elf.byte_order
  ignore_above: 1024
  level: extended
  name: byte_order
  normalize: []
  original_fieldset: elf
  short: Byte sequence of ELF file.
  type: keyword
file.elf.cpu_type:
  dashed_name: file-elf-cpu-type
  description: CPU type of the ELF file.
  example: Intel
  flat_name: file.elf.cpu_type
  ignore_above: 1024
  level: extended
  name: cpu_type
  normalize: []
  original_fieldset: elf
  short: CPU type of the ELF file.
  type: keyword
file.elf.creation_date:
  dashed_name: file-elf-creation-date
  description: Extracted when possible from the file's metadata. Indicates when it
    was built or compiled. It can also be faked by malware creators.
  flat_name: file.elf.creation_date
  level: extended
  name: creation_date
  normalize: []
  original_fieldset: elf
  short: Build or compile date.
  type: date
file.elf.exports:
  dashed_name: file-elf-exports
  description: List of exported element names and types.
  flat_name: file.elf.exports
  level: extended
  name: exports
  normalize:
  - array
  original_fieldset: elf
  short: List of exported element names and types.
  type: flattened
file.elf.header.abi_version:
  dashed_name: file-elf-header-abi-version
  description: Version of the ELF Application Binary Interface (ABI).
  flat_name: file.elf.header.abi_version
  ignore_above: 1024
  level: extended
  name: header.abi_version
  normalize: []
  original_fieldset: elf
  short: Version of the ELF Application Binary Interface (ABI).
  type: keyword
file.elf.header.class:
  dashed_name: file-elf-header-class
  description: Header class of the ELF file.
  flat_name: file.elf.header.class
  ignore_above: 1024
  level: extended
  name: header.class
  normalize: []
  original_fieldset: elf
  short: Header class of the ELF file.
  type: keyword
file.elf.header.data:
  dashed_name: file-elf-header-data
  description: Data table of the ELF header.
  flat_name: file.elf.header.data
  ignore_above: 1024
  level: extended
  name: header.data
  normalize: []
  original_fieldset: elf
  short: Data table of the ELF header.
  type: keyword
file.elf.header.entrypoint:
  dashed_name: file-elf-header-entrypoint
  description: Header entrypoint of the ELF file.
  flat_name: file.elf.header.entrypoint
  format: string
  level: extended
  name: header.entrypoint
  normalize: []
  original_fieldset: elf
  short: Header entrypoint of the ELF file.
  type: long
file.elf.header.object_version:
  dashed_name: file-elf-header-object-version
  description: '"0x1" for original ELF files.'
  flat_name: file.elf.header.object_version
  ignore_above: 1024
  level: extended
  name: header.object_version
  normalize: []
  original_fieldset: elf
  short: '"0x1" for original ELF files.'
  type: keyword
file.elf.header.os_abi:
  dashed_name: file-elf-header-os-abi
  description: Application Binary Interface (ABI) of the Linux OS.
  flat_name: file.elf.header.os_abi
  ignore_above: 1024
  level: extended
  name: header.os_abi
  normalize: []
  original_fieldset: elf
  short: Application Binary Interface (ABI) of the Linux OS.
  type: keyword
file.elf.header.type:
  dashed_name: file-elf-header-type
  description: Header type of the ELF file.
  flat_name: file.elf.header.type
  ignore_above: 1024
  level: extended
  name: header.type
  normalize: []
  original_fieldset: elf
  short: Header type of the ELF file.
  type: keyword
file.elf.header.version:
  dashed_name: file-elf-header-version
  description: Version of the ELF header.
  flat_name: file.elf.header.version
  ignore_above: 1024
  level: extended
  name: header.version
  normalize: []
  original_fieldset: elf
  short: Version of the ELF header.
  type: keyword
file.elf.imports:
  dashed_name: file-elf-imports
  description: List of imported element names and types.
  flat_name: file.elf.imports
  level: extended
  name: imports
  normalize:
  - array
  original_fieldset: elf
  short: List of imported element names and types.
  type: flattened
file.elf.sections:
  dashed_name: file-elf-sections
  description: 'An array containing an object for each section of the ELF file.

    The keys that should be present in these objects are defined by sub-fields underneath
    `elf.sections.*`.'
  flat_name: file.elf.sections
  level: extended
  name: sections
  normalize:
  - array
  original_fieldset: elf
  short: Section information of the ELF file.
  type: nested
file.elf.sections.chi2:
  dashed_name: file-elf-sections-chi2
  description: Chi-square probability distribution of the section.
  flat_name: file.elf.sections.chi2
  format: number
  level: extended
  name: sections.chi2
  normalize: []
  original_fieldset: elf
  short: Chi-square probability distribution of the section.
  type: long
file.elf.sections.entropy:
  dashed_name: file-elf-sections-entropy
  description: Shannon entropy calculation from the section.
  flat_name: file.elf.sections.entropy
  format: number
  level: extended
  name: sections.entropy
  normalize: []
  original_fieldset: elf
  short: Shannon entropy calculation from the section.
  type: long
file.elf.sections.flags:
  dashed_name: file-elf-sections-flags
  description: ELF Section List flags.
  flat_name: file.elf.sections.flags
  ignore_above: 1024
  level: extended
  name: sections.flags
  normalize: []
  original_fieldset: elf
  short: ELF Section List flags.
  type: keyword
file.elf.sections.name:
  dashed_name: file-elf-sections-name
  description: ELF Section List name.
  flat_name: file.elf.sections.name
  ignore_above: 1024
  level: extended
  name: sections.name
  normalize: []
  original_fieldset: elf
  short: ELF Section List name.
  type: keyword
file.elf.sections.physical_offset:
  dashed_name: file-elf-sections-physical-offset
  description: ELF Section List offset.
  flat_name: file.elf.sections.physical_offset
  ignore_above: 1024
  level: extended
  name: sections.physical_offset
  normalize: []
  original_fieldset: elf
  short: ELF Section List offset.
  type: keyword
file.elf.sections.physical_size:
  dashed_name: file-elf-sections-physical-size
  description: ELF Section List physical size.
  flat_name: file.elf.sections.physical_size
  format: bytes
  level: extended
  name: sections.physical_size
  normalize: []
  original_fieldset: elf
  short: ELF Section List physical size.
  type: long
file.elf.sections.type:
  dashed_name: file-elf-sections-type
  description: ELF Section List type.
  flat_name: file.elf.sections.type
  ignore_above: 1024
  level: extended
  name: sections.type
  normalize: []
  original_fieldset: elf
  short: ELF Section List type.
  type: keyword
file.elf.sections.virtual_address:
  dashed_name: file-elf-sections-virtual-address
  description: ELF Section List virtual address.
  flat_name: file.elf.sections.virtual_address
  format: string
  level: extended
  name: sections.virtual_address
  normalize: []
  original_fieldset: elf
  short: ELF Section List virtual address.
  type: long
file.elf.sections.virtual_size:
  dashed_name: file-elf-sections-virtual-size
  description: ELF Section List virtual size.
  flat_name: file.elf.sections.virtual_size
  format: string
  level: extended
  name: sections.virtual_size
  normalize: []
  original_fieldset: elf
  short: ELF Section List virtual size.
  type: long
file.elf.segments:
  dashed_name: file-elf-segments
  description: 'An array containing an object for each segment of the ELF file.

    The keys that should be present in these objects are defined by sub-fields underneath
    `elf.segments.*`.'
  flat_name: file.elf.segments
  level: extended
  name: segments
  normalize:
  - array
  original_fieldset: elf
  short: ELF object segment list.
  type: nested
file.elf.segments.sections:
  dashed_name: file-elf-segments-sections
  description: ELF object segment sections.
  flat_name: file.elf.segments.sections
  ignore_above: 1024
  level: extended
  name: segments.sections
  normalize: []
  original_fieldset: elf
  short: ELF object segment sections.
  type: keyword
file.elf.segments.type:
  dashed_name: file-elf-segments-type
  description: ELF object segment type.
  flat_name: file.elf.segments.type
  ignore_above: 1024
  level: extended
  name: segments.type
  normalize: []
  original_fieldset: elf
  short: ELF object segment type.
  type: keyword
file.elf.shared_libraries:
  dashed_name: file-elf-shared-libraries
  description: List of shared libraries used by this ELF object.
  flat_name: file.elf.shared_libraries
  ignore_above: 1024
  level: extended
  name: shared_libraries
  normalize:
  - array
  original_fieldset: elf
  short: List of shared libraries used by this ELF object.
  type: keyword
file.elf.telfhash:
  dashed_name: file-elf-telfhash
  description: telfhash symbol hash for ELF file.
  flat_name: file.elf.telfhash
  ignore_above: 1024
  level: extended
  name: telfhash
  normalize: []
  original_fieldset: elf
  short: telfhash hash for ELF file.
  type: keyword
file.extension:
  dashed_name: file-extension
  description: 'File extension, excluding the leading dot.

    Note that when the file name has multiple extensions (example.tar.gz), only the
    last one should be captured ("gz", not "tar.gz").'
  example: png
  flat_name: file.extension
  ignore_above: 1024
  level: extended
  name: extension
  normalize: []
  short: File extension, excluding the leading dot.
  type: keyword
file.fork_name:
  dashed_name: file-fork-name
  description: 'A fork is additional data associated with a filesystem object.

    On Linux, a resource fork is used to store additional data with a filesystem object.
    A file always has at least one fork for the data portion, and additional forks
    may exist.

    On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default
    data stream for a file is just called $DATA. Zone.Identifier is commonly used
    by Windows to track contents downloaded from the Internet. An ADS is typically
    of the form: `C:\path\to\filename.extension:some_fork_name`, and `some_fork_name`
    is the value that should populate `fork_name`. `filename.extension` should populate
    `file.name`, and `extension` should populate `file.extension`. The full path,
    `file.path`, will include the fork name.'
  example: Zone.Identifer
  flat_name: file.fork_name
  ignore_above: 1024
  level: extended
  name: fork_name
  normalize: []
  short: A fork is additional data associated with a filesystem object.
  type: keyword
file.gid:
  dashed_name: file-gid
  description: Primary group ID (GID) of the file.
  example: '1001'
  flat_name: file.gid
  ignore_above: 1024
  level: extended
  name: gid
  normalize: []
  short: Primary group ID (GID) of the file.
  type: keyword
file.group:
  dashed_name: file-group
  description: Primary group name of the file.
  example: alice
  flat_name: file.group
  ignore_above: 1024
  level: extended
  name: group
  normalize: []
  short: Primary group name of the file.
  type: keyword
file.hash.md5:
  dashed_name: file-hash-md5
  description: MD5 hash.
  flat_name: file.hash.md5
  ignore_above: 1024
  level: extended
  name: md5
  normalize: []
  original_fieldset: hash
  short: MD5 hash.
  type: keyword
file.hash.sha1:
  dashed_name: file-hash-sha1
  description: SHA1 hash.
  flat_name: file.hash.sha1
  ignore_above: 1024
  level: extended
  name: sha1
  normalize: []
  original_fieldset: hash
  short: SHA1 hash.
  type: keyword
file.hash.sha256:
  dashed_name: file-hash-sha256
  description: SHA256 hash.
  flat_name: file.hash.sha256
  ignore_above: 1024
  level: extended
  name: sha256
  normalize: []
  original_fieldset: hash
  short: SHA256 hash.
  type: keyword
file.hash.sha384:
  dashed_name: file-hash-sha384
  description: SHA384 hash.
  flat_name: file.hash.sha384
  ignore_above: 1024
  level: extended
  name: sha384
  normalize: []
  original_fieldset: hash
  short: SHA384 hash.
  type: keyword
file.hash.sha512:
  dashed_name: file-hash-sha512
  description: SHA512 hash.
  flat_name: file.hash.sha512
  ignore_above: 1024
  level: extended
  name: sha512
  normalize: []
  original_fieldset: hash
  short: SHA512 hash.
  type: keyword
file.hash.ssdeep:
  dashed_name: file-hash-ssdeep
  description: SSDEEP hash.
  flat_name: file.hash.ssdeep
  ignore_above: 1024
  level: extended
  name: ssdeep
  normalize: []
  original_fieldset: hash
  short: SSDEEP hash.
  type: keyword
file.hash.tlsh:
  dashed_name: file-hash-tlsh
  description: TLSH hash.
  flat_name: file.hash.tlsh
  ignore_above: 1024
  level: extended
  name: tlsh
  normalize: []
  original_fieldset: hash
  short: TLSH hash.
  type: keyword
file.inode:
  dashed_name: file-inode
  description: Inode representing the file in the filesystem.
  example: '256383'
  flat_name: file.inode
  ignore_above: 1024
  level: extended
  name: inode
  normalize: []
  short: Inode representing the file in the filesystem.
  type: keyword
file.mime_type:
  dashed_name: file-mime-type
  description: MIME type should identify the format of the file or stream of bytes
    using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA official
    types], where possible. When more than one type is applicable, the most specific
    type should be used.
  flat_name: file.mime_type
  ignore_above: 1024
  level: extended
  name: mime_type
  normalize: []
  short: Media type of file, document, or arrangement of bytes.
  type: keyword
file.mode:
  dashed_name: file-mode
  description: Mode of the file in octal representation.
  example: '0640'
  flat_name: file.mode
  ignore_above: 1024
  level: extended
  name: mode
  normalize: []
  short: Mode of the file in octal representation.
  type: keyword
file.mtime:
  dashed_name: file-mtime
  description: Last time the file content was modified.
  flat_name: file.mtime
  level: extended
  name: mtime
  normalize: []
  short: Last time the file content was modified.
  type: date
file.name:
  dashed_name: file-name
  description: Name of the file including the extension, without the directory.
  example: example.png
  flat_name: file.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  short: Name of the file including the extension, without the directory.
  type: keyword
file.owner:
  dashed_name: file-owner
  description: File owner's username.
  example: alice
  flat_name: file.owner
  ignore_above: 1024
  level: extended
  name: owner
  normalize: []
  short: File owner's username.
  type: keyword
file.path:
  dashed_name: file-path
  description: Full path to the file, including the file name. It should include the
    drive letter, when appropriate.
  example: /home/alice/example.png
  flat_name: file.path
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: file.path.text
    name: text
    type: match_only_text
  name: path
  normalize: []
  short: Full path to the file, including the file name.
  type: keyword
file.pe.architecture:
  dashed_name: file-pe-architecture
  description: CPU architecture target for the file.
  example: x64
  flat_name: file.pe.architecture
  ignore_above: 1024
  level: extended
  name: architecture
  normalize: []
  original_fieldset: pe
  short: CPU architecture target for the file.
  type: keyword
file.pe.company:
  dashed_name: file-pe-company
  description: Internal company name of the file, provided at compile-time.
  example: Microsoft Corporation
  flat_name: file.pe.company
  ignore_above: 1024
  level: extended
  name: company
  normalize: []
  original_fieldset: pe
  short: Internal company name of the file, provided at compile-time.
  type: keyword
file.pe.description:
  dashed_name: file-pe-description
  description: Internal description of the file, provided at compile-time.
  example: Paint
  flat_name: file.pe.description
  ignore_above: 1024
  level: extended
  name: description
  normalize: []
  original_fieldset: pe
  short: Internal description of the file, provided at compile-time.
  type: keyword
file.pe.file_version:
  dashed_name: file-pe-file-version
  description: Internal version of the file, provided at compile-time.
  example: 6.3.9600.17415
  flat_name: file.pe.file_version
  ignore_above: 1024
  level: extended
  name: file_version
  normalize: []
  original_fieldset: pe
  short: Process name.
  type: keyword
file.pe.imphash:
  dashed_name: file-pe-imphash
  description: 'A hash of the imports in a PE file. An imphash -- or import hash --
    can be used to fingerprint binaries even after recompilation or other code-level
    transformations have occurred, which would change more traditional hash values.

    Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
  example: 0c6803c4e922103c4dca5963aad36ddf
  flat_name: file.pe.imphash
  ignore_above: 1024
  level: extended
  name: imphash
  normalize: []
  original_fieldset: pe
  short: A hash of the imports in a PE file.
  type: keyword
file.pe.original_file_name:
  dashed_name: file-pe-original-file-name
  description: Internal name of the file, provided at compile-time.
  example: MSPAINT.EXE
  flat_name: file.pe.original_file_name
  ignore_above: 1024
  level: extended
  name: original_file_name
  normalize: []
  original_fieldset: pe
  short: Internal name of the file, provided at compile-time.
  type: keyword
file.pe.pehash:
  dashed_name: file-pe-pehash
  description: 'A hash of the PE header and data from one or more PE sections. An
    pehash can be used to cluster files by transforming structural information about
    a file into a hash value.

    Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
  example: 73ff189b63cd6be375a7ff25179a38d347651975
  flat_name: file.pe.pehash
  ignore_above: 1024
  level: extended
  name: pehash
  normalize: []
  original_fieldset: pe
  short: A hash of the PE header and data from one or more PE sections.
  type: keyword
file.pe.product:
  dashed_name: file-pe-product
  description: Internal product name of the file, provided at compile-time.
  example: "Microsoft\xAE Windows\xAE Operating System"
  flat_name: file.pe.product
  ignore_above: 1024
  level: extended
  name: product
  normalize: []
  original_fieldset: pe
  short: Internal product name of the file, provided at compile-time.
  type: keyword
file.size:
  dashed_name: file-size
  description: 'File size in bytes.

    Only relevant when `file.type` is "file".'
  example: 16384
  flat_name: file.size
  level: extended
  name: size
  normalize: []
  short: File size in bytes.
  type: long
file.target_path:
  dashed_name: file-target-path
  description: Target path for symlinks.
  flat_name: file.target_path
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: file.target_path.text
    name: text
    type: match_only_text
  name: target_path
  normalize: []
  short: Target path for symlinks.
  type: keyword
file.type:
  dashed_name: file-type
  description: File type (file, dir, or symlink).
  example: file
  flat_name: file.type
  ignore_above: 1024
  level: extended
  name: type
  normalize: []
  short: File type (file, dir, or symlink).
  type: keyword
file.uid:
  dashed_name: file-uid
  description: The user ID (UID) or security identifier (SID) of the file owner.
  example: '1001'
  flat_name: file.uid
  ignore_above: 1024
  level: extended
  name: uid
  normalize: []
  short: The user ID (UID) or security identifier (SID) of the file owner.
  type: keyword
file.x509.alternative_names:
  dashed_name: file-x509-alternative-names
  description: List of subject alternative names (SAN). Name types vary by certificate
    authority and certificate type but commonly contain IP addresses, DNS names (and
    wildcards), and email addresses.
  example: '*.elastic.co'
  flat_name: file.x509.alternative_names
  ignore_above: 1024
  level: extended
  name: alternative_names
  normalize:
  - array
  original_fieldset: x509
  short: List of subject alternative names (SAN).
  type: keyword
file.x509.issuer.common_name:
  dashed_name: file-x509-issuer-common-name
  description: List of common name (CN) of issuing certificate authority.
  example: Example SHA2 High Assurance Server CA
  flat_name: file.x509.issuer.common_name
  ignore_above: 1024
  level: extended
  name: issuer.common_name
  normalize:
  - array
  original_fieldset: x509
  short: List of common name (CN) of issuing certificate authority.
  type: keyword
file.x509.issuer.country:
  dashed_name: file-x509-issuer-country
  description: List of country (C) codes
  example: US
  flat_name: file.x509.issuer.country
  ignore_above: 1024
  level: extended
  name: issuer.country
  normalize:
  - array
  original_fieldset: x509
  short: List of country (C) codes
  type: keyword
file.x509.issuer.distinguished_name:
  dashed_name: file-x509-issuer-distinguished-name
  description: Distinguished name (DN) of issuing certificate authority.
  example: C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance
    Server CA
  flat_name: file.x509.issuer.distinguished_name
  ignore_above: 1024
  level: extended
  name: issuer.distinguished_name
  normalize: []
  original_fieldset: x509
  short: Distinguished name (DN) of issuing certificate authority.
  type: keyword
file.x509.issuer.locality:
  dashed_name: file-x509-issuer-locality
  description: List of locality names (L)
  example: Mountain View
  flat_name: file.x509.issuer.locality
  ignore_above: 1024
  level: extended
  name: issuer.locality
  normalize:
  - array
  original_fieldset: x509
  short: List of locality names (L)
  type: keyword
file.x509.issuer.organization:
  dashed_name: file-x509-issuer-organization
  description: List of organizations (O) of issuing certificate authority.
  example: Example Inc
  flat_name: file.x509.issuer.organization
  ignore_above: 1024
  level: extended
  name: issuer.organization
  normalize:
  - array
  original_fieldset: x509
  short: List of organizations (O) of issuing certificate authority.
  type: keyword
file.x509.issuer.organizational_unit:
  dashed_name: file-x509-issuer-organizational-unit
  description: List of organizational units (OU) of issuing certificate authority.
  example: www.example.com
  flat_name: file.x509.issuer.organizational_unit
  ignore_above: 1024
  level: extended
  name: issuer.organizational_unit
  normalize:
  - array
  original_fieldset: x509
  short: List of organizational units (OU) of issuing certificate authority.
  type: keyword
file.x509.issuer.state_or_province:
  dashed_name: file-x509-issuer-state-or-province
  description: List of state or province names (ST, S, or P)
  example: California
  flat_name: file.x509.issuer.state_or_province
  ignore_above: 1024
  level: extended
  name: issuer.state_or_province
  normalize:
  - array
  original_fieldset: x509
  short: List of state or province names (ST, S, or P)
  type: keyword
file.x509.not_after:
  dashed_name: file-x509-not-after
  description: Time at which the certificate is no longer considered valid.
  example: 2020-07-16 03:15:39+00:00
  flat_name: file.x509.not_after
  level: extended
  name: not_after
  normalize: []
  original_fieldset: x509
  short: Time at which the certificate is no longer considered valid.
  type: date
file.x509.not_before:
  dashed_name: file-x509-not-before
  description: Time at which the certificate is first considered valid.
  example: 2019-08-16 01:40:25+00:00
  flat_name: file.x509.not_before
  level: extended
  name: not_before
  normalize: []
  original_fieldset: x509
  short: Time at which the certificate is first considered valid.
  type: date
file.x509.public_key_algorithm:
  dashed_name: file-x509-public-key-algorithm
  description: Algorithm used to generate the public key.
  example: RSA
  flat_name: file.x509.public_key_algorithm
  ignore_above: 1024
  level: extended
  name: public_key_algorithm
  normalize: []
  original_fieldset: x509
  short: Algorithm used to generate the public key.
  type: keyword
file.x509.public_key_curve:
  dashed_name: file-x509-public-key-curve
  description: The curve used by the elliptic curve public key algorithm. This is
    algorithm specific.
  example: nistp521
  flat_name: file.x509.public_key_curve
  ignore_above: 1024
  level: extended
  name: public_key_curve
  normalize: []
  original_fieldset: x509
  short: The curve used by the elliptic curve public key algorithm. This is algorithm
    specific.
  type: keyword
file.x509.public_key_exponent:
  dashed_name: file-x509-public-key-exponent
  description: Exponent used to derive the public key. This is algorithm specific.
  doc_values: false
  example: 65537
  flat_name: file.x509.public_key_exponent
  index: false
  level: extended
  name: public_key_exponent
  normalize: []
  original_fieldset: x509
  short: Exponent used to derive the public key. This is algorithm specific.
  type: long
file.x509.public_key_size:
  dashed_name: file-x509-public-key-size
  description: The size of the public key space in bits.
  example: 2048
  flat_name: file.x509.public_key_size
  level: extended
  name: public_key_size
  normalize: []
  original_fieldset: x509
  short: The size of the public key space in bits.
  type: long
file.x509.serial_number:
  dashed_name: file-x509-serial-number
  description: Unique serial number issued by the certificate authority. For consistency,
    if this value is alphanumeric, it should be formatted without colons and uppercase
    characters.
  example: 55FBB9C7DEBF09809D12CCAA
  flat_name: file.x509.serial_number
  ignore_above: 1024
  level: extended
  name: serial_number
  normalize: []
  original_fieldset: x509
  short: Unique serial number issued by the certificate authority.
  type: keyword
file.x509.signature_algorithm:
  dashed_name: file-x509-signature-algorithm
  description: Identifier for certificate signature algorithm. We recommend using
    names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
  example: SHA256-RSA
  flat_name: file.x509.signature_algorithm
  ignore_above: 1024
  level: extended
  name: signature_algorithm
  normalize: []
  original_fieldset: x509
  short: Identifier for certificate signature algorithm.
  type: keyword
file.x509.subject.common_name:
  dashed_name: file-x509-subject-common-name
  description: List of common names (CN) of subject.
  example: shared.global.example.net
  flat_name: file.x509.subject.common_name
  ignore_above: 1024
  level: extended
  name: subject.common_name
  normalize:
  - array
  original_fieldset: x509
  short: List of common names (CN) of subject.
  type: keyword
file.x509.subject.country:
  dashed_name: file-x509-subject-country
  description: