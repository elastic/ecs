-   description: ECS fields.
    fields:
    -   description: 'The agent fields contain the data about the software entity,
            if any, that collects, detects, or observes events on a host, or takes
            measurements on a host. Examples include Beats. Agents may also run on
            observers. ECS agent.* fields shall be populated with details of the agent
            running on the host or observer where the event happened or the measurement
            was taken.

            '
        fields:
        -   description: 'Version of the agent.

                '
            example: 6.0.0-rc2
            level: core
            name: version
            type: keyword
        -   description: 'Name of the agent.

                This is a name that can be given to an agent. This can be helpful
                if for example two Filebeat instances are running on the same host
                but a human readable separation is needed on which Filebeat instance
                data is coming from.

                If no name is given, the name is often left empty.

                '
            example: foo
            level: core
            name: name
            type: keyword
        -   description: 'Type of the agent.

                The agent type stays always the same and should be given by the agent
                used. In case of Filebeat the agent would always be Filebeat also
                if two Filebeat instances are run on the same machine.

                '
            example: filebeat
            level: core
            name: type
            type: keyword
        -   description: 'Unique identifier of this agent (if one exists).

                Example: For Beats this would be beat.id.

                '
            example: 8a4f500d
            level: core
            name: id
            type: keyword
        -   description: 'Ephemeral identifier of this agent (if one exists).

                This id normally changes across restarts, but `agent.id` does not.

                '
            example: 8a4f500f
            level: extended
            name: ephemeral_id
            type: keyword
        footnote: 'Examples: In the case of Beats for logs, the agent.name is filebeat.
            For APM, it is the agent running in the app/service. The agent information
            does not change if data is sent through queuing systems like Kafka, Redis,
            or processing systems such as Logstash or APM Server.

            '
        group: 2
        name: agent
        title: Agent
        type: group
    -   description: 'A client is defined as the initiator of a network connection
            for events regarding sessions, connections, or bidirectional flow records.
            For TCP events, the client is the initiator of the TCP connection that
            sends the SYN packet(s). For other protocols, the client is generally
            the initiator or requestor in the network transaction. Some systems use
            the term "originator" to refer the client in TCP connections. The client
            fields describe details about the system acting as the client in the network
            event. Client fields are usually populated in conjunction with server
            fields.  Client fields are generally not populated for packet-level events.

            Client / server representations can add semantic context to an exchange,
            which is helpful to visualize the data in certain situations. If your
            context falls in that category, you should still ensure that source and
            destination are filled appropriately.

            '
        fields:
        -   description: 'Some event client addresses are defined ambiguously. The
                event will sometimes list an IP, a domain or a unix socket.  You should
                always store the raw address in the `.address` field.

                Then it should be duplicated to `.ip` or `.domain`, depending on which
                one it is.

                '
            level: extended
            name: address
            type: keyword
        -   description: 'IP address of the client.

                Can be one or multiple IPv4 or IPv6 addresses.

                '
            level: core
            name: ip
            type: ip
        -   description: 'Port of the client.

                '
            level: core
            name: port
            type: long
        -   description: 'MAC address of the client.

                '
            level: core
            name: mac
            type: keyword
        -   description: 'Client domain.

                '
            level: core
            name: domain
            type: keyword
        -   description: 'Bytes sent from the client to the server.

                '
            example: 184
            level: core
            name: bytes
            type: long
        -   description: 'Packets sent from the client to the server.

                '
            example: 12
            level: core
            name: packets
            type: long
        group: 2
        name: client
        title: Client
        type: group
    -   description: 'Fields related to the cloud or infrastructure the events are
            coming from.

            '
        fields:
        -   description: 'Name of the cloud provider. Example values are ec2, gce,
                or digitalocean.

                '
            example: ec2
            level: extended
            name: provider
            type: keyword
        -   description: 'Availability zone in which this host is running.

                '
            example: us-east-1c
            level: extended
            name: availability_zone
            type: keyword
        -   description: 'Region in which this host is running.

                '
            example: us-east-1
            level: extended
            name: region
            type: keyword
        -   description: 'Instance ID of the host machine.

                '
            example: i-1234567890abcdef0
            level: extended
            name: instance.id
            type: keyword
        -   description: 'Instance name of the host machine.

                '
            level: extended
            name: instance.name
            type: keyword
        -   description: 'Machine type of the host machine.

                '
            example: t2.medium
            level: extended
            name: machine.type
            type: keyword
        -   description: 'The cloud account or organization id used to identify different
                entities in a multi-tenant environment.

                Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.

                '
            example: 666777888999
            level: extended
            name: account.id
            type: keyword
        footnote: 'Examples: If Metricbeat is running on an EC2 host and fetches data
            from its host, the cloud info contains the data about this machine. If
            Metricbeat runs on a remote machine outside the cloud and fetches data
            from a service running in the cloud, the field contains cloud data from
            the machine the service is running on.

            '
        group: 2
        name: cloud
        title: Cloud
        type: group
    -   description: 'Container fields are used for meta information about the specific
            container that is the source of information. These fields help correlate
            data based containers from any runtime.

            '
        fields:
        -   description: 'Runtime managing this container.

                '
            example: docker
            level: extended
            name: runtime
            type: keyword
        -   description: 'Unique container id.

                '
            level: core
            name: id
            type: keyword
        -   description: 'Name of the image the container was built on.

                '
            level: extended
            name: image.name
            type: keyword
        -   description: 'Container image tag.

                '
            level: extended
            name: image.tag
            type: keyword
        -   description: 'Container name.

                '
            level: extended
            name: name
            type: keyword
        -   description: 'Image labels.

                '
            level: extended
            name: labels
            object_type: keyword
            type: object
        group: 2
        name: container
        title: Container
        type: group
    -   description: 'Destination fields describe details about the destination of
            a packet/event. Destination fields are usually populated in conjunction
            with source fields.

            '
        fields:
        -   description: 'Some event destination addresses are defined ambiguously.
                The event will sometimes list an IP, a domain or a unix socket.  You
                should always store the raw address in the `.address` field.

                Then it should be duplicated to `.ip` or `.domain`, depending on which
                one it is.

                '
            level: extended
            name: address
            type: keyword
        -   description: 'IP address of the destination.

                Can be one or multiple IPv4 or IPv6 addresses.

                '
            level: core
            name: ip
            type: ip
        -   description: 'Port of the destination.

                '
            level: core
            name: port
            type: long
        -   description: 'MAC address of the destination.

                '
            level: core
            name: mac
            type: keyword
        -   description: 'Destination domain.

                '
            level: core
            name: domain
            type: keyword
        -   description: 'Bytes sent from the destination to the source.

                '
            example: 184
            level: core
            name: bytes
            type: long
        -   description: 'Packets sent from the destination to the source.

                '
            example: 12
            level: core
            name: packets
            type: long
        group: 2
        name: destination
        title: Destination
        type: group
    -   description: 'Meta-information specific to ECS.

            '
        fields:
        -   description: 'ECS version this event conforms to. `ecs.version` is a required
                field and must exist in all events.

                When querying across multiple indices -- which may conform to slightly
                different ECS versions -- this field lets integrations adjust to the
                schema version of the events.

                The current version is 1.0.0-beta2 .

                '
            example: 1.0.0-beta2
            level: core
            name: version
            required: true
            type: keyword
        group: 2
        name: ecs
        title: ECS
        type: group
    -   description: 'These fields can represent errors of any kind. Use them for
            errors that happen while fetching events or in cases where the event itself
            contains an error.

            '
        fields:
        -   description: 'Unique identifier for the error.

                '
            level: core
            name: id
            type: keyword
        -   description: 'Error message.

                '
            level: core
            name: message
            type: text
        -   description: 'Error code describing the error.

                '
            level: core
            name: code
            type: keyword
        group: 2
        name: error
        title: Error
        type: group
    -   description: 'The event fields are used for context information about the
            log or metric event itself. A log is defined as an event containing details
            of something that happened. Log events must include the time at which
            the thing happened. Examples of log events include a process starting
            on a host, a network packet being sent from a source to a destination,
            or a network connection between a client and a server being initiated
            or closed. A metric is defined as an event containing one or more numerical
            or categorical measurements and the time at which the measurement was
            taken. Examples of metric events include memory pressure measured on a
            host, or vulnerabilities measured on a scanned host.

            '
        fields:
        -   description: 'Unique ID to describe the event.

                '
            example: 8a4f500d
            level: core
            name: id
            type: keyword
        -   description: 'The kind of the event.

                This gives information about what type of information the event contains,
                without being specific to the contents of the event.  Examples are
                `event`, `state`, `alarm`. Warning: In future versions of ECS, we
                plan to provide a list of acceptable values for this field, please
                use with caution.

                '
            example: state
            level: extended
            name: kind
            type: keyword
        -   description: 'Event category.

                This contains high-level information about the contents of the event.
                It is more generic than `event.action`, in the sense that typically
                a category contains multiple actions. Warning: In future versions
                of ECS, we plan to provide a list of acceptable values for this field,
                please use with caution.

                '
            example: user-management
            level: core
            name: category
            type: keyword
        -   description: 'The action captured by the event.

                This describes the information in the event. It is more specific than
                `event.category`. Examples are `group-add`, `process-started`, `file-created`.
                The value is normally defined by the implementer.

                '
            example: user-password-change
            level: core
            name: action
            type: keyword
        -   description: 'The outcome of the event.

                If the event describes an action, this fields contains the outcome
                of that action. Examples outcomes are `success` and `failure`. Warning:
                In future versions of ECS, we plan to provide a list of acceptable
                values for this field, please use with caution.

                '
            example: success
            level: extended
            name: outcome
            type: keyword
        -   description: 'Reserved for future usage.

                Please avoid using this field for user data.

                '
            level: core
            name: type
            type: keyword
        -   description: 'Name of the module this data is coming from.

                This information is coming from the modules used in Beats or Logstash.

                '
            example: mysql
            level: core
            name: module
            type: keyword
        -   description: 'Name of the dataset.

                The concept of a `dataset` (fileset / metricset) is used in Beats
                as a subset of modules. It contains the information which is currently
                stored in metricset.name and metricset.module or fileset.name.

                '
            example: stats
            level: core
            name: dataset
            type: keyword
        -   description: 'Severity describes the severity of the event. What the different
                severity values mean can very different between use cases. It''s up
                to the implementer to make sure severities are consistent across events.

                '
            example: '7'
            level: core
            name: severity
            type: long
        -   description: 'Raw text message of entire event. Used to demonstrate log
                integrity.

                This field is not indexed and doc_values are disabled. It cannot be
                searched, but it can be retrieved from `_source`.

                '
            doc_values: false
            example: Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124;
                worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232
            index: false
            level: core
            name: original
            type: keyword
        -   description: 'Hash (perhaps logstash fingerprint) of raw field to be able
                to demonstrate log integrity.

                '
            example: 123456789012345678901234567890ABCD
            level: extended
            name: hash
            type: keyword
        -   description: 'Duration of the event in nanoseconds.

                If event.start and event.end are known this value should be the difference
                between the end and start time.

                '
            level: core
            name: duration
            type: long
        -   description: 'This field should be populated when the event''s timestamp
                does not include timezone information already (e.g. default Syslog
                timestamps). It''s optional otherwise.

                Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"),
                abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").

                '
            level: extended
            name: timezone
            type: keyword
        -   description: 'event.created contains the date when the event was created.

                This timestamp is distinct from @timestamp in that @timestamp contains
                the processed timestamp. For logs these two timestamps can be different
                as the timestamp in the log line and when the event is read for example
                by Filebeat are not identical. `@timestamp` must contain the timestamp
                extracted from the log line, event.created when the log line is read.
                The same could apply to package capturing where @timestamp contains
                the timestamp extracted from the network package and event.created
                when the event was created.

                In case the two timestamps are identical, @timestamp should be used.

                '
            level: core
            name: created
            type: date
        -   description: 'event.start contains the date when the event started or
                when the activity was first observed.

                '
            level: extended
            name: start
            type: date
        -   description: 'event.end contains the date when the event ended or when
                the activity was last observed.

                '
            level: extended
            name: end
            type: date
        -   description: 'Risk score or priority of the event (e.g. security solutions).
                Use your system''s original value here.

                '
            level: core
            name: risk_score
            type: float
        -   description: 'Normalized risk score or priority of the event, on a scale
                of 0 to 100.

                This is mainly useful if you use more than one system that assigns
                risk scores, and you want to see a normalized value across all systems.

                '
            level: extended
            name: risk_score_norm
            type: float
        group: 2
        name: event
        title: Event
        type: group
    -   description: 'A file is defined as a set of information that has been created
            on, or has existed on a filesystem. File objects can be associated with
            host events, network events, and/or file events (e.g., those produced
            by File Integrity Monitoring [FIM] products or services). File fields
            provide details about the affected file associated with the event or metric.

            '
        fields:
        -   description: Path to the file.
            level: extended
            name: path
            type: keyword
        -   description: Target path for symlinks.
            level: extended
            name: target_path
            type: keyword
        -   description: 'File extension.

                This should allow easy filtering by file extensions.

                '
            example: png
            level: extended
            name: extension
            type: keyword
        -   description: File type (file, dir, or symlink).
            level: extended
            name: type
            type: keyword
        -   description: Device that is the source of the file.
            level: extended
            name: device
            type: keyword
        -   description: Inode representing the file in the filesystem.
            level: extended
            name: inode
            type: keyword
        -   description: 'The user ID (UID) or security identifier (SID) of the file
                owner.

                '
            level: extended
            name: uid
            type: keyword
        -   description: File owner's username.
            level: extended
            name: owner
            type: keyword
        -   description: Primary group ID (GID) of the file.
            level: extended
            name: gid
            type: keyword
        -   description: Primary group name of the file.
            level: extended
            name: group
            type: keyword
        -   description: Mode of the file in octal representation.
            example: 416
            level: extended
            name: mode
            type: keyword
        -   description: File size in bytes (field is only added when `type` is `file`).
            level: extended
            name: size
            type: long
        -   description: Last time file content was modified.
            level: extended
            name: mtime
            type: date
        -   description: Last time file metadata changed.
            level: extended
            name: ctime
            type: date
        group: 2
        name: file
        title: File
        type: group
    -   description: 'Geo fields can carry data about a specific location related
            to an event or geo information derived from an IP field.

            '
        fields:
        -   description: 'Longitude and latitude.

                '
            example: '{ "lon": -73.614830, "lat": 45.505918 }'
            level: core
            name: location
            type: geo_point
        -   description: 'Name of the continent.

                '
            example: North America
            level: core
            name: continent_name
            type: keyword
        -   description: 'Country name.

                '
            example: Canada
            level: core
            name: country_name
            type: keyword
        -   description: 'Region name.

                '
            example: Quebec
            level: core
            name: region_name
            type: keyword
        -   description: 'City name.

                '
            example: Montreal
            level: core
            name: city_name
            type: keyword
        -   description: 'Country ISO code.

                '
            example: CA
            level: core
            name: country_iso_code
            type: keyword
        -   description: 'Region ISO code.

                '
            example: CA-QC
            level: core
            name: region_iso_code
            type: keyword
        -   description: 'User-defined description of a location, at the level of
                granularity they care about.

                Could be the name of their data centers, the floor number, if this
                describes a local physical entity, city names.

                Not typically used in automated geolocation.

                '
            example: boston-dc
            level: extended
            name: name
            type: keyword
        group: 2
        name: geo
        reusable:
            expected:
            - client
            - destination
            - observer
            - host
            - server
            - source
            top_level: false
        title: Geo
        type: group
    -   description: 'The group fields are meant to represent groups that are relevant
            to the event.

            '
        fields:
        -   description: 'Unique identifier for the group on the system/platform.

                '
            level: extended
            name: id
            type: keyword
        -   description: 'Name of the group.

                '
            level: extended
            name: name
            type: keyword
        group: 2
        name: group
        title: Group
        type: group
    -   description: 'A host is defined as a general computing instance. ECS host.*
            fields should be populated with details about the host on which the event
            happened, or on which the measurement was taken. Host types include hardware,
            virtual machines, Docker containers, and Kubernetes nodes.

            '
        fields:
        -   description: 'Hostname of the host.

                It normally contains what the `hostname` command returns on the host
                machine.

                '
            level: core
            name: hostname
            type: keyword
        -   description: 'Name of the host.

                It can contain what `hostname` returns on Unix systems, the fully
                qualified domain name, or a name specified by the user. The sender
                decides which value to use.

                '
            level: core
            name: name
            type: keyword
        -   description: 'Unique host id.

                As hostname is not always unique, use values that are meaningful in
                your environment.

                Example: The current usage of `beat.name`.

                '
            level: core
            name: id
            type: keyword
        -   description: 'Host ip address.

                '
            level: core
            name: ip
            type: ip
        -   description: 'Host mac address.

                '
            level: core
            name: mac
            type: keyword
        -   description: 'Type of host.

                For Cloud providers this can be the machine type like `t2.medium`.
                If vm, this could be the container, for example, or other information
                meaningful in your environment.

                '
            level: core
            name: type
            type: keyword
        -   description: 'Operating system architecture.

                '
            example: x86_64
            level: core
            name: architecture
            type: keyword
        group: 2
        name: host
        title: Host
        type: group
    -   description: 'Fields related to HTTP activity.

            '
        fields:
        -   description: 'Http request method.

                The field value must be normalized to lowercase for querying. See
                "Lowercase Capitalization" in the "Implementing ECS"  section.

                '
            example: get, post, put
            level: extended
            name: request.method
            type: keyword
        -   description: 'The full http request body.

                '
            example: Hello world
            level: extended
            name: request.body.content
            type: keyword
        -   description: 'Referrer for this HTTP request.

                '
            example: https://blog.example.com/
            level: extended
            name: request.referrer
            type: keyword
        -   description: 'Http response status code.

                '
            example: 404
            level: extended
            name: response.status_code
            type: long
        -   description: 'The full http response body.

                '
            example: Hello world
            level: extended
            name: response.body.content
            type: keyword
        -   description: 'Http version.

                '
            example: 1.1
            level: extended
            name: version
            type: keyword
        -   description: 'Total size in bytes of the request (body and headers).

                '
            example: 1437
            level: extended
            name: request.bytes
            type: long
        -   description: 'Size in bytes of the request body.

                '
            example: 887
            level: extended
            name: request.body.bytes
            type: long
        -   description: 'Total size in bytes of the response (body and headers).

                '
            example: 1437
            level: extended
            name: response.bytes
            type: long
        -   description: 'Size in bytes of the response body.

                '
            example: 887
            level: extended
            name: response.body.bytes
            type: long
        group: 2
        name: http
        title: HTTP
        type: group
    -   description: 'Fields which are specific to log events.

            '
        fields:
        -   description: 'Log level of the log event.

                Some examples are `WARN`, `ERR`, `INFO`.

                '
            example: ERR
            level: core
            name: level
            type: keyword
        -   description: '

                This is the original log message and contains the full log message
                before splitting it up in multiple parts.

                In contrast to the `message` field which can contain an extracted
                part of the log message, this field contains the original, full log
                message. It can have already some modifications applied like encoding
                or new lines removed to clean up the log message.

                This field is not indexed and doc_values are disabled so it can''t
                be queried but the value can be retrieved from `_source`.

                '
            doc_values: false
            example: Sep 19 08:26:10 localhost My log
            index: false
            level: core
            name: original
            type: keyword
        name: log
        title: Log
        type: group
    -   description: 'The network is defined as the communication path over which
            a host or network event happens. The network.* fields should be populated
            with details about the network activity associated with an event.

            '
        fields:
        -   description: 'Name given by operators to sections of their network.

                '
            example: Guest Wifi
            level: extended
            name: name
            type: keyword
        -   description: 'In the OSI Model this would be the Network Layer. ipv4,
                ipv6, ipsec, pim, etc

                The field value must be normalized to lowercase for querying. See
                "Lowercase Capitalization" in the "Implementing ECS" section.

                '
            example: ipv4
            level: core
            name: type
            type: keyword
        -   description: 'IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
                Standardized list of protocols. This aligns well with NetFlow and
                sFlow related logs which use the IANA Protocol Number.

                '
            example: 6
            level: extended
            name: iana_number
            type: keyword
        -   description: 'Same as network.iana_number, but instead using the Keyword
                name of the transport layer (udp, tcp, ipv6-icmp, etc.)

                The field value must be normalized to lowercase for querying. See
                "Lowercase Capitalization" in the "Implementing ECS"  section.

                '
            example: tcp
            level: core
            name: transport
            type: keyword
        -   description: 'A name given to an application. This can be arbitrarily
                assigned for things like microservices, but also apply to things like
                skype, icq, facebook, twitter. This would be used in situations where
                the vendor or service can be decoded such as from the source/dest
                IP owners, ports, or wire format.

                The field value must be normalized to lowercase for querying. See
                "Lowercase Capitalization" in the "Implementing ECS" section.

                '
            example: aim
            level: extended
            name: application
            type: keyword
        -   description: 'L7 Network protocol name. ex. http, lumberjack, transport
                protocol.

                The field value must be normalized to lowercase for querying. See
                "Lowercase Capitalization" in the "Implementing ECS" section.

                '
            example: http
            level: core
            name: protocol
            type: keyword
        -   description: "Direction of the network traffic.\nRecommended values are:\n\
                \  * inbound\n  * outbound\n  * internal\n  * external\n  * unknown\n\
                \nWhen mapping events from a host-based monitoring context, populate\
                \ this field from the host's point of view.\nWhen mapping events from\
                \ a network or perimeter-based monitoring context, populate this field\
                \ from the point of view of your network perimeter.\n"
            example: inbound
            level: core
            name: direction
            type: keyword
        -   description: 'Host IP address when the source IP address is the proxy.

                '
            example: 192.1.1.2
            level: core
            name: forwarded_ip
            type: ip
        -   description: 'A hash of source and destination IPs and ports, as well
                as the protocol used in a communication. This is a tool-agnostic standard
                to identify flows.

                Learn more at https://github.com/corelight/community-id-spec.

                '
            example: 1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=
            level: extended
            name: community_id
            type: keyword
        -   description: 'Total bytes transferred in both directions.

                If `source.bytes` and `destination.bytes` are known, `network.bytes`
                is their sum.

                '
            example: 368
            level: core
            name: bytes
            type: long
        -   description: 'Total packets transferred in both directions.

                If `source.packets` and `destination.packets` are known, `network.packets`
                is their sum.

                '
            example: 24
            level: core
            name: packets
            type: long
        group: 2
        name: network
        title: Network
        type: group
    -   description: "An observer is defined as a special network, security, or application\
            \ device used to detect, observe, or create network, security, or application-related\
            \ events and metrics. This could be a custom hardware appliance or a server\
            \ that has been configured to run special network, security, or application\
            \ software. Examples include firewalls, intrusion detection/prevention\
            \ systems, network monitoring sensors, web application firewalls, data\
            \ loss prevention systems, and APM servers. The observer.* fields shall\
            \ be populated with details of the system, if any, that detects, observes\
            \ and/or creates a network, security, or application event or metric.\
            \ Message queues and ETL components used in processing events or metrics\
            \ are not considered observers in ECS.  \n"
        fields:
        -   description: 'MAC address of the observer

                '
            level: core
            name: mac
            type: keyword
        -   description: 'IP address of the observer.

                '
            level: core
            name: ip
            type: ip
        -   description: 'Hostname of the observer.

                '
            level: core
            name: hostname
            type: keyword
        -   description: 'observer vendor information.

                '
            level: core
            name: vendor
            type: keyword
        -   description: 'Observer version.

                '
            level: core
            name: version
            type: keyword
        -   description: 'Observer serial number.

                '
            level: extended
            name: serial_number
            type: keyword
        -   description: 'The type of the observer the data is coming from.

                There is no predefined list of observer types. Some examples are `forwarder`,
                `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.

                '
            example: firewall
            level: core
            name: type
            type: keyword
        group: 2
        name: observer
        title: Observer
        type: group
    -   description: 'The organization fields enrich data with information about the
            company or entity the data is associated with. These fields help you arrange
            or filter data stored in an index by one or multiple organizations.

            '
        fields:
        -   description: 'Organization name.

                '
            level: extended
            name: name
            type: keyword
        -   description: 'Unique identifier for the organization.

                '
            level: extended
            name: id
            type: keyword
        group: 2
        name: organization
        title: Organization
        type: group
    -   description: 'The OS fields contain information about the operating system.

            '
        fields:
        -   description: 'Operating system platform (such centos, ubuntu, windows).

                '
            example: darwin
            level: extended
            name: platform
            type: keyword
        -   description: 'Operating system name, without the version.

                '
            example: Mac OS X
            level: extended
            name: name
            type: keyword
        -   description: 'Operating system name, including the version or code name.

                '
            example: Mac OS Mojave
            level: extended
            name: full
            type: keyword
        -   description: 'OS family (such as redhat, debian, freebsd, windows).

                '
            example: debian
            level: extended
            name: family
            type: keyword
        -   description: 'Operating system version as a raw string.

                '
            example: 10.14.1
            level: extended
            name: version
            type: keyword
        -   description: 'Operating system kernel version as a raw string.

                '
            example: 4.4.0-112-generic
            level: extended
            name: kernel
            type: keyword
        group: 2
        name: os
        reusable:
            expected:
            - observer
            - host
            - user_agent
            top_level: false
        title: Operating System
        type: group
    -   description: 'These fields contain information about a process. These fields
            can help you correlate metrics information with a process id/name from
            a log message.  The `process.pid` often stays in the metric itself and
            is copied to the global field for correlation.

            '
        fields:
        -   description: 'Process id.

                '
            exmple: ssh
            level: core
            name: pid
            type: long
        -   description: 'Process name.

                Sometimes called program name or similar.

                '
            example: ssh
            level: extended
            name: name
            type: keyword
        -   description: 'Process parent id.

                '
            level: extended
            name: ppid
            type: long
        -   description: 'Process arguments.

                May be filtered to protect sensitive information.

                '
            example:
            - ssh
            - -l
            - user
            - 10.0.0.16
            level: extended
            name: args
            type: keyword
        -   description: 'Absolute path to the process executable.

                '
            example: /usr/bin/ssh
            level: extended
            name: executable
            type: keyword
        -   description: 'Process title.

                The proctitle, some times the same as process name. Can also be different:
                for example a browser setting its title to the web page currently
                opened.

                '
            level: extended
            name: title
            type: keyword
        -   description: 'Thread ID.

                '
            example: 4242
            level: extended
            name: thread.id
            type: long
        -   description: 'The time the process started.

                '
            example: '2016-05-23T08:05:34.853Z'
            level: extended
            name: start
            type: date
        -   description: 'The working directory of the process.

                '
            example: /home/alice
            level: extended
            name: working_directory
            type: keyword
        group: 2
        name: process
        title: Process
        type: group
    -   description: 'This field set is meant to facilitate pivoting around a piece
            of data. Some pieces of information can be seen in many places in ECS.
            To facilitate searching for them, append values to their corresponding
            field in `related.`. A concrete example is IP addresses, which can be
            under host, observer, source, destination, client, server, and network.forwarded_ip.
            If you append all IPs to `related.ip`, you can then search for a given
            IP trivially, no matter where it appeared, by querying `related.ip:a.b.c.d`.

            '
        fields:
        -   description: 'All of the IPs seen on your event.

                '
            level: extended
            name: ip
            type: ip
        group: 2
        name: related
        title: Related
        type: group
    -   description: 'A Server is defined as the responder in a network connection
            for events regarding sessions, connections, or bidirectional flow records.
            For TCP events, the server is the receiver of the initial SYN packet(s)
            of the TCP connection. For other protocols, the server is generally the
            responder in the network transaction. Some systems actually use the term
            "responder" to refer the server in TCP connections. The server fields
            describe details about the system acting as the server in the network
            event. Server fields are usually populated in conjunction with client
            fields. Server fields are generally not populated for packet-level events.

            Client / server representations can add semantic context to an exchange,
            which is helpful to visualize the data in certain situations. If your
            context falls in that category, you should still ensure that source and
            destination are filled appropriately.

            '
        fields:
        -   description: 'Some event server addresses are defined ambiguously. The
                event will sometimes list an IP, a domain or a unix socket.  You should
                always store the raw address in the `.address` field.

                Then it should be duplicated to `.ip` or `.domain`, depending on which
                one it is.

                '
            level: extended
            name: address
            type: keyword
        -   description: 'IP address of the server.

                Can be one or multiple IPv4 or IPv6 addresses.

                '
            level: core
            name: ip
            type: ip
        -   description: 'Port of the server.

                '
            level: core
            name: port
            type: long
        -   description: 'MAC address of the server.

                '
            level: core
            name: mac
            type: keyword
        -   description: 'Server domain.

                '
            level: core
            name: domain
            type: keyword
        -   description: 'Bytes sent from the server to the client.

                '
            example: 184
            level: core
            name: bytes
            type: long
        -   description: 'Packets sent from the server to the client.

                '
            example: 12
            level: core
            name: packets
            type: long
        group: 2
        name: server
        title: Server
        type: group
    -   description: 'The service fields describe the service for or from which the
            data was collected. These fields help you find and correlate logs for
            a specific service and version.

            '
        fields:
        -   description: 'Unique identifier of the running service.

                This id should uniquely identify this service. This makes it possible
                to correlate logs and metrics for one specific service.

                Example: If you are experiencing issues with one redis instance, you
                can filter on that id to see metrics and logs for that single instance.

                '
            example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6
            level: core
            name: id
            type: keyword
        -   description: 'Name of the service data is collected from.

                The name of the service is normally user given. This allows if two
                instances of the same service are running on the same machine they
                can be differentiated by the `service.name`.

                Also it allows for distributed services that run on multiple hosts
                to correlate the related instances based on the name.

                In the case of Elasticsearch the service.name could contain the cluster
                name. For Beats the service.name is by default a copy of the `service.type`
                field if no name is specified.

                '
            example: elasticsearch-metrics
            level: core
            name: name
            type: keyword
        -   description: 'The type of the service data is collected from.

                The type can be used to group and correlate logs and metrics from
                one service type.

                Example: If logs or metrics are collected from Elasticsearch, `service.type`
                would be `elasticsearch`.

                '
            example: elasticsearch
            level: core
            name: type
            type: keyword
        -   description: 'Current state of the service.

                '
            level: core
            name: state
            type: keyword
        -   description: 'Version of the service the data was collected from.

                This allows to look at a data set only for a specific version of a
                service.

                '
            example: 3.2.4
            level: core
            name: version
            type: keyword
        -   description: 'Ephemeral identifier of this service (if one exists).

                This id normally changes across restarts, but `service.id` does not.

                '
            example: 8a4f500f
            level: extended
            name: ephemeral_id
            type: keyword
        group: 2
        name: service
        title: Service
        type: group
    -   description: 'Source fields describe details about the source of a packet/event.
            Source fields are usually populated in conjunction with destination fields.

            '
        fields:
        -   description: 'Some event source addresses are defined ambiguously. The
                event will sometimes list an IP, a domain or a unix socket.  You should
                always store the raw address in the `.address` field.

                Then it should be duplicated to `.ip` or `.domain`, depending on which
                one it is.

                '
            level: extended
            name: address
            type: keyword
        -   description: 'IP address of the source.

                Can be one or multiple IPv4 or IPv6 addresses.

                '
            level: core
            name: ip
            type: ip
        -   description: 'Port of the source.

                '
            level: core
            name: port
            type: long
        -   description: 'MAC address of the source.

                '
            level: core
            name: mac
            type: keyword
        -   description: 'Source domain.

                '
            level: core
            name: domain
            type: keyword
        -   description: 'Bytes sent from the source to the destination.

                '
            example: 184
            level: core
            name: bytes
            type: long
        -   description: 'Packets sent from the source to the destination.

                '
            example: 12
            level: core
            name: packets
            type: long
        group: 2
        name: source
        title: Source
        type: group
    -   description: 'URL fields provide a complete URL, with scheme, host, and path.

            '
        fields:
        -   description: 'Unmodified original url as seen in the event source.

                Note that in network monitoring, the observed URL may be a full URL,
                whereas in access logs, the URL is often just represented as a path.

                This field is meant to represent the URL as it was observed, complete
                or not.

                '
            example: 'https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch

                '
            level: extended
            name: original
            type: keyword
        -   description: 'If full URLs are important to your use case, they should
                be stored in `url.full`, whether this field is reconstructed or present
                in the event source.

                '
            example: https://www.elastic.co:443/search?q=elasticsearch#top
            level: extended
            name: full
            type: keyword
        -   description: 'Scheme of the request, such as "https".

                Note: The `:` is not part of the scheme.

                '
            example: https
            level: extended
            name: scheme
            type: keyword
        -   description: 'Domain of the request, such as "www.elastic.co".

                In some cases a URL may refer to an IP and/or port directly, without
                a domain name. In this case, the IP address would go to the `domain`
                field.

                '
            example: www.elastic.co
            level: extended
            name: domain
            type: keyword
        -   description: 'Port of the request, such as 443.

                '
            example: 443
            level: extended
            name: port
            type: integer
        -   description: 'Path of the request, such as "/search".

                '
            level: extended
            name: path
            type: keyword
        -   description: 'The query field describes the query string of the request,
                such as "q=elasticsearch".

                The `?` is excluded from the query string. If a URL contains no `?`,
                there is no query field. If there is a `?` but no query, the query
                field exists with an empty string. The `exists` query can be used
                to differentiate between the two cases.

                '
            level: extended
            name: query
            type: keyword
        -   description: 'Portion of the url after the `#`, such as "top".

                The `#` is not part of the fragment.

                '
            level: extended
            name: fragment
            type: keyword
        -   description: 'Username of the request.

                '
            level: extended
            name: username
            type: keyword
        -   description: 'Password of the request.

                '
            level: extended
            name: password
            type: keyword
        name: url
        title: URL
        type: group
    -   description: 'The user fields describe information about the user that is
            relevant to  the event. Fields can have one entry or multiple entries.
            If a user has more than one id, provide an array that includes all of
            them.

            '
        fields:
        -   description: 'One or multiple unique identifiers of the user.

                '
            level: core
            name: id
            type: keyword
        -   description: 'Short name or login of the user.

                '
            example: albert
            level: core
            name: name
            type: keyword
        -   description: 'User''s full name, if available.

                '
            example: Albert Einstein
            level: extended
            name: full_name
            type: keyword
        -   description: 'User email address.

                '
            level: extended
            name: email
            type: keyword
        -   description: 'Unique user hash to correlate information for a user in
                anonymized form.

                Useful if `user.id` or `user.name` contain confidential information
                and cannot be used.

                '
            level: extended
            name: hash
            type: keyword
        -   description: 'Group the user is a part of. This field can contain a list
                of groups, if necessary.

                '
            level: extended
            name: group
            type: keyword
        group: 2
        name: user
        reusable:
            expected:
            - client
            - destination
            - host
            - server
            - source
            top_level: true
        title: User
        type: group
    -   description: 'The user_agent fields normally come from a browser request.
            They often show up in web service logs coming from the parsed user agent
            string.

            '
        fields:
        -   description: 'Unparsed version of the user_agent.

                '
            example: Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15
                (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1
            level: extended
            name: original
            type: keyword
        -   description: 'Name of the user agent.

                '
            example: Safari
            level: extended
            name: name
            type: keyword
        -   description: 'Version of the user agent.

                '
            example: 12.0
            level: extended
            name: version
            type: keyword
        -   description: 'Name of the device.

                '
            example: iPhone
            level: extended
            name: device.name
            type: keyword
        group: 2
        name: user_agent
        title: User agent
        type: group
    -   description: 'Date/time when the event originated.

            For log events this is the date/time when the event was generated, and
            not when it was read.

            Required field for all events.

            '
        example: '2016-05-23T08:05:34.853Z'
        level: core
        name: '@timestamp'
        required: true
        type: date
    -   description: 'List of keywords used to tag each event.

            '
        example: '["production", "env2"]'
        level: core
        name: tags
        type: keyword
    -   description: 'Key/value pairs.

            Can be used to add meta information to events. Should not contain nested
            objects. All values are stored as keyword.

            Example: `docker` and `k8s` labels.

            '
        example:
            application: foo-bar
            env: production
        level: core
        name: labels
        type: object
    -   description: 'For log events the message field contains the log message.

            In other use cases the message field can be used to concatenate different
            values which are then freely searchable. If multiple messages exist, they
            can be combined into one message.

            '
        example: Hello World
        level: core
        name: message
        type: text
    key: ecs
    title: ECS
